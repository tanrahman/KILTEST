; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\obj\apdu_7816.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\apdu_7816.d --cpu=SC000 --bi --apcs=interwork -O0 -I.\INC -IC:\Keil_v4\ARM\RV31\INC -IC:\Keil_v4\ARM\CMSIS\Include -IC:\Keil_v4\ARM\Device\ARM\ARMSC000\Include --omf_browse=.\obj\apdu_7816.crf SRC\APDU_7816.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  cmd_Symmetry_ALG PROC
;;;47     *************************************************/
;;;48     void cmd_Symmetry_ALG(void)
000000  b530              PUSH     {r4,r5,lr}
;;;49     {
000002  b0ff              SUB      sp,sp,#0x1fc
000004  b094              SUB      sp,sp,#0x50
;;;50         INT8U ret;
;;;51         
;;;52         DES_Parameters * Demo_DES_Param;
;;;53         DES_Parameters  Demo_DES_ParamVar;
;;;54         DES3_Parameters  Demo_3DES_Param;
;;;55         SM4_Parameters  Demo_SM4_Param;
;;;56         SM1_Parameters  Demo_SM1_Param;
;;;57         AES_Parameters  Demo_AES_Param;
;;;58     	SSF33_Parameters Demo_SSF33_Param;
;;;59     	
;;;60     
;;;61         /************************************************* 
;;;62             DES/3DES/SSF33 standard data
;;;63         *************************************************/
;;;64         INT32U  std_DES_Key[4] = {0x53D6A7A9,0x0D38BC86,\
000006  49fe              LDR      r1,|L1.1024|
000008  4608              MOV      r0,r1
00000a  c80d              LDM      r0,{r0,r2,r3}
00000c  68c9              LDR      r1,[r1,#0xc]  ; <Data1>
00000e  ac6b              ADD      r4,sp,#0x1ac
000010  c40d              STM      r4!,{r0,r2,r3}
000012  916e              STR      r1,[sp,#0x1b8]
;;;65                                     0x13B88389,0x963E20CB};
;;;66         INT32U  std_DES_IV[2] = {0x3DCD8D1E,0x76F1233B};
000014  49fa              LDR      r1,|L1.1024|
000016  3110              ADDS     r1,r1,#0x10
000018  c903              LDM      r1,{r0,r1}
00001a  916a              STR      r1,[sp,#0x1a8]
00001c  9069              STR      r0,[sp,#0x1a4]
;;;67         INT32U  std_DES_InData[8] = {0xF0E5AC7F,0x803571B0,0xA7408E0C,0x378C05AE,\
00001e  2220              MOVS     r2,#0x20
000020  49f7              LDR      r1,|L1.1024|
000022  3118              ADDS     r1,r1,#0x18
000024  a861              ADD      r0,sp,#0x184
000026  f7fffffe          BL       __aeabi_memcpy4
;;;68                                        0xE58732C7,0xCC28A34E,0x0B52EE7A,0x8214C162};
;;;69         
;;;70         INT32U  std_DES_ECB_EncData[8] = {0x1D1A9D5A,0x7BE7C2F0,0xDD3BFC0A,0x74DBA3C3,0x5DAFFB8C,0x87286F17,0xE36194F3,0x307DFAA3};
00002a  2220              MOVS     r2,#0x20
00002c  49f4              LDR      r1,|L1.1024|
00002e  3138              ADDS     r1,r1,#0x38
000030  a859              ADD      r0,sp,#0x164
000032  f7fffffe          BL       __aeabi_memcpy4
;;;71         INT32U  std_2Key3DES_CBC_EncData[8] = {0x8E507B1D,0x81EF13C6,0x56BCF427,0x8A35434D,0xA5DB5C40,0x04B9FE12,0x5A81FED3,0x82AC8DF7};                                              
000036  2220              MOVS     r2,#0x20
000038  49f1              LDR      r1,|L1.1024|
00003a  3158              ADDS     r1,r1,#0x58
00003c  a851              ADD      r0,sp,#0x144
00003e  f7fffffe          BL       __aeabi_memcpy4
;;;72         
;;;73         INT32U  std_SM4_Key[4]= {0x53D6A7A9,0x0D38BC86,0x13B88389,0x963E20CB};    
000042  4bef              LDR      r3,|L1.1024|
000044  3378              ADDS     r3,r3,#0x78
000046  685a              LDR      r2,[r3,#4]  ; <Data6>
000048  6819              LDR      r1,[r3,#0]  ; <Data6>
00004a  6898              LDR      r0,[r3,#8]  ; <Data6>
00004c  68db              LDR      r3,[r3,#0xc]  ; <Data6>
00004e  9350              STR      r3,[sp,#0x140]
000050  924e              STR      r2,[sp,#0x138]
000052  914d              STR      r1,[sp,#0x134]
000054  904f              STR      r0,[sp,#0x13c]
;;;74         INT32U  std_SM4_InData[8]= {0xF0E5AC7F,0x803571B0,0xA7408E0C,0x378C05AE,0xE58732C7,0xCC28A34E,0x0B52EE7A,0x8214C162};    
000056  2220              MOVS     r2,#0x20
000058  49e9              LDR      r1,|L1.1024|
00005a  3188              ADDS     r1,r1,#0x88
00005c  a845              ADD      r0,sp,#0x114
00005e  f7fffffe          BL       __aeabi_memcpy4
;;;75         INT32U  std_SM4_ECB_EncData[8] = {0xA106CCAB,0x5FA73D12,0xD20150EB,0x3E0C3F72,0x82C19A1B,0xE04097BC,0xC1BC9F09,0x3A349EAD};        
000062  2220              MOVS     r2,#0x20
000064  49e6              LDR      r1,|L1.1024|
000066  31a8              ADDS     r1,r1,#0xa8
000068  a83d              ADD      r0,sp,#0xf4
00006a  f7fffffe          BL       __aeabi_memcpy4
;;;76         
;;;77         INT32U  std_SM1_Key[8] = {0x891E5349,0x9FDBE309,0x4E0E4B89,0xB40A8608,0x0,0x0,0x0,0x0};                                  
00006e  2220              MOVS     r2,#0x20
000070  49e3              LDR      r1,|L1.1024|
000072  31c8              ADDS     r1,r1,#0xc8
000074  a835              ADD      r0,sp,#0xd4
000076  f7fffffe          BL       __aeabi_memcpy4
;;;78         INT32U  std_SM1_IV[4] = {0x65062726,0xBD109208,0x8ABC16A8,0xF93323E9};                           
00007a  4be1              LDR      r3,|L1.1024|
00007c  33e8              ADDS     r3,r3,#0xe8
00007e  cb0f              LDM      r3,{r0-r3}
000080  ac31              ADD      r4,sp,#0xc4
000082  c40f              STM      r4!,{r0-r3}
;;;79         INT32U  std_SM1_InData[8] = {0xE8C03160,0x3EB4347F,0x7EACE55D,0x34B11E9E,0xC93C62E4,0x8A124F86,0xF8644891,0x51265DFF};
000084  2220              MOVS     r2,#0x20
000086  49de              LDR      r1,|L1.1024|
000088  31f8              ADDS     r1,r1,#0xf8
00008a  a829              ADD      r0,sp,#0xa4
00008c  f7fffffe          BL       __aeabi_memcpy4
;;;80         INT32U  std_SM1_ExtMode_MACData[4] = {0x84FA74A2,0x8A5529D3,0x0C745B64,0x7CE480C8};
000090  4bdc              LDR      r3,|L1.1028|
000092  cb0f              LDM      r3,{r0-r3}
000094  ac25              ADD      r4,sp,#0x94
000096  c40f              STM      r4!,{r0-r3}
;;;81         
;;;82         INT32U  std_AES_Key[4] = {0xABF41AEC,0x3AD45119,0x9D86AC50,0x84346C60};                                  
000098  4bda              LDR      r3,|L1.1028|
00009a  3310              ADDS     r3,r3,#0x10
00009c  cb0f              LDM      r3,{r0-r3}
00009e  ac21              ADD      r4,sp,#0x84
0000a0  c40f              STM      r4!,{r0-r3}
;;;83         INT32U  std_AES_IV[4] = {0x9C945B04,0xCDA87AAD,0x8BBA1956,0x8F9DECFF};                           
0000a2  4bd8              LDR      r3,|L1.1028|
0000a4  3320              ADDS     r3,r3,#0x20
0000a6  685a              LDR      r2,[r3,#4]  ; <Data14>
0000a8  6819              LDR      r1,[r3,#0]  ; <Data14>
0000aa  6898              LDR      r0,[r3,#8]  ; <Data14>
0000ac  68db              LDR      r3,[r3,#0xc]  ; <Data14>
0000ae  9320              STR      r3,[sp,#0x80]
0000b0  921e              STR      r2,[sp,#0x78]
0000b2  911d              STR      r1,[sp,#0x74]
0000b4  901f              STR      r0,[sp,#0x7c]
;;;84         INT32U  std_AES_InData[8] = {0x73EECE91,0x460F6140,0x646E3486,0xC221E412,0x9F77527F,0x43687B5E,0xF8419782,0x488F6F8C};    
0000b6  2220              MOVS     r2,#0x20
0000b8  49d2              LDR      r1,|L1.1028|
0000ba  3130              ADDS     r1,r1,#0x30
0000bc  a815              ADD      r0,sp,#0x54
0000be  f7fffffe          BL       __aeabi_memcpy4
;;;85         INT32U  std_AES_CBC_EncData[8] = {0x0165E254,0xDFF63D63,0x1829AF44,0x000C7F9F,0x61825ABA,0x8AD476A1,0x77B6EDA0,0x8C85E4C0};    
0000c2  2220              MOVS     r2,#0x20
0000c4  49cf              LDR      r1,|L1.1028|
0000c6  3150              ADDS     r1,r1,#0x50
0000c8  a80d              ADD      r0,sp,#0x34
0000ca  f7fffffe          BL       __aeabi_memcpy4
;;;86         
;;;87     	INT32U  std_SSF33_Key[4] = {0xC95310CC,0xC2B556C3,0x9C3AFB5C,0x72E94B62}; 
0000ce  4bcd              LDR      r3,|L1.1028|
0000d0  3370              ADDS     r3,r3,#0x70
0000d2  681a              LDR      r2,[r3,#0]  ; <Data17>
0000d4  1d1b              ADDS     r3,r3,#4
0000d6  cb0b              LDM      r3,{r0,r1,r3}
0000d8  ac0a              ADD      r4,sp,#0x28
0000da  c40b              STM      r4!,{r0,r1,r3}
0000dc  9209              STR      r2,[sp,#0x24]
;;;88     	INT32U  std_SSF33_InData[4] = {0x052C238A,0xCF5F00B1,0x405DEE28,0x08A766AC};
0000de  4bc9              LDR      r3,|L1.1028|
0000e0  3380              ADDS     r3,r3,#0x80
0000e2  681a              LDR      r2,[r3,#0]  ; <Data18>
0000e4  1d1b              ADDS     r3,r3,#4
0000e6  cb0b              LDM      r3,{r0,r1,r3}
0000e8  ac06              ADD      r4,sp,#0x18
0000ea  c40b              STM      r4!,{r0,r1,r3}
0000ec  9205              STR      r2,[sp,#0x14]
;;;89     	INT32U  std_SSF33_ECB_EncData[4] = {0xCD803447,0x0EEB5773,0xDD681675,0x7B4F2ECF};
0000ee  4bc5              LDR      r3,|L1.1028|
0000f0  3390              ADDS     r3,r3,#0x90
0000f2  cb0f              LDM      r3,{r0-r3}
0000f4  ac01              ADD      r4,sp,#4
0000f6  c40f              STM      r4!,{r0-r3}
;;;90     	
;;;91     	
;;;92         /*1. run DES ECB_ENC */
;;;93         //1-1.config DES struct para
;;;94         Demo_DES_Param = &Demo_DES_ParamVar;
0000f8  ad8d              ADD      r5,sp,#0x234
;;;95         Demo_DES_Param->iDataPtr = std_DES_InData;
0000fa  a861              ADD      r0,sp,#0x184
0000fc  6028              STR      r0,[r5,#0]
;;;96         Demo_DES_Param->oDataPtr = G_output;
0000fe  48c2              LDR      r0,|L1.1032|
000100  6128              STR      r0,[r5,#0x10]
;;;97         Demo_DES_Param->DataLen = sizeof(std_DES_InData);
000102  2020              MOVS     r0,#0x20
000104  6068              STR      r0,[r5,#4]
;;;98         //Demo_DES_Param->IVPtr = std_DES_IV;
;;;99         Demo_DES_Param->iKeyPtr = std_DES_Key;
000106  a86b              ADD      r0,sp,#0x1ac
000108  60a8              STR      r0,[r5,#8]
;;;100        Demo_DES_Param->Type = ECB_ENCRYPT;
00010a  2000              MOVS     r0,#0
00010c  7528              STRB     r0,[r5,#0x14]
;;;101        
;;;102        //1-2.run DES 
;;;103        ret = HED_DESBlock(Demo_DES_Param);
00010e  4628              MOV      r0,r5
000110  f7fffffe          BL       HED_DESBlock
000114  b2c4              UXTB     r4,r0
;;;104        if (ret !=0 )
000116  2c00              CMP      r4,#0
000118  d005              BEQ      |L1.294|
;;;105        {
;;;106            SW1SW2 = 0x6F01;
00011a  48bc              LDR      r0,|L1.1036|
00011c  49bc              LDR      r1,|L1.1040|
00011e  8008              STRH     r0,[r1,#0]
                  |L1.288|
;;;107            return;
;;;108        }
;;;109        
;;;110        //1-3.check DES data
;;;111        ret = memcmp(Demo_DES_Param->oDataPtr, std_DES_ECB_EncData, sizeof(std_DES_ECB_EncData));
;;;112        if (ret !=0 )
;;;113        {
;;;114            SW1SW2 = 0x6F02;
;;;115            return;
;;;116        } 
;;;117        
;;;118        /*2. run 3DES 2KEY CBC ENC /DEC */
;;;119        //2-1.config 3DES struct para
;;;120        Demo_3DES_Param.iDataPtr = std_DES_InData;
;;;121        Demo_3DES_Param.oDataPtr = G_output;
;;;122        Demo_3DES_Param.DataLen = sizeof(std_DES_InData);
;;;123        Demo_3DES_Param.IVPtr = std_DES_IV;
;;;124        Demo_3DES_Param.iKeyPtr = std_DES_Key;
;;;125        Demo_3DES_Param.Type = CBC_ENCRYPT;
;;;126        
;;;127        //2-2.run 3DES 
;;;128        ret = HED_DES3Block(&Demo_3DES_Param);
;;;129        if (ret !=0 )
;;;130        {
;;;131            SW1SW2 = 0x6F03;
;;;132            return;
;;;133        }
;;;134        
;;;135        //2-3.check 3DES data
;;;136        ret = memcmp(Demo_3DES_Param.oDataPtr, std_2Key3DES_CBC_EncData, sizeof(std_2Key3DES_CBC_EncData));
;;;137        if (ret !=0 )
;;;138        {
;;;139            SW1SW2 = 0x6F04;
;;;140            return;
;;;141        } 
;;;142        
;;;143        //2-4.check 3DES data Dec
;;;144        Demo_3DES_Param.iDataPtr = std_2Key3DES_CBC_EncData;
;;;145        Demo_3DES_Param.oDataPtr = G_output;
;;;146        Demo_3DES_Param.DataLen = sizeof(std_2Key3DES_CBC_EncData);
;;;147        Demo_3DES_Param.IVPtr = std_DES_IV;
;;;148        Demo_3DES_Param.iKeyPtr = std_DES_Key;
;;;149        Demo_3DES_Param.Type = CBC_DECRYPT;
;;;150        
;;;151        HED_DES3Block(&Demo_3DES_Param);
;;;152        ret = memcmp(Demo_3DES_Param.oDataPtr, std_DES_InData, sizeof(std_DES_InData));
;;;153        if (ret !=0 )
;;;154        {
;;;155            SW1SW2 = 0x6F05;
;;;156            return;
;;;157        }    
;;;158        
;;;159        /*3. run SM4 ECB, other SM4 operations is same as DES */
;;;160        Demo_SM4_Param.iDataPtr = std_SM4_InData;
;;;161        Demo_SM4_Param.oDataPtr = G_output;
;;;162        Demo_SM4_Param.DataLen = sizeof(std_SM4_InData);
;;;163        Demo_SM4_Param.iKeyPtr = std_SM4_Key;
;;;164        Demo_SM4_Param.Type = ECB_ENCRYPT;
;;;165        
;;;166        ret = HED_SM4Block (&Demo_SM4_Param);
;;;167        if (ret !=0 )
;;;168        {
;;;169            SW1SW2 = 0x6F06;
;;;170            return;
;;;171        }
;;;172        ret = memcmp(Demo_SM4_Param.oDataPtr, std_SM4_ECB_EncData, sizeof(std_SM4_ECB_EncData));
;;;173        if (ret !=0 )
;;;174        {
;;;175            SW1SW2 = 0x6F07;
;;;176            return;
;;;177        }
;;;178        
;;;179        /*4. run SM1 ECB, other SM1 operations is similar */
;;;180        Demo_SM1_Param.iDataPtr = std_SM1_InData;
;;;181        Demo_SM1_Param.oDataPtr = G_output;
;;;182        Demo_SM1_Param.DataLen = sizeof(std_SM1_InData);
;;;183        Demo_SM1_Param.iKeyPtr = std_SM1_Key;
;;;184        Demo_SM1_Param.IVPtr = std_SM1_IV;
;;;185        Demo_SM1_Param.Type = MAC_EXTPARA;
;;;186        
;;;187        ret = HED_SM1Block (&Demo_SM1_Param);
;;;188        if (ret !=0 )
;;;189        {
;;;190            SW1SW2 = 0x6F08;
;;;191            return;
;;;192        }
;;;193        ret = memcmp(Demo_SM1_Param.oDataPtr, std_SM1_ExtMode_MACData, sizeof(std_SM1_ExtMode_MACData));
;;;194        if (ret !=0 )
;;;195        {
;;;196            SW1SW2 = 0x6F09;
;;;197            return;
;;;198        } 
;;;199        
;;;200        /*5. run AES ECB, other AES operations is similar */
;;;201        Demo_AES_Param.iDataPtr = std_AES_InData;
;;;202        Demo_AES_Param.oDataPtr = G_output;
;;;203        Demo_AES_Param.DataLen = sizeof(std_AES_InData);
;;;204        Demo_AES_Param.iKeyPtr = std_AES_Key;
;;;205        Demo_AES_Param.IVPtr = std_AES_IV;
;;;206        Demo_AES_Param.Type = CBC_ENCRYPT;
;;;207        
;;;208        ret = HED_AESBlock (&Demo_AES_Param);
;;;209        if (ret !=0 )
;;;210        {
;;;211            SW1SW2 = 0x6F0A;
;;;212            return;
;;;213        }
;;;214        ret = memcmp(Demo_AES_Param.oDataPtr, std_AES_CBC_EncData, sizeof(std_AES_CBC_EncData));
;;;215        if (ret !=0 )
;;;216        {
;;;217            SW1SW2 = 0x6F0B;
;;;218            return;
;;;219        }
;;;220    
;;;221        /*6. run SSF33 ECB, other SSF33 operations is same as DES */
;;;222        Demo_SSF33_Param.iDataPtr = std_SSF33_InData;
;;;223        Demo_SSF33_Param.oDataPtr = G_output;
;;;224        Demo_SSF33_Param.DataLen = sizeof(std_SSF33_InData);
;;;225        Demo_SSF33_Param.iKeyPtr = std_SSF33_Key;
;;;226        Demo_SSF33_Param.Type = ECB_ENCRYPT;
;;;227        
;;;228        ret = HED_SSF33Block (&Demo_SSF33_Param);
;;;229        if (ret !=0 )
;;;230        {
;;;231            SW1SW2 = 0x6F0C;
;;;232            return;
;;;233        }
;;;234        ret = memcmp(Demo_SSF33_Param.oDataPtr, std_SSF33_ECB_EncData, sizeof(std_SSF33_ECB_EncData));
;;;235        if (ret !=0 )
;;;236        {
;;;237            SW1SW2 = 0x6F0D;
;;;238            return;
;;;239        }	
;;;240           
;;;241        //return
;;;242        SW1SW2 = 0x9000;       
;;;243    }
000120  b07f              ADD      sp,sp,#0x1fc
000122  b014              ADD      sp,sp,#0x50
000124  bd30              POP      {r4,r5,pc}
                  |L1.294|
000126  2220              MOVS     r2,#0x20              ;111
000128  a959              ADD      r1,sp,#0x164          ;111
00012a  6928              LDR      r0,[r5,#0x10]         ;111
00012c  f7fffffe          BL       memcmp
000130  b2c4              UXTB     r4,r0                 ;111
000132  2c00              CMP      r4,#0                 ;112
000134  d004              BEQ      |L1.320|
000136  48b5              LDR      r0,|L1.1036|
000138  1c40              ADDS     r0,r0,#1              ;114
00013a  49b5              LDR      r1,|L1.1040|
00013c  8008              STRH     r0,[r1,#0]            ;114
00013e  e7ef              B        |L1.288|
                  |L1.320|
000140  a861              ADD      r0,sp,#0x184          ;120
000142  9087              STR      r0,[sp,#0x21c]        ;120
000144  48b0              LDR      r0,|L1.1032|
000146  908b              STR      r0,[sp,#0x22c]        ;121
000148  2020              MOVS     r0,#0x20              ;122
00014a  9088              STR      r0,[sp,#0x220]        ;122
00014c  a869              ADD      r0,sp,#0x1a4          ;123
00014e  908a              STR      r0,[sp,#0x228]        ;123
000150  a86b              ADD      r0,sp,#0x1ac          ;124
000152  9089              STR      r0,[sp,#0x224]        ;124
000154  2020              MOVS     r0,#0x20              ;125
000156  a988              ADD      r1,sp,#0x220          ;125
000158  7408              STRB     r0,[r1,#0x10]         ;125
00015a  a887              ADD      r0,sp,#0x21c          ;128
00015c  f7fffffe          BL       HED_DES3Block
000160  b2c4              UXTB     r4,r0                 ;128
000162  2c00              CMP      r4,#0                 ;129
000164  d004              BEQ      |L1.368|
000166  48a9              LDR      r0,|L1.1036|
000168  1c80              ADDS     r0,r0,#2              ;131
00016a  49a9              LDR      r1,|L1.1040|
00016c  8008              STRH     r0,[r1,#0]            ;131
00016e  e7d7              B        |L1.288|
                  |L1.368|
000170  2220              MOVS     r2,#0x20              ;136
000172  a951              ADD      r1,sp,#0x144          ;136
000174  988b              LDR      r0,[sp,#0x22c]        ;136
000176  f7fffffe          BL       memcmp
00017a  b2c4              UXTB     r4,r0                 ;136
00017c  2c00              CMP      r4,#0                 ;137
00017e  d004              BEQ      |L1.394|
000180  48a2              LDR      r0,|L1.1036|
000182  1cc0              ADDS     r0,r0,#3              ;139
000184  49a2              LDR      r1,|L1.1040|
000186  8008              STRH     r0,[r1,#0]            ;139
000188  e7ca              B        |L1.288|
                  |L1.394|
00018a  a851              ADD      r0,sp,#0x144          ;144
00018c  9087              STR      r0,[sp,#0x21c]        ;144
00018e  489e              LDR      r0,|L1.1032|
000190  908b              STR      r0,[sp,#0x22c]        ;145
000192  2020              MOVS     r0,#0x20              ;146
000194  9088              STR      r0,[sp,#0x220]        ;146
000196  a869              ADD      r0,sp,#0x1a4          ;147
000198  908a              STR      r0,[sp,#0x228]        ;147
00019a  a86b              ADD      r0,sp,#0x1ac          ;148
00019c  9089              STR      r0,[sp,#0x224]        ;148
00019e  2060              MOVS     r0,#0x60              ;149
0001a0  a988              ADD      r1,sp,#0x220          ;149
0001a2  7408              STRB     r0,[r1,#0x10]         ;149
0001a4  a887              ADD      r0,sp,#0x21c          ;151
0001a6  f7fffffe          BL       HED_DES3Block
0001aa  2220              MOVS     r2,#0x20              ;152
0001ac  a961              ADD      r1,sp,#0x184          ;152
0001ae  988b              LDR      r0,[sp,#0x22c]        ;152
0001b0  f7fffffe          BL       memcmp
0001b4  b2c4              UXTB     r4,r0                 ;152
0001b6  2c00              CMP      r4,#0                 ;153
0001b8  d004              BEQ      |L1.452|
0001ba  4894              LDR      r0,|L1.1036|
0001bc  1d00              ADDS     r0,r0,#4              ;155
0001be  4994              LDR      r1,|L1.1040|
0001c0  8008              STRH     r0,[r1,#0]            ;155
0001c2  e7ad              B        |L1.288|
                  |L1.452|
0001c4  a845              ADD      r0,sp,#0x114          ;160
0001c6  9081              STR      r0,[sp,#0x204]        ;160
0001c8  488f              LDR      r0,|L1.1032|
0001ca  9085              STR      r0,[sp,#0x214]        ;161
0001cc  2020              MOVS     r0,#0x20              ;162
0001ce  9082              STR      r0,[sp,#0x208]        ;162
0001d0  a84d              ADD      r0,sp,#0x134          ;163
0001d2  9083              STR      r0,[sp,#0x20c]        ;163
0001d4  2000              MOVS     r0,#0                 ;164
0001d6  a980              ADD      r1,sp,#0x200          ;164
0001d8  7608              STRB     r0,[r1,#0x18]         ;164
0001da  a881              ADD      r0,sp,#0x204          ;166
0001dc  f7fffffe          BL       HED_SM4Block
0001e0  b2c4              UXTB     r4,r0                 ;166
0001e2  2c00              CMP      r4,#0                 ;167
0001e4  d004              BEQ      |L1.496|
0001e6  4889              LDR      r0,|L1.1036|
0001e8  1d40              ADDS     r0,r0,#5              ;169
0001ea  4989              LDR      r1,|L1.1040|
0001ec  8008              STRH     r0,[r1,#0]            ;169
0001ee  e797              B        |L1.288|
                  |L1.496|
0001f0  2220              MOVS     r2,#0x20              ;172
0001f2  a93d              ADD      r1,sp,#0xf4           ;172
0001f4  9885              LDR      r0,[sp,#0x214]        ;172
0001f6  f7fffffe          BL       memcmp
0001fa  b2c4              UXTB     r4,r0                 ;172
0001fc  2c00              CMP      r4,#0                 ;173
0001fe  d004              BEQ      |L1.522|
000200  4882              LDR      r0,|L1.1036|
000202  1d80              ADDS     r0,r0,#6              ;175
000204  4982              LDR      r1,|L1.1040|
000206  8008              STRH     r0,[r1,#0]            ;175
000208  e78a              B        |L1.288|
                  |L1.522|
00020a  a829              ADD      r0,sp,#0xa4           ;180
00020c  907b              STR      r0,[sp,#0x1ec]        ;180
00020e  487e              LDR      r0,|L1.1032|
000210  907f              STR      r0,[sp,#0x1fc]        ;181
000212  2020              MOVS     r0,#0x20              ;182
000214  907c              STR      r0,[sp,#0x1f0]        ;182
000216  a835              ADD      r0,sp,#0xd4           ;183
000218  907d              STR      r0,[sp,#0x1f4]        ;183
00021a  a831              ADD      r0,sp,#0xc4           ;184
00021c  907e              STR      r0,[sp,#0x1f8]        ;184
00021e  2084              MOVS     r0,#0x84              ;185
000220  a980              ADD      r1,sp,#0x200          ;185
000222  7008              STRB     r0,[r1,#0]            ;185
000224  a87b              ADD      r0,sp,#0x1ec          ;187
000226  f7fffffe          BL       HED_SM1Block
00022a  b2c4              UXTB     r4,r0                 ;187
00022c  2c00              CMP      r4,#0                 ;188
00022e  d004              BEQ      |L1.570|
000230  4876              LDR      r0,|L1.1036|
000232  1dc0              ADDS     r0,r0,#7              ;190
000234  4976              LDR      r1,|L1.1040|
000236  8008              STRH     r0,[r1,#0]            ;190
000238  e772              B        |L1.288|
                  |L1.570|
00023a  2210              MOVS     r2,#0x10              ;193
00023c  a925              ADD      r1,sp,#0x94           ;193
00023e  987f              LDR      r0,[sp,#0x1fc]        ;193
000240  f7fffffe          BL       memcmp
000244  b2c4              UXTB     r4,r0                 ;193
000246  2c00              CMP      r4,#0                 ;194
000248  d004              BEQ      |L1.596|
00024a  4870              LDR      r0,|L1.1036|
00024c  3008              ADDS     r0,r0,#8              ;196
00024e  4970              LDR      r1,|L1.1040|
000250  8008              STRH     r0,[r1,#0]            ;196
000252  e765              B        |L1.288|
                  |L1.596|
000254  a815              ADD      r0,sp,#0x54           ;201
000256  9075              STR      r0,[sp,#0x1d4]        ;201
000258  486b              LDR      r0,|L1.1032|
00025a  9079              STR      r0,[sp,#0x1e4]        ;202
00025c  2020              MOVS     r0,#0x20              ;203
00025e  9076              STR      r0,[sp,#0x1d8]        ;203
000260  a821              ADD      r0,sp,#0x84           ;204
000262  9077              STR      r0,[sp,#0x1dc]        ;204
000264  a81d              ADD      r0,sp,#0x74           ;205
000266  9078              STR      r0,[sp,#0x1e0]        ;205
000268  2020              MOVS     r0,#0x20              ;206
00026a  a978              ADD      r1,sp,#0x1e0          ;206
00026c  7208              STRB     r0,[r1,#8]            ;206
00026e  a875              ADD      r0,sp,#0x1d4          ;208
000270  f7fffffe          BL       HED_AESBlock
000274  b2c4              UXTB     r4,r0                 ;208
000276  2c00              CMP      r4,#0                 ;209
000278  d004              BEQ      |L1.644|
00027a  4864              LDR      r0,|L1.1036|
00027c  3009              ADDS     r0,r0,#9              ;211
00027e  4964              LDR      r1,|L1.1040|
000280  8008              STRH     r0,[r1,#0]            ;211
000282  e74d              B        |L1.288|
                  |L1.644|
000284  2220              MOVS     r2,#0x20              ;214
000286  a90d              ADD      r1,sp,#0x34           ;214
000288  9879              LDR      r0,[sp,#0x1e4]        ;214
00028a  f7fffffe          BL       memcmp
00028e  b2c4              UXTB     r4,r0                 ;214
000290  2c00              CMP      r4,#0                 ;215
000292  d004              BEQ      |L1.670|
000294  485d              LDR      r0,|L1.1036|
000296  300a              ADDS     r0,r0,#0xa            ;217
000298  495d              LDR      r1,|L1.1040|
00029a  8008              STRH     r0,[r1,#0]            ;217
00029c  e740              B        |L1.288|
                  |L1.670|
00029e  a805              ADD      r0,sp,#0x14           ;222
0002a0  906f              STR      r0,[sp,#0x1bc]        ;222
0002a2  4859              LDR      r0,|L1.1032|
0002a4  9073              STR      r0,[sp,#0x1cc]        ;223
0002a6  2010              MOVS     r0,#0x10              ;224
0002a8  9070              STR      r0,[sp,#0x1c0]        ;224
0002aa  a809              ADD      r0,sp,#0x24           ;225
0002ac  9071              STR      r0,[sp,#0x1c4]        ;225
0002ae  2000              MOVS     r0,#0                 ;226
0002b0  a970              ADD      r1,sp,#0x1c0          ;226
0002b2  7408              STRB     r0,[r1,#0x10]         ;226
0002b4  a86f              ADD      r0,sp,#0x1bc          ;228
0002b6  f7fffffe          BL       HED_SSF33Block
0002ba  b2c4              UXTB     r4,r0                 ;228
0002bc  2c00              CMP      r4,#0                 ;229
0002be  d004              BEQ      |L1.714|
0002c0  4852              LDR      r0,|L1.1036|
0002c2  300b              ADDS     r0,r0,#0xb            ;231
0002c4  4952              LDR      r1,|L1.1040|
0002c6  8008              STRH     r0,[r1,#0]            ;231
0002c8  e72a              B        |L1.288|
                  |L1.714|
0002ca  2210              MOVS     r2,#0x10              ;234
0002cc  a901              ADD      r1,sp,#4              ;234
0002ce  9873              LDR      r0,[sp,#0x1cc]        ;234
0002d0  f7fffffe          BL       memcmp
0002d4  b2c4              UXTB     r4,r0                 ;234
0002d6  2c00              CMP      r4,#0                 ;235
0002d8  d004              BEQ      |L1.740|
0002da  484c              LDR      r0,|L1.1036|
0002dc  300c              ADDS     r0,r0,#0xc            ;237
0002de  494c              LDR      r1,|L1.1040|
0002e0  8008              STRH     r0,[r1,#0]            ;237
0002e2  e71d              B        |L1.288|
                  |L1.740|
0002e4  2009              MOVS     r0,#9                 ;242
0002e6  0300              LSLS     r0,r0,#12             ;242
0002e8  4949              LDR      r1,|L1.1040|
0002ea  8008              STRH     r0,[r1,#0]            ;242
0002ec  bf00              NOP      
0002ee  e717              B        |L1.288|
;;;244    /************************************************* 
                          ENDP

                  cmd_CRC_Calculate PROC
;;;251    *************************************************/
;;;252    void cmd_CRC_Calculate(void)
0002f0  b510              PUSH     {r4,lr}
;;;253    {
0002f2  b0ff              SUB      sp,sp,#0x1fc
0002f4  b089              SUB      sp,sp,#0x24
;;;254        INT16U ret;
;;;255        INT8U crcXInput[261];
;;;256    
;;;257        /************************************************* 
;;;258            CRC16 standard data
;;;259        *************************************************/
;;;260        const INT8U crcFInput[261] = {0xBA,0x37,0xB1,0x5A,0xCF,0xF7,0x7C,0x7D,0x0C,0xFD,0xA4,0x06,0xC2,0xA6,0x6D,0xD8,0x35,0x02,0x8D,0x5C,0x28,0x4A,0x57,0x1B,0xA7,0xA0,0x25,0x9D,0x16,0x08,0x06,0x83,\
0002f6  22ff              MOVS     r2,#0xff
0002f8  3209              ADDS     r2,r2,#9
0002fa  4946              LDR      r1,|L1.1044|
0002fc  a804              ADD      r0,sp,#0x10
0002fe  f7fffffe          BL       __aeabi_memcpy4
;;;261                                  0x79,0xA5,0xA7,0xE3,0x04,0x37,0x85,0xE2,0xE4,0xD3,0x52,0x96,0x4E,0xE3,0xA6,0x1D,0xC8,0x60,0xE9,0xF7,0xB6,0x4C,0x7F,0xAB,0x26,0x74,0x34,0x98,0xDF,0x66,0xE9,0x1A,\
;;;262                                  0xA6,0xB0,0x7F,0xE0,0xD1,0x59,0x02,0x8B,0x10,0xA3,0x18,0x8A,0x7A,0x01,0xAA,0x33,0xD5,0x54,0xD3,0x24,0x29,0x6D,0x08,0xDB,0x86,0xBE,0x87,0x92,0x13,0x61,0x04,0x5E,\
;;;263                                  0x59,0x4D,0x90,0x8A,0xD0,0xD6,0xCC,0x30,0xA9,0x64,0x4D,0x18,0xDC,0x76,0x51,0xD3,0x74,0xD9,0xA2,0x19,0x19,0x23,0xC9,0x62,0xDD,0x75,0x75,0xC2,0x4A,0x70,0x2D,0x09,\
;;;264                                  0xAA,0x76,0x33,0x19,0x97,0x24,0xBA,0x88,0xC5,0x0E,0x4A,0x79,0x0E,0xBC,0x72,0xB5,0xBD,0xE4,0xAF,0x10,0x1E,0xE8,0x9A,0xF9,0x44,0x91,0x57,0x61,0x1C,0x0B,0x3C,0xD1,\
;;;265                                  0xB1,0x22,0xC0,0xC5,0xC0,0xBD,0xA5,0x4C,0x7E,0x9A,0x67,0xE4,0xA6,0x4B,0xE6,0x91,0xC8,0x6F,0x51,0x3F,0xD0,0x33,0x54,0x58,0xD4,0x0A,0x85,0xA8,0x21,0xAA,0x0A,0x6F,\
;;;266                                  0x86,0x49,0x8E,0xC5,0xE1,0x18,0x64,0x34,0xEA,0xFF,0xFB,0x93,0x3E,0x99,0x84,0x1F,0xAE,0x71,0xE1,0xDF,0xC7,0x7C,0xCF,0x37,0xA3,0xD9,0x56,0xCC,0xF1,0xC6,0x6F,0x9A,\
;;;267                                  0x42,0xE4,0xF5,0x52,0x94,0xAE,0xD0,0xF8,0x23,0x35,0x5F,0xBC,0x6D,0x20,0x25,0x17,0x85,0xE2,0xB6,0x27,0x9B,0x3C,0xE2,0x4E,0xCB,0xF5,0x22,0x08,0x24,0xD6,0x42,0x0C,\
;;;268                                  0xFB,0xEA,0x4E,0xA5,0x70}; 
;;;269        const INT8U crcFInput2[13] = {0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x11,0x22,0x33,0x44};                                
000302  a345              ADR      r3,|L1.1048|
000304  cb0f              LDM      r3,{r0-r3}
000306  466c              MOV      r4,sp
000308  c40f              STM      r4!,{r0-r3}
;;;270        
;;;271        #define std_CRCOutput_6363          0x8AA0
;;;272        #define std_CRCOutput_FFFF          0x2152
;;;273        #define std_CRCOutput_JAVA_TCK      0x3A2F
;;;274        
;;;275        SYSCLKEN |= BIT0;//enable CRC IP's CLK
00030a  4847              LDR      r0,|L1.1064|
00030c  6800              LDR      r0,[r0,#0]
00030e  2101              MOVS     r1,#1
000310  4308              ORRS     r0,r0,r1
000312  4945              LDR      r1,|L1.1064|
000314  6008              STR      r0,[r1,#0]
;;;276        memcpy(crcXInput, crcFInput, sizeof(crcXInput));
000316  22ff              MOVS     r2,#0xff
000318  3209              ADDS     r2,r2,#9
00031a  a904              ADD      r1,sp,#0x10
00031c  a846              ADD      r0,sp,#0x118
00031e  f7fffffe          BL       __aeabi_memcpy4
;;;277            
;;;278        ret = HED_CRC16(0x6363, sizeof(crcXInput), crcXInput,2);
000322  2302              MOVS     r3,#2
000324  aa46              ADD      r2,sp,#0x118
000326  21ff              MOVS     r1,#0xff
000328  3106              ADDS     r1,#6
00032a  4840              LDR      r0,|L1.1068|
00032c  f7fffffe          BL       HED_CRC16
000330  4604              MOV      r4,r0
;;;279        if (ret != std_CRCOutput_6363)
000332  483f              LDR      r0,|L1.1072|
000334  4284              CMP      r4,r0
000336  d005              BEQ      |L1.836|
;;;280        {
;;;281            SW1SW2 = 0x6F01;
000338  4834              LDR      r0,|L1.1036|
00033a  4935              LDR      r1,|L1.1040|
00033c  8008              STRH     r0,[r1,#0]
                  |L1.830|
;;;282            return;
;;;283        }
;;;284            
;;;285        ret = HED_CRC16(0xFFFF, sizeof(crcFInput), (INT8U *)crcFInput,2);
;;;286        if ((INT16U)(~ret) != std_CRCOutput_FFFF)
;;;287        {
;;;288            SW1SW2 = 0x6F02;
;;;289            return;
;;;290        }
;;;291        
;;;292        ret = HED_CRC16(0xFFFF, sizeof(crcFInput2), (INT8U *)crcFInput2,1);//fit to JC API's requirement,can pass TCK verify
;;;293        if ((INT16U)(~ret) != std_CRCOutput_JAVA_TCK)
;;;294        {
;;;295            SW1SW2 = 0x6F03;
;;;296            return;
;;;297        }
;;;298        
;;;299        SW1SW2 = 0x9000;
;;;300    }
00033e  b07f              ADD      sp,sp,#0x1fc
000340  b009              ADD      sp,sp,#0x24
000342  bd10              POP      {r4,pc}
                  |L1.836|
000344  2302              MOVS     r3,#2                 ;285
000346  aa04              ADD      r2,sp,#0x10           ;285
000348  21ff              MOVS     r1,#0xff              ;285
00034a  3106              ADDS     r1,#6                 ;285
00034c  4839              LDR      r0,|L1.1076|
00034e  f7fffffe          BL       HED_CRC16
000352  4604              MOV      r4,r0                 ;285
000354  43e0              MVNS     r0,r4                 ;286
000356  b280              UXTH     r0,r0                 ;286
000358  4937              LDR      r1,|L1.1080|
00035a  4288              CMP      r0,r1                 ;286
00035c  d004              BEQ      |L1.872|
00035e  482b              LDR      r0,|L1.1036|
000360  1c40              ADDS     r0,r0,#1              ;288
000362  492b              LDR      r1,|L1.1040|
000364  8008              STRH     r0,[r1,#0]            ;288
000366  e7ea              B        |L1.830|
                  |L1.872|
000368  2301              MOVS     r3,#1                 ;292
00036a  466a              MOV      r2,sp                 ;292
00036c  210d              MOVS     r1,#0xd               ;292
00036e  4831              LDR      r0,|L1.1076|
000370  f7fffffe          BL       HED_CRC16
000374  4604              MOV      r4,r0                 ;292
000376  43e0              MVNS     r0,r4                 ;293
000378  b280              UXTH     r0,r0                 ;293
00037a  4930              LDR      r1,|L1.1084|
00037c  4288              CMP      r0,r1                 ;293
00037e  d004              BEQ      |L1.906|
000380  4822              LDR      r0,|L1.1036|
000382  1c80              ADDS     r0,r0,#2              ;295
000384  4922              LDR      r1,|L1.1040|
000386  8008              STRH     r0,[r1,#0]            ;295
000388  e7d9              B        |L1.830|
                  |L1.906|
00038a  2009              MOVS     r0,#9                 ;299
00038c  0300              LSLS     r0,r0,#12             ;299
00038e  4920              LDR      r1,|L1.1040|
000390  8008              STRH     r0,[r1,#0]            ;299
000392  bf00              NOP      
000394  e7d3              B        |L1.830|
;;;301    /************************************************* 
                          ENDP

                  cmd_RSA_ALG PROC
;;;308    *************************************************/
;;;309    void cmd_RSA_ALG(void)
000396  b530              PUSH     {r4,r5,lr}
;;;310    {
000398  4b29              LDR      r3,|L1.1088|
00039a  449d              ADD      sp,sp,r3
;;;311        INT8U ret;
;;;312        
;;;313        /* user should built all RSA buffers according to RSA_Parameters*/
;;;314        INT32U  Demo_RSA_e[1];
;;;315        INT32U  Demo_RSA_n[64];
;;;316        INT32U  Demo_RSA_p[32];
;;;317        INT32U  Demo_RSA_q[32];
;;;318        INT32U  Demo_RSA_dp[32];
;;;319        INT32U  Demo_RSA_dq[32];
;;;320        INT32U  Demo_RSA_qInv[32];
;;;321        INT32U  Demo_RSA_d[64];
;;;322        INT32U  Demo_RSA_preKey[134];
;;;323        INT32U  Demo_RSA_iData[64];
;;;324        INT32U  Demo_RSA_oData[64];    
;;;325        
;;;326        RSA_Info * RSA_Param;
;;;327        RSA_Info  RSA_ParamVar;
;;;328    
;;;329    
;;;330        /************************************************* 
;;;331            RSA standard data(bigEndian)
;;;332        *************************************************/
;;;333         const INT32U std_RSA_e[1] = {0x00010001};
00039c  4819              LDR      r0,|L1.1028|
00039e  30a0              ADDS     r0,r0,#0xa0
0003a0  6801              LDR      r1,[r0,#0]  ; <Data20>
0003a2  4828              LDR      r0,|L1.1092|
0003a4  4468              ADD      r0,r0,sp
0003a6  6001              STR      r1,[r0,#0]
;;;334         const INT32U std_RSA2048_p[32] = {0xAB9C27FF,0x7745BA4E,0xB2F3499E,0xB86B6F98,0x66E62F7E,0x3867198F,0x3CAB7B48,0x6CD1358B,\
0003a8  2280              MOVS     r2,#0x80
0003aa  4916              LDR      r1,|L1.1028|
0003ac  31a4              ADDS     r1,r1,#0xa4
0003ae  3880              SUBS     r0,r0,#0x80
0003b0  f7fffffe          BL       __aeabi_memcpy4
;;;335                                      0x94C9352B,0xC1E19FFF,0x09B30FEF,0x5AADA132,0xD9FB9F40,0x9047DC7E,0x594168D1,0xAF9843AB,\
;;;336                                      0x8AED0357,0x4A220A7A,0x1F7F24F4,0xFDD95C3A,0xA2811AF7,0x36935D39,0x7A49A408,0x574C865E,\
;;;337                                      0x305EF0EF,0x6ABDAC25,0x4534CB92,0xDBF3A52E,0xA3283921,0x17F0C925,0xFF199A31,0xB6B13E31};        
;;;338             
;;;339    
;;;340        const INT32U std_RSA2048_q[32] = {0xC3AF3333,0x0BF5E51B,0xDD5629E7,0x904FD609,0xB465C676,0x49CFADA1,0x467B3C53,0x97E4F5D3,\
0003b4  2280              MOVS     r2,#0x80
0003b6  4924              LDR      r1,|L1.1096|
0003b8  a8ff              ADD      r0,sp,#0x3fc
0003ba  3084              ADDS     r0,r0,#0x84
0003bc  f7fffffe          BL       __aeabi_memcpy4
;;;341                                      0x12770D85,0xE3D26C38,0x8FCE0B06,0xB72A0856,0xD4E03E1D,0x7CDCE5F8,0xBE9D9EF9,0x37A08D7E,\
;;;342                                      0xD6B2A91D,0x6AC24A37,0x75148F1E,0xE17C16D7,0x58ECF7EC,0xEC314434,0xDADD6918,0x15EA58F7,\
;;;343                                      0x486EFCD2,0xB4086CBE,0x5AC73B16,0x7C5004BB,0xD6FD635A,0x5A1D069D,0x221A3DFC,0x0B992529};
;;;344    
;;;345        const INT32U std_RSA2048_d[64] = {0x7C72B121,0xA45321BB,0xDEA75557,0x41854F44,0x4D12AC87,0x66AC701B,0x0FC0A4AF,0x4A515F7F,\
0003c0  22ff              MOVS     r2,#0xff
0003c2  3201              ADDS     r2,#1
0003c4  4920              LDR      r1,|L1.1096|
0003c6  3180              ADDS     r1,r1,#0x80
0003c8  a8e0              ADD      r0,sp,#0x380
0003ca  f7fffffe          BL       __aeabi_memcpy4
;;;346                                      0x330A4F2F,0x720AFD8B,0x469564B1,0x7A1949C3,0xC5389DFD,0xE550A2B8,0x9C9BCC1C,0x7648F659,\
;;;347                                      0xDDC194C3,0x96FF7AC6,0xCE633687,0x478184A0,0xBD5ED586,0xFE11FA9E,0x8538E88D,0x3541A8B1,\
;;;348                                      0x7A7DCC82,0x8541DC1D,0xEB2B031A,0x02C5961C,0x39D1D2D1,0x24FF0054,0xCE114F2B,0xD5CA3EB8,\
;;;349                                      0x597B256A,0x1811BB6C,0x91ABB345,0x3E204285,0xF9F0CD1F,0x1D1BEA48,0xD488F902,0x1EF2C5DC,\
;;;350                                      0xC563BB73,0xE57163E8,0x56C59731,0xBE0E8100,0x6A9D9DD7,0x5764E34A,0xBD2EBE74,0x4A85799D,\
;;;351                                      0xEF2BBD2C,0xEE5BA2FB,0xD5278831,0x7ECF0D63,0x4710EA32,0xB61AC97A,0xBBA15B58,0x7CCFCE52,\
;;;352                                      0x80C45C75,0x97A7FDB4,0x306A7319,0x737C32F3,0xFAC8B41E,0x4D21D77A,0x79D5D429,0x0049E881};
;;;353        
;;;354        const INT32U std_RSA2048_n[64] = {0x832D6489,0x43950DFB,0x9459E42B,0x31F7943A,0xB2FEFF71,0xC806FA64,0xE692E2E4,0xCCE6CBEB,\
0003ce  22ff              MOVS     r2,#0xff
0003d0  3201              ADDS     r2,#1
0003d2  491e              LDR      r1,|L1.1100|
0003d4  a8a0              ADD      r0,sp,#0x280
0003d6  f7fffffe          BL       __aeabi_memcpy4
;;;355                                      0xD5CB659A,0xB561C85D,0xDC6B8B35,0x88A19545,0xD9027CDF,0xFBF9B138,0xFC7F6DB7,0xBB9B813E,\
;;;356                                      0xABEA847A,0x779F9811,0xCAC0F430,0x6DDB1577,0x1246829E,0xB97A1477,0x30AD83D5,0xFA1749B1,\
;;;357                                      0xA8A67895,0x73EB4537,0x8534C83D,0xFBA4620D,0x1E26E982,0xB4D87312,0x95614FD6,0x51BD39D8,\
;;;358                                      0x66C5FB03,0xFDF39C7A,0x48C6DF18,0x850A9375,0x16B9B913,0x217ACA84,0xF9E36874,0xEC64CBD6,\
;;;359                                      0xFE71810C,0xF34F37C8,0x4AD7452D,0xAB0A396B,0x9FD6B301,0xDE1B73F7,0x19F3D69D,0x483E5F3B,\
;;;360                                      0xFFB5D9F8,0xF5C4A723,0x75D57185,0x117947AE,0xAD1AF2CF,0x953BF175,0x88D06678,0x3F5D33B1,\
;;;361                                      0x51C00DD3,0x116506D1,0x8EE8786E,0xF2227676,0x1D298184,0x6E4548A9,0xBE379434,0x26A90AD9};
;;;362    
;;;363        const INT32U std_RSA2048_pdata[64] = {0x008CDF2F,0xD5CE12ED,0xDB4078CD,0x442D7BA2,0x6525BF95,0x98AD0275,0x3C36474D,0xFE4C333C,\
0003da  22ff              MOVS     r2,#0xff
0003dc  3201              ADDS     r2,#1
0003de  491c              LDR      r1,|L1.1104|
0003e0  a860              ADD      r0,sp,#0x180
0003e2  f7fffffe          BL       __aeabi_memcpy4
;;;364                                          0x5710B781,0x56E8EFD6,0xA0754AFF,0xB5C6ECA2,0x75CB5059,0xE20C3206,0x279AAC66,0xD9469FEA,\
;;;365                                          0x7E1254C2,0x4CE5633A,0x3283D449,0x1DBB8567,0x74E2CBA0,0xE4815CE7,0x634B6DAC,0x6F5217B0,\
;;;366                                          0x977AFF19,0x3D2D36C1,0x9A505ED4,0x02760F9A,0x6A547891,0x27754ABF,0xF82FD146,0x47D66439,\
;;;367                                          0xAC2F00AE,0xB3283015,0xDFC630C8,0xEF5E51E2,0x5F089F55,0x3251C237,0xEF30225D,0xEA3B4E2B,\
;;;368                                          0xC41B9FAA,0x353E18DB,0x09CB914C,0x69DB15E8,0x5CE68813,0x8D7B8DF7,0x4F35A618,0xDEEA9D2F,\
;;;369                                          0xE8252435,0x4CD7B8BE,0x2149CB88,0xFA552154,0x68D67BF4,0xC15D73A6,0x2025A7A0,0xAD4A19EC,\
;;;370                                          0x1F35D676,0x7E5BD664,0x2E2724A5,0x29343ECD,0x8CC0BF20,0x555E3BEC,0x6BEA6B1C,0xDEC28A0B};
;;;371      
;;;372        const INT32U std_RSA2048_cdata[64] = {0x72339510,0xB2C145BD,0xE348FFB9,0x855A43E4,0x53F2F12A,0xFCF638E2,0xBC13646F,0x3CABDA96,\
0003e6  22ff              MOVS     r2,#0xff
0003e8  3201              ADDS     r2,#1
0003ea  491a              LDR      r1,|L1.1108|
0003ec  a820              ADD      r0,sp,#0x80
0003ee  f7fffffe          BL       __aeabi_memcpy4
;;;373                                          0x5D04D100,0x1F579A39,0x0370A84F,0xFEC7ECCB,0x5289AF9C,0x78EB1C16,0x1006C1DD,0x3DB851B9,\
;;;374                                          0x9534B555,0x6EE0D93D,0x9C9E63B5,0xAC3FA3C2,0x23EAC0ED,0x79F28D17,0xAF3B8C70,0x1DB25DAA,\
;;;375                                          0x06AD55BC,0x03B61B64,0x5F46F7E6,0xEBF27467,0x7A7272D7,0xEB3F3605,0x2DE17B0C,0x17B4F0F3,\
;;;376                                          0xDF98977B,0x80C266A6,0x7098BC09,0x40AA1049,0x42EEF868,0x98533498,0xC8C18B8B,0x40939CB3,\
;;;377                                          0x53177411,0x59B95A4B,0xF183EE37,0x9F2268A5,0x9B286AA9,0x7EE3CDC3,0xBCB5CF84,0x099AB05A,\
;;;378                                          0x79AD814E,0x89AA90A3,0x4785A19A,0x9301CA79,0xC2315726,0x307E16EB,0xBA08BC6C,0x393034C9,\
;;;379                                          0x696B24FF,0xA128ADA0,0xE3852B15,0x0F7AF55A,0x96898D95,0xAEF6BF28,0x5C80C969,0x58FE6DC1};
;;;380        
;;;381        const INT32U std_RSA1024_pdata[32] = {0x00F6D766,0x9237C2E4,0xA2A6D2DD,0x7B12E9BD,0xA66B8E01,0x802F914A,0xF426EEB0,0x8A4FF458,\
0003f2  2280              MOVS     r2,#0x80
0003f4  4918              LDR      r1,|L1.1112|
0003f6  4668              MOV      r0,sp
0003f8  f7fffffe          BL       __aeabi_memcpy4
;;;382                                          0xA11AA749,0xF8D7627B,0x746FC131,0x1D52BD89,0x69B01952,0xBDECFD1D,0x314EE197,0x93F7AD16,\
;;;383                                          0xAF1B1F71,0xCE6A6C15,0x7DCF2A55,0x905D6D02,0x6686313C,0x6D8FF887,0xE940B321,0xF2E0E693,\
;;;384                                          0xBC610887,0x1CD728D9,0x472ED6F1,0xDC1D414F,0x25569D67,0x9900C8B0,0xA6662CF8,0xAEF1E7FA};
;;;385    
;;;386        RSA_Param = &RSA_ParamVar;
0003fc  4c17              LDR      r4,|L1.1116|
0003fe  e02f              B        |L1.1120|
                  |L1.1024|
                          DCD      ||.constdata||+0x60
                  |L1.1028|
                          DCD      ||.constdata||+0x178
                  |L1.1032|
                          DCD      G_output
                  |L1.1036|
                          DCD      0x00006f01
                  |L1.1040|
                          DCD      SW1SW2
                  |L1.1044|
                          DCD      ||.constdata||+0x95c
                  |L1.1048|
000418  31323334          DCB      "123456789",17,"""3D",0
00041c  35363738
000420  39112233
000424  4400    
000426  00                DCB      0
000427  00                DCB      0
                  |L1.1064|
                          DCD      0x50007200
                  |L1.1068|
                          DCD      0x00006363
                  |L1.1072|
                          DCD      0x00008aa0
                  |L1.1076|
                          DCD      0x0000ffff
                  |L1.1080|
                          DCD      0x00002152
                  |L1.1084|
                          DCD      0x00003a2f
                  |L1.1088|
                          DCD      0xfffff1ac
                  |L1.1092|
                          DCD      0x00000580
                  |L1.1096|
                          DCD      ||.constdata||+0x29c
                  |L1.1100|
                          DCD      ||.constdata||+0x41c
                  |L1.1104|
                          DCD      ||.constdata||+0x51c
                  |L1.1108|
                          DCD      ||.constdata||+0x61c
                  |L1.1112|
                          DCD      ||.constdata||+0x71c
                  |L1.1116|
                          DCD      0x00000584
                  |L1.1120|
000460  446c              ADD      r4,r4,sp
;;;387        
;;;388        RSA_Param->pE = Demo_RSA_e;
000462  48f9              LDR      r0,|L1.2120|
000464  4468              ADD      r0,r0,sp
000466  6020              STR      r0,[r4,#0]
;;;389        RSA_Param->pN = Demo_RSA_n;
000468  38ff              SUBS     r0,r0,#0xff
00046a  3801              SUBS     r0,#1
00046c  6060              STR      r0,[r4,#4]
;;;390        RSA_Param->pP = Demo_RSA_p;
00046e  3880              SUBS     r0,r0,#0x80
000470  60a0              STR      r0,[r4,#8]
;;;391        RSA_Param->pQ = Demo_RSA_q;
000472  3880              SUBS     r0,r0,#0x80
000474  60e0              STR      r0,[r4,#0xc]
;;;392        RSA_Param->pDp = Demo_RSA_dp;
000476  3880              SUBS     r0,r0,#0x80
000478  6120              STR      r0,[r4,#0x10]
;;;393        RSA_Param->pDq = Demo_RSA_dq;
00047a  3880              SUBS     r0,r0,#0x80
00047c  6160              STR      r0,[r4,#0x14]
;;;394        RSA_Param->pQInv = Demo_RSA_qInv;
00047e  3880              SUBS     r0,r0,#0x80
000480  61a0              STR      r0,[r4,#0x18]
;;;395        RSA_Param->pD = Demo_RSA_d;
000482  38ff              SUBS     r0,r0,#0xff
000484  3801              SUBS     r0,#1
000486  61e0              STR      r0,[r4,#0x1c]
;;;396        RSA_Param->pPreKey = Demo_RSA_preKey;
000488  48f0              LDR      r0,|L1.2124|
00048a  4468              ADD      r0,r0,sp
00048c  6220              STR      r0,[r4,#0x20]
;;;397        RSA_Param->pDataIn = Demo_RSA_iData;
00048e  38ff              SUBS     r0,r0,#0xff
000490  3801              SUBS     r0,#1
000492  6260              STR      r0,[r4,#0x24]
;;;398        RSA_Param->pDataOut = Demo_RSA_oData;                                      
000494  38ff              SUBS     r0,r0,#0xff
000496  3801              SUBS     r0,#1
000498  62a0              STR      r0,[r4,#0x28]
;;;399        /*************************************************/    
;;;400        /*1. Known p q e run 2048 RSA */
;;;401        //1-1. load p,q,e. 
;;;402        memcpy(Demo_RSA_e,std_RSA_e,sizeof(std_RSA_e));
00049a  3838              SUBS     r0,r0,#0x38
00049c  6801              LDR      r1,[r0,#0]
00049e  48ec              LDR      r0,|L1.2128|
0004a0  4468              ADD      r0,r0,sp
0004a2  6501              STR      r1,[r0,#0x50]
;;;403        memcpy(Demo_RSA_p,std_RSA2048_p,sizeof(std_RSA2048_p));
0004a4  2280              MOVS     r2,#0x80
0004a6  4621              MOV      r1,r4
0004a8  3984              SUBS     r1,r1,#0x84
0004aa  38ff              SUBS     r0,r0,#0xff
0004ac  3831              SUBS     r0,r0,#0x31
0004ae  f7fffffe          BL       __aeabi_memcpy4
;;;404        memcpy(Demo_RSA_q, std_RSA2048_q, sizeof(std_RSA2048_q));     
0004b2  2280              MOVS     r2,#0x80
0004b4  a9ff              ADD      r1,sp,#0x3fc
0004b6  3184              ADDS     r1,r1,#0x84
0004b8  48e6              LDR      r0,|L1.2132|
0004ba  4468              ADD      r0,r0,sp
0004bc  f7fffffe          BL       __aeabi_memcpy4
;;;405       
;;;406        //1-2.  run HED_RSA_Complete  
;;;407        RSA_Param->operMode = 0x00;
0004c0  2100              MOVS     r1,#0
0004c2  62e1              STR      r1,[r4,#0x2c]
;;;408        RSA_Param->len = 64;
0004c4  2140              MOVS     r1,#0x40
0004c6  6321              STR      r1,[r4,#0x30]
;;;409        ret = HED_RSA2048_Complete(RSA_Param);//generate 2048 bits key
0004c8  4620              MOV      r0,r4
0004ca  f7fffffe          BL       HED_RSA2048_Complete
0004ce  b2c5              UXTB     r5,r0
;;;410        if (ret != 0)
0004d0  2d00              CMP      r5,#0
0004d2  d007              BEQ      |L1.1252|
;;;411        {
;;;412            SW1SW2 = 0x6F00;
0004d4  206f              MOVS     r0,#0x6f
0004d6  0200              LSLS     r0,r0,#8
0004d8  49df              LDR      r1,|L1.2136|
0004da  8008              STRH     r0,[r1,#0]
                  |L1.1244|
;;;413            return;
;;;414        } 
;;;415        //1-3.  check output n\d is correct with std data
;;;416        if (memcmp(Demo_RSA_n, std_RSA2048_n, sizeof(std_RSA2048_n)) != 0)
;;;417        {
;;;418            SW1SW2 = 0x6F01;
;;;419            return;
;;;420        }
;;;421        
;;;422        if (memcmp(Demo_RSA_d, std_RSA2048_d, sizeof(std_RSA2048_d)) != 0)
;;;423        {
;;;424            SW1SW2 = 0x6F02;
;;;425            return;
;;;426        }     
;;;427        
;;;428        //1-4.  run HED_RSA_PriOpt(CRT), and check oData with std_cData
;;;429        memcpy(Demo_RSA_iData, std_RSA2048_pdata, sizeof(std_RSA2048_pdata));
;;;430        
;;;431        // Input e/n/preKey have generated by HED_RSA_Complete
;;;432        RSA_Param->len = 64;
;;;433        ret = HED_RSA2048_PriOpt(RSA_Param);
;;;434        if (ret != 0)
;;;435        {
;;;436            SW1SW2 = 0x6F03;
;;;437            return;
;;;438        }
;;;439    
;;;440        if (memcmp(Demo_RSA_oData, std_RSA2048_cdata, sizeof(std_RSA2048_cdata)) != 0)
;;;441        {
;;;442            SW1SW2 = 0x6F04;
;;;443            return;
;;;444        }  
;;;445        
;;;446        //1-5.  run HED_RSA_PubOpt , and check oData with std_pData
;;;447        memcpy(Demo_RSA_iData, std_RSA2048_cdata, sizeof(std_RSA2048_cdata));
;;;448        
;;;449        // Input such as e/n/d/dp etc. have generated by HED_RSA_Complete  
;;;450        RSA_Param->len = 64;
;;;451        ret = HED_RSA2048_PubOpt(RSA_Param);
;;;452        if (ret != 0)
;;;453        {
;;;454            SW1SW2 = 0x6F05;
;;;455            return;
;;;456        }
;;;457        
;;;458        if (memcmp(Demo_RSA_oData, std_RSA2048_pdata, sizeof(std_RSA2048_pdata)) != 0)
;;;459        {
;;;460            SW1SW2 = 0x6F06;
;;;461            return;
;;;462        }
;;;463            
;;;464        /*2. only Known e,run 1024 RSA */
;;;465        //2-1. load e.  RSA1024 buffer length is half of RSA2048, such as Demo_RSA_n[32]
;;;466        memcpy(Demo_RSA_e, std_RSA_e, sizeof(std_RSA_e));
;;;467        
;;;468        //2-2. run HED_RSA2048_GenKey, genearte key and other para
;;;469        RSA_Param->operMode = 0x00;
;;;470        RSA_Param->len = 32;
;;;471        HED_RSA2048_GenKey(RSA_Param); 
;;;472        
;;;473        //2-3. run HED_RSA2048_PubOpt
;;;474        memcpy(Demo_RSA_iData, std_RSA1024_pdata, sizeof(std_RSA1024_pdata));    
;;;475        // Input e/n/preKey have generated by HED_RSA_GenKey. you may load it by youself with your data 
;;;476        RSA_Param->len = 32;
;;;477        ret = HED_RSA2048_PubOpt(RSA_Param);
;;;478        if (ret != 0)
;;;479        {
;;;480            SW1SW2 = 0x6F07;
;;;481            return;
;;;482        }
;;;483        
;;;484        //2-4. run HED_RSA2048_PriOpt (CRT),  and check oData with std_pData
;;;485        // Input such as e/n/d/dp etc. have generated by HED_RSA2048_GenKey
;;;486        memcpy(Demo_RSA_iData, Demo_RSA_oData, sizeof(std_RSA1024_pdata));
;;;487        RSA_Param->len = 32;
;;;488        ret = HED_RSA2048_PriOpt(RSA_Param);
;;;489        if (ret != 0)
;;;490        {
;;;491            SW1SW2 = 0x6F08;
;;;492            return;
;;;493        }
;;;494    
;;;495        if (memcmp(Demo_RSA_oData, std_RSA1024_pdata, sizeof(std_RSA1024_pdata)) != 0)
;;;496        {
;;;497            SW1SW2 = 0x6F09;
;;;498            return;
;;;499        }
;;;500            
;;;501        SW1SW2 = 0x9000;
;;;502    }
0004dc  4bda              LDR      r3,|L1.2120|
0004de  1d1b              ADDS     r3,r3,#4
0004e0  449d              ADD      sp,sp,r3
0004e2  bd30              POP      {r4,r5,pc}
                  |L1.1252|
0004e4  22ff              MOVS     r2,#0xff              ;416
0004e6  3201              ADDS     r2,#1                 ;416
0004e8  a9a0              ADD      r1,sp,#0x280          ;416
0004ea  48dc              LDR      r0,|L1.2140|
0004ec  4468              ADD      r0,r0,sp              ;416
0004ee  f7fffffe          BL       memcmp
0004f2  2800              CMP      r0,#0                 ;416
0004f4  d003              BEQ      |L1.1278|
0004f6  48da              LDR      r0,|L1.2144|
0004f8  49d7              LDR      r1,|L1.2136|
0004fa  8008              STRH     r0,[r1,#0]            ;418
0004fc  e7ee              B        |L1.1244|
                  |L1.1278|
0004fe  22ff              MOVS     r2,#0xff              ;422
000500  3201              ADDS     r2,#1                 ;422
000502  a9e0              ADD      r1,sp,#0x380          ;422
000504  48d7              LDR      r0,|L1.2148|
000506  4468              ADD      r0,r0,sp              ;422
000508  f7fffffe          BL       memcmp
00050c  2800              CMP      r0,#0                 ;422
00050e  d004              BEQ      |L1.1306|
000510  48d3              LDR      r0,|L1.2144|
000512  1c40              ADDS     r0,r0,#1              ;424
000514  49d0              LDR      r1,|L1.2136|
000516  8008              STRH     r0,[r1,#0]            ;424
000518  e7e0              B        |L1.1244|
                  |L1.1306|
00051a  22ff              MOVS     r2,#0xff              ;429
00051c  3201              ADDS     r2,#1                 ;429
00051e  a960              ADD      r1,sp,#0x180          ;429
000520  48d1              LDR      r0,|L1.2152|
000522  4468              ADD      r0,r0,sp              ;429
000524  f7fffffe          BL       __aeabi_memcpy4
000528  2040              MOVS     r0,#0x40              ;432
00052a  6320              STR      r0,[r4,#0x30]         ;432
00052c  4620              MOV      r0,r4                 ;433
00052e  f7fffffe          BL       HED_RSA2048_PriOpt
000532  b2c5              UXTB     r5,r0                 ;433
000534  2d00              CMP      r5,#0                 ;434
000536  d004              BEQ      |L1.1346|
000538  48c9              LDR      r0,|L1.2144|
00053a  1c80              ADDS     r0,r0,#2              ;436
00053c  49c6              LDR      r1,|L1.2136|
00053e  8008              STRH     r0,[r1,#0]            ;436
000540  e7cc              B        |L1.1244|
                  |L1.1346|
000542  22ff              MOVS     r2,#0xff              ;440
000544  3201              ADDS     r2,#1                 ;440
000546  a920              ADD      r1,sp,#0x80           ;440
000548  48c8              LDR      r0,|L1.2156|
00054a  4468              ADD      r0,r0,sp              ;440
00054c  f7fffffe          BL       memcmp
000550  2800              CMP      r0,#0                 ;440
000552  d004              BEQ      |L1.1374|
000554  48c2              LDR      r0,|L1.2144|
000556  1cc0              ADDS     r0,r0,#3              ;442
000558  49bf              LDR      r1,|L1.2136|
00055a  8008              STRH     r0,[r1,#0]            ;442
00055c  e7be              B        |L1.1244|
                  |L1.1374|
00055e  22ff              MOVS     r2,#0xff              ;447
000560  3201              ADDS     r2,#1                 ;447
000562  a920              ADD      r1,sp,#0x80           ;447
000564  48c0              LDR      r0,|L1.2152|
000566  4468              ADD      r0,r0,sp              ;447
000568  f7fffffe          BL       __aeabi_memcpy4
00056c  2040              MOVS     r0,#0x40              ;450
00056e  6320              STR      r0,[r4,#0x30]         ;450
000570  4620              MOV      r0,r4                 ;451
000572  f7fffffe          BL       HED_RSA2048_PubOpt
000576  b2c5              UXTB     r5,r0                 ;451
000578  2d00              CMP      r5,#0                 ;452
00057a  d004              BEQ      |L1.1414|
00057c  48b8              LDR      r0,|L1.2144|
00057e  1d00              ADDS     r0,r0,#4              ;454
000580  49b5              LDR      r1,|L1.2136|
000582  8008              STRH     r0,[r1,#0]            ;454
000584  e7aa              B        |L1.1244|
                  |L1.1414|
000586  22ff              MOVS     r2,#0xff              ;458
000588  3201              ADDS     r2,#1                 ;458
00058a  a960              ADD      r1,sp,#0x180          ;458
00058c  48b7              LDR      r0,|L1.2156|
00058e  4468              ADD      r0,r0,sp              ;458
000590  f7fffffe          BL       memcmp
000594  2800              CMP      r0,#0                 ;458
000596  d004              BEQ      |L1.1442|
000598  48b1              LDR      r0,|L1.2144|
00059a  1d40              ADDS     r0,r0,#5              ;460
00059c  49ae              LDR      r1,|L1.2136|
00059e  8008              STRH     r0,[r1,#0]            ;460
0005a0  e79c              B        |L1.1244|
                  |L1.1442|
0005a2  48b3              LDR      r0,|L1.2160|
0005a4  4468              ADD      r0,r0,sp              ;466
0005a6  6801              LDR      r1,[r0,#0]            ;466
0005a8  48a9              LDR      r0,|L1.2128|
0005aa  4468              ADD      r0,r0,sp              ;466
0005ac  6501              STR      r1,[r0,#0x50]         ;466
0005ae  2100              MOVS     r1,#0                 ;469
0005b0  62e1              STR      r1,[r4,#0x2c]         ;469
0005b2  2120              MOVS     r1,#0x20              ;470
0005b4  6321              STR      r1,[r4,#0x30]         ;470
0005b6  4620              MOV      r0,r4                 ;471
0005b8  f7fffffe          BL       HED_RSA2048_GenKey
0005bc  2280              MOVS     r2,#0x80              ;474
0005be  4669              MOV      r1,sp                 ;474
0005c0  48a9              LDR      r0,|L1.2152|
0005c2  4468              ADD      r0,r0,sp              ;474
0005c4  f7fffffe          BL       __aeabi_memcpy4
0005c8  2120              MOVS     r1,#0x20              ;476
0005ca  6321              STR      r1,[r4,#0x30]         ;476
0005cc  4620              MOV      r0,r4                 ;477
0005ce  f7fffffe          BL       HED_RSA2048_PubOpt
0005d2  b2c5              UXTB     r5,r0                 ;477
0005d4  2d00              CMP      r5,#0                 ;478
0005d6  d004              BEQ      |L1.1506|
0005d8  48a1              LDR      r0,|L1.2144|
0005da  1d80              ADDS     r0,r0,#6              ;480
0005dc  499e              LDR      r1,|L1.2136|
0005de  8008              STRH     r0,[r1,#0]            ;480
0005e0  e77c              B        |L1.1244|
                  |L1.1506|
0005e2  2280              MOVS     r2,#0x80              ;486
0005e4  49a1              LDR      r1,|L1.2156|
0005e6  4469              ADD      r1,r1,sp              ;486
0005e8  1dc8              ADDS     r0,r1,#7              ;486
0005ea  30f9              ADDS     r0,r0,#0xf9           ;486
0005ec  f7fffffe          BL       __aeabi_memcpy4
0005f0  2020              MOVS     r0,#0x20              ;487
0005f2  6320              STR      r0,[r4,#0x30]         ;487
0005f4  4620              MOV      r0,r4                 ;488
0005f6  f7fffffe          BL       HED_RSA2048_PriOpt
0005fa  b2c5              UXTB     r5,r0                 ;488
0005fc  2d00              CMP      r5,#0                 ;489
0005fe  d004              BEQ      |L1.1546|
000600  4897              LDR      r0,|L1.2144|
000602  1dc0              ADDS     r0,r0,#7              ;491
000604  4994              LDR      r1,|L1.2136|
000606  8008              STRH     r0,[r1,#0]            ;491
000608  e768              B        |L1.1244|
                  |L1.1546|
00060a  2280              MOVS     r2,#0x80              ;495
00060c  4669              MOV      r1,sp                 ;495
00060e  4897              LDR      r0,|L1.2156|
000610  4468              ADD      r0,r0,sp              ;495
000612  f7fffffe          BL       memcmp
000616  2800              CMP      r0,#0                 ;495
000618  d004              BEQ      |L1.1572|
00061a  4891              LDR      r0,|L1.2144|
00061c  3008              ADDS     r0,r0,#8              ;497
00061e  498e              LDR      r1,|L1.2136|
000620  8008              STRH     r0,[r1,#0]            ;497
000622  e75b              B        |L1.1244|
                  |L1.1572|
000624  2009              MOVS     r0,#9                 ;501
000626  0300              LSLS     r0,r0,#12             ;501
000628  498b              LDR      r1,|L1.2136|
00062a  8008              STRH     r0,[r1,#0]            ;501
00062c  bf00              NOP      
00062e  e755              B        |L1.1244|
;;;503    /************************************************* 
                          ENDP

                  cmd_SM2_ALG PROC
;;;510    *************************************************/
;;;511    void cmd_SM2_ALG(void)
000630  b570              PUSH     {r4-r6,lr}
;;;512    {
000632  4b90              LDR      r3,|L1.2164|
000634  449d              ADD      sp,sp,r3
;;;513        INT8U ret;
;;;514        
;;;515        /* user should built all SM2 buffers according with SM2_Parameters*/
;;;516    __align(4) INT8U  Demo_SM2_iData[512];       //idata & odata size may be 1~65535
;;;517    __align(4) INT8U  Demo_SM2_oData[256];
;;;518        INT32U Demo_SM2_RNGData[8];
;;;519        INT32U Demo_SM2_priKey[8];
;;;520        INT32U Demo_SM2_pubKey[16];
;;;521        
;;;522        SM2_Parameters * SM2_Param;
;;;523        SM2_Parameters  SM2_ParamVar;
;;;524        
;;;525        SM2KeyExch_Parameters * SM2KeyExch_Param;
;;;526        SM2KeyExch_Parameters SM2KeyExch_ParamVar;
;;;527    
;;;528        /************************************************* 
;;;529            SM2 standard data(bigEndian)
;;;530        *************************************************/
;;;531        const INT8U std_SM2_Prikey_d[32] = {0x9E,0x1F,0x3B,0x25,0x12,0x38,0x45,0x09,0x76,0x7D,0x7A,0x5A,0x5D,0x03,0x70,0x1F,0x26,0xA6,0x42,0x8B,0x66,0xBB,0x64,0x43,0x4D,0xC8,0x07,0x4D,0x2D,0x12,0x39,0xB3};
000636  2220              MOVS     r2,#0x20
000638  a18f              ADR      r1,|L1.2168|
00063a  a8d3              ADD      r0,sp,#0x34c
00063c  f7fffffe          BL       __aeabi_memcpy4
;;;532        const INT8U std_SM2_Pubkey[64] = {0xA8,0x8B,0xCD,0xF9,0x81,0x22,0x60,0x8F,0x18,0xB0,0x0E,0xB0,0x3A,0x41,0x0C,0xA1,0xCD,0x6D,0x7E,0x41,0x24,0x83,0x2F,0x4B,0xC6,0x63,0x86,0x1C,0x45,0xFE,0x5D,0x31,\
000640  2240              MOVS     r2,#0x40
000642  a195              ADR      r1,|L1.2200|
000644  a8c3              ADD      r0,sp,#0x30c
000646  f7fffffe          BL       __aeabi_memcpy4
;;;533                                    0x90,0xBE,0xE3,0x75,0x9C,0x25,0xA2,0x99,0xEF,0x39,0x7C,0x87,0xF6,0x9A,0x42,0x1C,0xE0,0xD9,0x32,0x5F,0x36,0xFC,0x0F,0x4F,0xA0,0x02,0x7B,0x30,0x12,0xF8,0xAB,0xA0};
;;;534        const INT8U std_SM2_pData[32] = {0x96,0x04,0xFC,0xBB,0x3C,0x6E,0xE8,0xB9,0x38,0xD7,0xD4,0xC2,0xF8,0x46,0xBC,0xB1,0x7C,0x0A,0xC0,0xF3,0x0A,0xA1,0x79,0x8E,0x23,0xD8,0x8D,0x62,0xB5,0x34,0x81,0xAF};
00064a  2220              MOVS     r2,#0x20
00064c  a1a2              ADR      r1,|L1.2264|
00064e  a8bb              ADD      r0,sp,#0x2ec
000650  f7fffffe          BL       __aeabi_memcpy4
;;;535        const INT8U std_SM2_cData[128] = {0x4E,0xB7,0x39,0x93,0x6B,0x12,0x5D,0x38,0xED,0xC9,0x6B,0xEC,0x94,0x03,0x3E,0x70,0x78,0x74,0x84,0xD4,0x55,0x9A,0xF8,0xB7,0x22,0x80,0x13,0xE4,0x99,0x69,0x1F,0x83,\
000654  2280              MOVS     r2,#0x80
000656  49a8              LDR      r1,|L1.2296|
000658  a89b              ADD      r0,sp,#0x26c
00065a  f7fffffe          BL       __aeabi_memcpy4
;;;536                                      0x9C,0x75,0xD0,0x04,0x35,0x05,0xBA,0x10,0x0E,0xD5,0x18,0x32,0x8C,0x67,0xAC,0x13,0x74,0x0C,0x8D,0x44,0xA1,0x42,0xA6,0x81,0x4A,0x22,0x4F,0x1A,0x20,0x92,0x4B,0x25,\
;;;537                                      0xCB,0xFA,0xE9,0x58,0x88,0x7F,0x99,0xB3,0xA9,0x82,0xB3,0x46,0x92,0xBB,0x62,0xAB,0x4D,0x91,0x64,0xFA,0xE8,0x13,0xC4,0xA1,0xA2,0x9F,0x88,0x7E,0x1A,0x42,0x2C,0xD9,\
;;;538                                      0x5C,0xE9,0x46,0xBE,0xF4,0x5B,0x0A,0x62,0x6C,0xEE,0xEB,0x46,0xF0,0x10,0x79,0xA2,0x8A,0x67,0xDC,0xAF,0x3F,0xE6,0x0F,0x4B,0x7D,0x94,0x5F,0x36,0x82,0x69,0x48,0x99};
;;;539        
;;;540        const INT8U std_SM2_signingData[32] = {0xAF,0x81,0x34,0xB5,0x62,0x8D,0xD8,0x23,0x8E,0x79,0xA1,0x0A,0xF3,0xC0,0x0A,0x7C,0xB1,0xBC,0x46,0xF8,0xC2,0xD4,0xD7,0x38,0xB9,0xE8,0x6E,0x3C,0xBB,0xFC,0x04,0x96};
00065e  2220              MOVS     r2,#0x20
000660  a1a6              ADR      r1,|L1.2300|
000662  a893              ADD      r0,sp,#0x24c
000664  f7fffffe          BL       __aeabi_memcpy4
;;;541        const INT8U std_SM2_signingResult[64] = {0xB7,0xB2,0x7C,0x1B,0x46,0xD6,0x20,0x0F,0x03,0xEF,0x84,0xD6,0x23,0x69,0x13,0xAA,0x5D,0x77,0x65,0x9A,0x04,0x54,0x6C,0xC5,0xBF,0x71,0x6C,0x15,0x46,0xB9,0xF3,0x2A,\
000668  2240              MOVS     r2,#0x40
00066a  a1ac              ADR      r1,|L1.2332|
00066c  a883              ADD      r0,sp,#0x20c
00066e  f7fffffe          BL       __aeabi_memcpy4
;;;542                                             0x08,0x1B,0x5E,0x29,0x29,0x27,0xA8,0xFF,0x53,0x8C,0xC1,0x1B,0xED,0xAD,0x0C,0xE0,0x3D,0xA3,0x0C,0x55,0xBA,0x20,0xF8,0xD3,0x36,0xB6,0xD4,0x74,0xDB,0xC8,0x49,0x05}; 
;;;543        const INT8U std_SM2_GetZ_AID[4] = {0x03,0x36,0x36,0x93};//LV,length + value 
000672  a0ba              ADR      r0,|L1.2396|
000674  6801              LDR      r1,[r0,#0]
000676  9182              STR      r1,[sp,#0x208]
;;;544        const INT8U std_SM2_GetZ_Result[32] = {0xF8,0x2A,0xFE,0xF5,0xBC,0x77,0x00,0xE1,0xE6,0x58,0xFD,0xE9,0x0A,0x59,0xF1,0x31,0xA8,0x1B,0x68,0x19,0x24,0x8D,0x63,0x7E,0x8B,0x79,0xED,0x91,0x8C,0xCC,0x7E,0x6F};  
000678  2220              MOVS     r2,#0x20
00067a  a1b9              ADR      r1,|L1.2400|
00067c  a87a              ADD      r0,sp,#0x1e8
00067e  f7fffffe          BL       __aeabi_memcpy4
;;;545        
;;;546        const INT8U std_SM2_AID[33] = {0x20,0x19,0xAD,0x86,0xDF,0x1B,0xD6,0x7F,0x11,0x66,0x7B,0x90,0x42,0x59,0xCD,0x8D,0xFB,0x81,0xEB,0xA6,0xFC,0x05,0xC5,0x70,0x39,0x4D,0x32,0x35,0x14,0xF3,0x4F,0x7B,0xDC};//LV,length + value 
000682  2224              MOVS     r2,#0x24
000684  a1be              ADR      r1,|L1.2432|
000686  a871              ADD      r0,sp,#0x1c4
000688  f7fffffe          BL       __aeabi_memcpy4
;;;547        const INT32U std_SM2_APrikey_d[8] = {0x5F16CC28,0x2485FF80,0x8D84203A,0xFCDC5C44,0x1B5F8436,0x335A7DE6,0xFC737F5E,0x33FD299D};   
00068c  2220              MOVS     r2,#0x20
00068e  49c5              LDR      r1,|L1.2468|
000690  a869              ADD      r0,sp,#0x1a4
000692  f7fffffe          BL       __aeabi_memcpy4
;;;548        const INT32U std_SM2_APubkey[16] = {0x90F219EA,0x8B32DC5B,0x2CE29B4F,0x646AB492,0xAC4F5B3D,0x010C260B,0x777B7A3B,0x2ED8FFA7,\
000696  2240              MOVS     r2,#0x40
000698  49c2              LDR      r1,|L1.2468|
00069a  3120              ADDS     r1,r1,#0x20
00069c  a859              ADD      r0,sp,#0x164
00069e  f7fffffe          BL       __aeabi_memcpy4
;;;549                                          0x3B21C0B9,0x9734587E,0xFC86057E,0xA449EE21,0xB310BF0A,0x2AB9E48A,0x0D23075D,0xD49DD902}; 
;;;550        const INT32U std_SM2_ATempPrikey_d[8] = {0x1E817CE5,0x8B83B134,0xB2BFE0E8,0x410EA39E,0x7ECF6073,0x4E531AB1,0xFA5F81CE,0xB587F5D8};   
0006a2  2220              MOVS     r2,#0x20
0006a4  49bf              LDR      r1,|L1.2468|
0006a6  3160              ADDS     r1,r1,#0x60
0006a8  a851              ADD      r0,sp,#0x144
0006aa  f7fffffe          BL       __aeabi_memcpy4
;;;551        const INT32U std_SM2_ATempPubkey[16] = {0x5B692DAF,0xD36B8A74,0xE3C7326C,0xCC0B1E2A,0xB0D60025,0x1A5BF0FB,0x383A5A70,0x0A7BC9C4,\
0006ae  2240              MOVS     r2,#0x40
0006b0  49bc              LDR      r1,|L1.2468|
0006b2  3180              ADDS     r1,r1,#0x80
0006b4  a841              ADD      r0,sp,#0x104
0006b6  f7fffffe          BL       __aeabi_memcpy4
;;;552                                            0xFAF81A57,0x69625B16,0xAC952219,0xF21690CD,0x5AA51EE4,0xC7CE7869,0xF3B8E360,0xA1A3C2D6}; 
;;;553            
;;;554        const INT8U std_SM2_BID[33] = {0x20,0x19,0x46,0xCA,0xF6,0x05,0xAA,0x83,0x85,0x18,0x69,0xDD,0xBB,0x71,0xCB,0xFD,0x05,0xFC,0x27,0xFF,0x2C,0xDB,0xBF,0x07,0x47,0x16,0xE3,0x8C,0x00,0x85,0x45,0xE3,0x09};//LV,length + value 
0006ba  2224              MOVS     r2,#0x24
0006bc  a1ba              ADR      r1,|L1.2472|
0006be  a838              ADD      r0,sp,#0xe0
0006c0  f7fffffe          BL       __aeabi_memcpy4
;;;555        const INT32U std_SM2_BPrikey_d[8] = {0x70CAB6F4,0x1BD39EB8,0xFE2A995E,0x32AB4978,0xAA401F8B,0x9E0A95F6,0xF22CFA6C,0x45E8EE08};   
0006c4  2220              MOVS     r2,#0x20
0006c6  49b7              LDR      r1,|L1.2468|
0006c8  31c0              ADDS     r1,r1,#0xc0
0006ca  a830              ADD      r0,sp,#0xc0
0006cc  f7fffffe          BL       __aeabi_memcpy4
;;;556        const INT32U std_SM2_BPubkey[16] = {0x8D18BB94,0xE3378628,0xD413E1F4,0xCFE3D885,0xBA1AB50E,0xEB13EAD3,0x2A57DC27,0x740DFF23,\
0006d0  2240              MOVS     r2,#0x40
0006d2  49b4              LDR      r1,|L1.2468|
0006d4  31e0              ADDS     r1,r1,#0xe0
0006d6  a820              ADD      r0,sp,#0x80
0006d8  f7fffffe          BL       __aeabi_memcpy4
;;;557                                        0x85380BBD,0x36791323,0xF2982E60,0xE97375E6,0x3261B99C,0x6EBE40D2,0x7CD0273F,0x2C5F933C}; 
;;;558        const INT32U std_SM2_BTempPrikey_d[8] = {0xC2B466AB,0x4B5A6442,0x670BCEB0,0x7D6F76D3,0x8713BE86,0x3ABF1275,0x27063E0E,0x461C0DBC};   
0006dc  2220              MOVS     r2,#0x20
0006de  49bb              LDR      r1,|L1.2508|
0006e0  a818              ADD      r0,sp,#0x60
0006e2  f7fffffe          BL       __aeabi_memcpy4
;;;559        const INT32U std_SM2_BTempPubkey[16] = {0xB264667C,0x18CECC5E,0xDC9AA242,0x2C9AE2D7,0x57A101ED,0x07029ADE,0x7973CEFF,0x102E00F5,\
0006e6  2240              MOVS     r2,#0x40
0006e8  49b8              LDR      r1,|L1.2508|
0006ea  3120              ADDS     r1,r1,#0x20
0006ec  a808              ADD      r0,sp,#0x20
0006ee  f7fffffe          BL       __aeabi_memcpy4
;;;560                                                0x08FC95BE,0x35592981,0xF19046D6,0x0C401847,0xDD45C5FD,0x7F8A99DF,0x7D79C382,0x354ED8D4}; 
;;;561        
;;;562        const INT8U std_SM2_ExchgResult[32] = {0xC9,0x7A,0x20,0xDA,0x61,0x18,0xBD,0x0D,0x27,0xDD,0x56,0xEB,0x03,0x90,0xE8,0xFE,0xB7,0xA4,0xA9,0x4D,0x9F,0x5A,0x2D,0x04,0x19,0x92,0xED,0x58,0x32,0x69,0xA0,0x08};
0006f2  2220              MOVS     r2,#0x20
0006f4  a1b6              ADR      r1,|L1.2512|
0006f6  4668              MOV      r0,sp
0006f8  f7fffffe          BL       __aeabi_memcpy4
;;;563        
;;;564        /*************************************************/
;;;565        SM2_Param = &SM2_ParamVar;
0006fc  aee6              ADD      r6,sp,#0x398
;;;566        SM2_Param->iDataPtr = Demo_SM2_iData;
0006fe  4630              MOV      r0,r6
000700  30ff              ADDS     r0,r0,#0xff
000702  3099              ADDS     r0,r0,#0x99
000704  6030              STR      r0,[r6,#0]
;;;567        SM2_Param->oDataPtr = Demo_SM2_oData;
000706  a8ff              ADD      r0,sp,#0x3fc
000708  3034              ADDS     r0,r0,#0x34
00070a  6070              STR      r0,[r6,#4]
;;;568        SM2_Param->rndPtr = Demo_SM2_RNGData;
00070c  3820              SUBS     r0,r0,#0x20
00070e  60b0              STR      r0,[r6,#8]
;;;569        SM2_Param->priKeyPtr = Demo_SM2_priKey; 
000710  a8fc              ADD      r0,sp,#0x3f0
000712  60f0              STR      r0,[r6,#0xc]
;;;570        SM2_Param->pubKeyPtr = Demo_SM2_pubKey; 
000714  a8ec              ADD      r0,sp,#0x3b0
000716  6130              STR      r0,[r6,#0x10]
;;;571        SM2_Param->iEccSel = 1;     //only support Fp-256            
000718  2001              MOVS     r0,#1
00071a  6170              STR      r0,[r6,#0x14]
;;;572    
;;;573        /*1. generate new key ,run SM2 ENC/DEC */
;;;574        //1-1.load iData. big endian 
;;;575        memcpy(Demo_SM2_iData,std_SM2_pData,sizeof(std_SM2_pData));
00071c  2220              MOVS     r2,#0x20
00071e  a9bb              ADD      r1,sp,#0x2ec
000720  4630              MOV      r0,r6
000722  30ff              ADDS     r0,r0,#0xff
000724  3099              ADDS     r0,r0,#0x99
000726  f7fffffe          BL       __aeabi_memcpy4
;;;576        memcpy(Demo_SM2_priKey,std_SM2_Prikey_d,sizeof(std_SM2_Prikey_d));
00072a  2220              MOVS     r2,#0x20
00072c  a9d3              ADD      r1,sp,#0x34c
00072e  a8fc              ADD      r0,sp,#0x3f0
000730  f7fffffe          BL       __aeabi_memcpy4
;;;577        memcpy(Demo_SM2_pubKey,std_SM2_Pubkey,sizeof(std_SM2_Pubkey));
000734  2240              MOVS     r2,#0x40
000736  a9c3              ADD      r1,sp,#0x30c
000738  a8ec              ADD      r0,sp,#0x3b0
00073a  f7fffffe          BL       __aeabi_memcpy4
;;;578        
;;;579        ret = HED_SM2GenKey(SM2_Param);
00073e  4630              MOV      r0,r6
000740  f7fffffe          BL       HED_SM2GenKey
000744  b2c5              UXTB     r5,r0
;;;580        if (ret != 0)
000746  2d00              CMP      r5,#0
000748  d007              BEQ      |L1.1882|
;;;581        {
;;;582            SW1SW2 = 0x6F00;
00074a  206f              MOVS     r0,#0x6f
00074c  0200              LSLS     r0,r0,#8
00074e  4942              LDR      r1,|L1.2136|
000750  8008              STRH     r0,[r1,#0]
                  |L1.1874|
;;;583            return;
;;;584        }   
;;;585        
;;;586        // iKey have got by HED_SM2GenKey
;;;587        ret = HED_SM2Encrypt(SM2_Param, sizeof(std_SM2_pData)); 
;;;588        if (ret != 0)
;;;589        {
;;;590            SW1SW2 = 0x6F01;
;;;591            return;
;;;592        }
;;;593        
;;;594        // set HED_SM2Encrypt oData to HED_SM2Decrypt iData
;;;595        memcpy(Demo_SM2_iData, Demo_SM2_oData, sizeof(std_SM2_pData)+96);
;;;596        ret = HED_SM2Decrypt(SM2_Param, sizeof(std_SM2_pData)+96); 
;;;597        if (ret != 0)
;;;598        {
;;;599            SW1SW2 = 0x6F02;
;;;600            return;
;;;601        } 
;;;602        
;;;603        // check HED_SM2Decrypt oData with std_SM2_pData
;;;604        if (memcmp(Demo_SM2_oData, std_SM2_pData, sizeof(std_SM2_pData)) != 0)
;;;605        {
;;;606            SW1SW2 = 0x6F03;
;;;607            return;
;;;608        }  
;;;609        
;;;610        /*2. key Known ,run SM2 signing/verify and GetZ /SM2Decrypt */
;;;611        // 2-1.load iData. big endian  
;;;612        memcpy(Demo_SM2_iData, std_SM2_signingData, sizeof(std_SM2_signingData));    
;;;613        // load ikey D 
;;;614        memcpy(Demo_SM2_priKey, std_SM2_Prikey_d, sizeof(std_SM2_Prikey_d));    
;;;615        // load ikey x,y 
;;;616        memcpy(Demo_SM2_pubKey, std_SM2_Pubkey, sizeof(std_SM2_Pubkey));
;;;617        
;;;618        //2-2. run HED_SM2Sign
;;;619        ret = HED_SM2Sign(SM2_Param);
;;;620        if (ret != 0)
;;;621        {
;;;622            SW1SW2 = 0x6F04;
;;;623            return;
;;;624        } 
;;;625        
;;;626        // run HED_SM2Verify .
;;;627        ret = HED_SM2Verify(SM2_Param); 
;;;628        if (ret != 0)
;;;629        {
;;;630            SW1SW2 = 0x6F05;
;;;631            return;
;;;632        } 
;;;633        
;;;634        //2-3.  load std data to verify HED_SM2Verify. idata have loaded.
;;;635        memcpy(Demo_SM2_oData, std_SM2_signingResult, sizeof(std_SM2_signingResult));
;;;636        //signingResult =R + S
;;;637        ret = HED_SM2Verify(SM2_Param); 
;;;638        if (ret != 0)
;;;639        {
;;;640            SW1SW2 = 0x6F06;
;;;641            return;
;;;642        } 
;;;643        
;;;644        //2-4. run GetZ, other para have loaded above.
;;;645        memcpy(Demo_SM2_iData, std_SM2_GetZ_AID, sizeof(std_SM2_GetZ_AID));
;;;646        ret = HED_SM2GetZ (std_SM2_GetZ_AID, Demo_SM2_pubKey,(INT32U *)Demo_SM2_oData, 1);
;;;647        if (ret != 0)
;;;648        {
;;;649            SW1SW2 = 0x6F07;
;;;650            return;
;;;651        }
;;;652        
;;;653        if (memcmp(Demo_SM2_oData, std_SM2_GetZ_Result, sizeof(std_SM2_GetZ_Result)) != 0)
;;;654        {
;;;655            SW1SW2 = 0x6F08;
;;;656            return;
;;;657        }
;;;658        
;;;659        //2-5. run SM2Decrypt, get pData.
;;;660        //load cData
;;;661        memcpy(Demo_SM2_iData, std_SM2_cData,64);//c1_x,c1_y
;;;662        memcpy(Demo_SM2_iData+32*2,std_SM2_cData+32*2,32);//c3
;;;663        memcpy(Demo_SM2_iData+32*2+sizeof(std_SM2_pData),std_SM2_cData+32*2+sizeof(std_SM2_pData),sizeof(std_SM2_pData));//c2
;;;664        
;;;665        ret = HED_SM2Decrypt(SM2_Param, sizeof(std_SM2_pData)+96);
;;;666        if (ret != 0)
;;;667        {
;;;668            SW1SW2 = 0x6F09;
;;;669            return;
;;;670        } 
;;;671        
;;;672        // check HED_SM2Decrypt oData with std_SM2_pData
;;;673        if (memcmp(Demo_SM2_oData, std_SM2_pData, sizeof(std_SM2_pData)) != 0)
;;;674        {
;;;675            SW1SW2 = 0x6F0A;
;;;676            return;
;;;677        }
;;;678        
;;;679        /*3. all key Known,run HED_SM2KeyExchange */
;;;680        #define SENDER      1
;;;681        #define RECEIVER    0
;;;682        //3-1. A is organiger(sender)
;;;683        SM2KeyExch_Param = &SM2KeyExch_ParamVar;
;;;684        SM2KeyExch_Param->AID = std_SM2_AID;
;;;685        SM2KeyExch_Param->BID = std_SM2_BID;
;;;686        SM2KeyExch_Param->PublicKey = std_SM2_APubkey;
;;;687        SM2KeyExch_Param->PrivateKey = std_SM2_APrikey_d;
;;;688        SM2KeyExch_Param->BPublicKey = std_SM2_BPubkey;
;;;689        SM2KeyExch_Param->TempPrivateKey = std_SM2_ATempPrikey_d;
;;;690        SM2KeyExch_Param->TempPubKeyX = std_SM2_ATempPubkey;
;;;691        SM2KeyExch_Param->BTempPubKey = std_SM2_BTempPubkey;
;;;692        SM2KeyExch_Param->oLen = 32;
;;;693        SM2KeyExch_Param->DataType = SENDER;//(sender)
;;;694        SM2KeyExch_Param->iEccSel = 1;//Fp-256
;;;695        
;;;696        ret = HED_SM2KeyExchange(SM2KeyExch_Param,Demo_SM2_oData);
;;;697        if (ret != 0)
;;;698        {
;;;699            SW1SW2 = 0x6F0B;
;;;700            return;
;;;701        } 
;;;702        
;;;703        if (memcmp(Demo_SM2_oData, std_SM2_ExchgResult, sizeof(std_SM2_ExchgResult)) != 0)
;;;704        {
;;;705            SW1SW2 = 0x6F0C;
;;;706            return;
;;;707        }    
;;;708        
;;;709        //3-2. B is organiger(receiver)    
;;;710        SM2KeyExch_Param = &SM2KeyExch_ParamVar;
;;;711        SM2KeyExch_Param->AID = std_SM2_BID;
;;;712        SM2KeyExch_Param->BID = std_SM2_AID;
;;;713        SM2KeyExch_Param->PublicKey = std_SM2_BPubkey;
;;;714        SM2KeyExch_Param->PrivateKey = std_SM2_BPrikey_d;
;;;715        SM2KeyExch_Param->BPublicKey = std_SM2_APubkey;
;;;716        SM2KeyExch_Param->TempPrivateKey = std_SM2_BTempPrikey_d;
;;;717        SM2KeyExch_Param->TempPubKeyX = std_SM2_BTempPubkey;
;;;718        SM2KeyExch_Param->BTempPubKey = std_SM2_ATempPubkey;
;;;719        SM2KeyExch_Param->oLen = 32;
;;;720        SM2KeyExch_Param->DataType = RECEIVER;//(receiver)
;;;721        SM2KeyExch_Param->iEccSel = 1;//Fp-256    
;;;722        
;;;723        ret = HED_SM2KeyExchange(SM2KeyExch_Param,Demo_SM2_oData); 
;;;724        if (ret != 0)
;;;725        {
;;;726            SW1SW2 = 0x6F0D;
;;;727            return;
;;;728        } 
;;;729        
;;;730        if (memcmp(Demo_SM2_oData, std_SM2_ExchgResult, sizeof(std_SM2_ExchgResult)) != 0)
;;;731        {
;;;732            SW1SW2 = 0x6F0E;
;;;733            return;
;;;734        }
;;;735            
;;;736        SW1SW2 = 0x9000;
;;;737    }
000752  2373              MOVS     r3,#0x73
000754  011b              LSLS     r3,r3,#4
000756  449d              ADD      sp,sp,r3
000758  bd70              POP      {r4-r6,pc}
                  |L1.1882|
00075a  2120              MOVS     r1,#0x20              ;587
00075c  4630              MOV      r0,r6                 ;587
00075e  f7fffffe          BL       HED_SM2Encrypt
000762  b2c5              UXTB     r5,r0                 ;587
000764  2d00              CMP      r5,#0                 ;588
000766  d003              BEQ      |L1.1904|
000768  483d              LDR      r0,|L1.2144|
00076a  493b              LDR      r1,|L1.2136|
00076c  8008              STRH     r0,[r1,#0]            ;590
00076e  e7f0              B        |L1.1874|
                  |L1.1904|
000770  2280              MOVS     r2,#0x80              ;595
000772  a9ff              ADD      r1,sp,#0x3fc          ;595
000774  3134              ADDS     r1,r1,#0x34           ;595
000776  1dc8              ADDS     r0,r1,#7              ;595
000778  30f9              ADDS     r0,r0,#0xf9           ;595
00077a  f7fffffe          BL       __aeabi_memcpy4
00077e  2180              MOVS     r1,#0x80              ;596
000780  4630              MOV      r0,r6                 ;596
000782  f7fffffe          BL       HED_SM2Decrypt
000786  b2c5              UXTB     r5,r0                 ;596
000788  2d00              CMP      r5,#0                 ;597
00078a  d004              BEQ      |L1.1942|
00078c  4834              LDR      r0,|L1.2144|
00078e  1c40              ADDS     r0,r0,#1              ;599
000790  4931              LDR      r1,|L1.2136|
000792  8008              STRH     r0,[r1,#0]            ;599
000794  e7dd              B        |L1.1874|
                  |L1.1942|
000796  2220              MOVS     r2,#0x20              ;604
000798  a9bb              ADD      r1,sp,#0x2ec          ;604
00079a  a8ff              ADD      r0,sp,#0x3fc          ;604
00079c  3034              ADDS     r0,r0,#0x34           ;604
00079e  f7fffffe          BL       memcmp
0007a2  2800              CMP      r0,#0                 ;604
0007a4  d004              BEQ      |L1.1968|
0007a6  482e              LDR      r0,|L1.2144|
0007a8  1c80              ADDS     r0,r0,#2              ;606
0007aa  492b              LDR      r1,|L1.2136|
0007ac  8008              STRH     r0,[r1,#0]            ;606
0007ae  e7d0              B        |L1.1874|
                  |L1.1968|
0007b0  2220              MOVS     r2,#0x20              ;612
0007b2  a993              ADD      r1,sp,#0x24c          ;612
0007b4  488e              LDR      r0,|L1.2544|
0007b6  4468              ADD      r0,r0,sp              ;612
0007b8  f7fffffe          BL       __aeabi_memcpy4
0007bc  2220              MOVS     r2,#0x20              ;614
0007be  a9d3              ADD      r1,sp,#0x34c          ;614
0007c0  a8fc              ADD      r0,sp,#0x3f0          ;614
0007c2  f7fffffe          BL       __aeabi_memcpy4
0007c6  2240              MOVS     r2,#0x40              ;616
0007c8  a9c3              ADD      r1,sp,#0x30c          ;616
0007ca  a8ec              ADD      r0,sp,#0x3b0          ;616
0007cc  f7fffffe          BL       __aeabi_memcpy4
0007d0  4630              MOV      r0,r6                 ;619
0007d2  f7fffffe          BL       HED_SM2Sign
0007d6  b2c5              UXTB     r5,r0                 ;619
0007d8  2d00              CMP      r5,#0                 ;620
0007da  d004              BEQ      |L1.2022|
0007dc  4820              LDR      r0,|L1.2144|
0007de  1cc0              ADDS     r0,r0,#3              ;622
0007e0  491d              LDR      r1,|L1.2136|
0007e2  8008              STRH     r0,[r1,#0]            ;622
0007e4  e7b5              B        |L1.1874|
                  |L1.2022|
0007e6  4630              MOV      r0,r6                 ;627
0007e8  f7fffffe          BL       HED_SM2Verify
0007ec  b2c5              UXTB     r5,r0                 ;627
0007ee  2d00              CMP      r5,#0                 ;628
0007f0  d004              BEQ      |L1.2044|
0007f2  481b              LDR      r0,|L1.2144|
0007f4  1d00              ADDS     r0,r0,#4              ;630
0007f6  4918              LDR      r1,|L1.2136|
0007f8  8008              STRH     r0,[r1,#0]            ;630
0007fa  e7aa              B        |L1.1874|
                  |L1.2044|
0007fc  2240              MOVS     r2,#0x40              ;635
0007fe  a983              ADD      r1,sp,#0x20c          ;635
000800  a8ff              ADD      r0,sp,#0x3fc          ;635
000802  3034              ADDS     r0,r0,#0x34           ;635
000804  f7fffffe          BL       __aeabi_memcpy4
000808  4630              MOV      r0,r6                 ;637
00080a  f7fffffe          BL       HED_SM2Verify
00080e  b2c5              UXTB     r5,r0                 ;637
000810  2d00              CMP      r5,#0                 ;638
000812  d004              BEQ      |L1.2078|
000814  4812              LDR      r0,|L1.2144|
000816  1d40              ADDS     r0,r0,#5              ;640
000818  490f              LDR      r1,|L1.2136|
00081a  8008              STRH     r0,[r1,#0]            ;640
00081c  e799              B        |L1.1874|
                  |L1.2078|
00081e  4875              LDR      r0,|L1.2548|
000820  4468              ADD      r0,r0,sp              ;645
000822  9982              LDR      r1,[sp,#0x208]        ;645
000824  6301              STR      r1,[r0,#0x30]         ;645
000826  2301              MOVS     r3,#1                 ;646
000828  aaff              ADD      r2,sp,#0x3fc          ;646
00082a  3234              ADDS     r2,r2,#0x34           ;646
00082c  a9ec              ADD      r1,sp,#0x3b0          ;646
00082e  a882              ADD      r0,sp,#0x208          ;646
000830  f7fffffe          BL       HED_SM2GetZ
000834  b2c5              UXTB     r5,r0                 ;646
000836  2d00              CMP      r5,#0                 ;647
000838  d004              BEQ      |L1.2116|
00083a  4809              LDR      r0,|L1.2144|
00083c  1d80              ADDS     r0,r0,#6              ;649
00083e  4906              LDR      r1,|L1.2136|
000840  8008              STRH     r0,[r1,#0]            ;649
000842  e786              B        |L1.1874|
                  |L1.2116|
000844  e0d8              B        |L1.2552|
000846  0000              DCW      0x0000
                  |L1.2120|
                          DCD      0x00000e50
                  |L1.2124|
                          DCD      0x000007b8
                  |L1.2128|
                          DCD      0x00000e00
                  |L1.2132|
                          DCD      0x00000c50
                  |L1.2136|
                          DCD      SW1SW2
                  |L1.2140|
                          DCD      0x00000d50
                  |L1.2144|
                          DCD      0x00006f01
                  |L1.2148|
                          DCD      0x000009d0
                  |L1.2152|
                          DCD      0x000006b8
                  |L1.2156|
                          DCD      0x000005b8
                  |L1.2160|
                          DCD      0x00000580
                  |L1.2164|
                          DCD      0xfffff8d0
                  |L1.2168|
000878  9e1f3b25          DCB      158,31,";%",18,"8E\tv}zZ]",3,"p",31,"&",166,"B",139,"f",187
00087c  12384509
000880  767d7a5a
000884  5d03701f
000888  26a6428b
00088c  66bb    
00088e  64434dc8          DCB      "dCM",200,"\aM-",18,"9",179
000892  074d2d12
000896  39b3    
                  |L1.2200|
000898  a88bcdf9          DCB      168,139,205,249,129,"""`",143,24,176,14,176,":A\f",161,205
00089c  8122608f
0008a0  18b00eb0
0008a4  3a410ca1
0008a8  cd      
0008a9  6d7e4124          DCB      "m~A$$",131,"/K",198,"c",134,28,"E",254,"]1",144,190,227
0008ad  832f4bc6
0008b1  63861c45
0008b5  fe5d3190
0008b9  bee3    
0008bb  759c25a2          DCB      "u",156,"%",162,153,239,"9|",135,246,154,"B",28,224,217,"2"
0008bf  99ef397c
0008c3  87f69a42
0008c7  1ce0d932
0008cb  5f36fc0f          DCB      "_6",252,15,"O",160,2,"{0",18,248,171,160
0008cf  4fa0027b
0008d3  3012f8ab
0008d7  a0      
                  |L1.2264|
0008d8  9604fcbb          DCB      150,4,252,187,"<n",232,185,"8",215,212,194,248,"F",188,177
0008dc  3c6ee8b9
0008e0  38d7d4c2
0008e4  f846bcb1
0008e8  7c0ac0f3          DCB      "|\n",192,243,"\n",161,"y",142,"#",216,141,"b",181,"4",129
0008ec  0aa1798e
0008f0  23d88d62
0008f4  b53481  
0008f7  af                DCB      175
                  |L1.2296|
                          DCD      ||.constdata||+0xa64
                  |L1.2300|
0008fc  af8134b5          DCB      175,129,"4",181,"b",141,216,"#",142,"y",161,"\n",243,192
000900  628dd823
000904  8e79a10a
000908  f3c0    
00090a  0a7cb1bc          DCB      "\n|",177,188,"F",248,194,212,215,"8",185,232,"n<",187,252
00090e  46f8c2d4
000912  d738b9e8
000916  6e3cbbfc
00091a  0496              DCB      4,150
                  |L1.2332|
00091c  b7b27c1b          DCB      183,178,"|",27,"F",214," ",15,3,239,132,214,"#i",19,170,"]"
000920  46d6200f
000924  03ef84d6
000928  236913aa
00092c  5d      
00092d  77659a04          DCB      "we",154,4,"Tl",197,191,"ql",21,"F",185,243,"*\b",27,"^)"
000931  546cc5bf
000935  716c1546
000939  b9f32a08
00093d  1b5e29  
000940  2927a8ff          DCB      ")'",168,255,"S",140,193,27,237,173,"\f",224,"=",163,"\f"
000944  538cc11b
000948  edad0ce0
00094c  3da30c  
00094f  55ba20f8          DCB      "U",186," ",248,211,"6",182,212,"t",219,200,"I",5
000953  d336b6d4
000957  74dbc849
00095b  05      
                  |L1.2396|
00095c  03363693          DCB      3,"66",147
                  |L1.2400|
000960  f82afef5          DCB      248,"*",254,245,188,"w",0
000964  bc7700  
000967  e1e658fd          DCB      225,230,"X",253,233,"\nY",241,"1",168,27,"h",25,"$$",141
00096b  e90a59f1
00096f  31a81b68
000973  19248d  
000976  637e8b79          DCB      "c~",139,"y",237,145,140,204,"~o"
00097a  ed918ccc
00097e  7e6f    
                  |L1.2432|
000980  2019ad86          DCB      " ",25,173,134,223,27,214,127,17,"f{",144,"BY",205,141,251
000984  df1bd67f
000988  11667b90
00098c  4259cd8d
000990  fb      
000991  81eba6fc          DCB      129,235,166,252,5,197,"p9M25",20,243,"O{",220,0
000995  05c57039
000999  4d323514
00099d  f34f7bdc
0009a1  00      
0009a2  00                DCB      0
0009a3  00                DCB      0
                  |L1.2468|
                          DCD      ||.constdata||+0x79c
                  |L1.2472|
0009a8  201946ca          DCB      " ",25,"F",202,246,5,170,131,133,24,"i",221,187,"q",203,253
0009ac  f605aa83
0009b0  851869dd
0009b4  bb71cbfd
0009b8  05fc27ff          DCB      5,252,"'",255,",",219,191,"\aG",22,227,140,0
0009bc  2cdbbf07
0009c0  4716e38c
0009c4  00      
0009c5  8545e309          DCB      133,"E",227,"\t",0
0009c9  00      
0009ca  00                DCB      0
0009cb  00                DCB      0
                  |L1.2508|
                          DCD      ||.constdata||+0x8bc
                  |L1.2512|
0009d0  c97a20da          DCB      201,"z ",218,"a",24,189,"\r'",221,"V",235,3,144,232,254,183
0009d4  6118bd0d
0009d8  27dd56eb
0009dc  0390e8fe
0009e0  b7      
0009e1  a4a94d9f          DCB      164,169,"M",159,"Z-",4,25,146,237,"X2i",160,"\b"
0009e5  5a2d0419
0009e9  92ed5832
0009ed  69a008  
                  |L1.2544|
                          DCD      0x00000530
                  |L1.2548|
                          DCD      0x00000500
                  |L1.2552|
0009f8  2220              MOVS     r2,#0x20              ;653
0009fa  a97a              ADD      r1,sp,#0x1e8          ;653
0009fc  a8ff              ADD      r0,sp,#0x3fc          ;653
0009fe  3034              ADDS     r0,r0,#0x34           ;653
000a00  f7fffffe          BL       memcmp
000a04  2800              CMP      r0,#0                 ;653
000a06  d003              BEQ      |L1.2576|
000a08  48f5              LDR      r0,|L1.3552|
000a0a  49f6              LDR      r1,|L1.3556|
000a0c  8008              STRH     r0,[r1,#0]            ;655
000a0e  e6a0              B        |L1.1874|
                  |L1.2576|
000a10  2240              MOVS     r2,#0x40              ;661
000a12  a99b              ADD      r1,sp,#0x26c          ;661
000a14  48f4              LDR      r0,|L1.3560|
000a16  4468              ADD      r0,r0,sp              ;661
000a18  f7fffffe          BL       __aeabi_memcpy4
000a1c  2220              MOVS     r2,#0x20              ;662
000a1e  a9ab              ADD      r1,sp,#0x2ac          ;662
000a20  48f2              LDR      r0,|L1.3564|
000a22  4468              ADD      r0,r0,sp              ;662
000a24  f7fffffe          BL       __aeabi_memcpy4
000a28  2220              MOVS     r2,#0x20              ;663
000a2a  a9b3              ADD      r1,sp,#0x2cc          ;663
000a2c  48f0              LDR      r0,|L1.3568|
000a2e  4468              ADD      r0,r0,sp              ;663
000a30  f7fffffe          BL       __aeabi_memcpy4
000a34  2180              MOVS     r1,#0x80              ;665
000a36  4630              MOV      r0,r6                 ;665
000a38  f7fffffe          BL       HED_SM2Decrypt
000a3c  b2c5              UXTB     r5,r0                 ;665
000a3e  2d00              CMP      r5,#0                 ;666
000a40  d004              BEQ      |L1.2636|
000a42  48e7              LDR      r0,|L1.3552|
000a44  1c40              ADDS     r0,r0,#1              ;668
000a46  49e7              LDR      r1,|L1.3556|
000a48  8008              STRH     r0,[r1,#0]            ;668
000a4a  e682              B        |L1.1874|
                  |L1.2636|
000a4c  2220              MOVS     r2,#0x20              ;673
000a4e  a9bb              ADD      r1,sp,#0x2ec          ;673
000a50  a8ff              ADD      r0,sp,#0x3fc          ;673
000a52  3034              ADDS     r0,r0,#0x34           ;673
000a54  f7fffffe          BL       memcmp
000a58  2800              CMP      r0,#0                 ;673
000a5a  d004              BEQ      |L1.2662|
000a5c  48e0              LDR      r0,|L1.3552|
000a5e  1c80              ADDS     r0,r0,#2              ;675
000a60  49e0              LDR      r1,|L1.3556|
000a62  8008              STRH     r0,[r1,#0]            ;675
000a64  e675              B        |L1.1874|
                  |L1.2662|
000a66  acdb              ADD      r4,sp,#0x36c          ;683
000a68  a871              ADD      r0,sp,#0x1c4          ;684
000a6a  6020              STR      r0,[r4,#0]            ;684
000a6c  a838              ADD      r0,sp,#0xe0           ;685
000a6e  6060              STR      r0,[r4,#4]            ;685
000a70  a859              ADD      r0,sp,#0x164          ;686
000a72  60a0              STR      r0,[r4,#8]            ;686
000a74  a869              ADD      r0,sp,#0x1a4          ;687
000a76  60e0              STR      r0,[r4,#0xc]          ;687
000a78  a820              ADD      r0,sp,#0x80           ;688
000a7a  6120              STR      r0,[r4,#0x10]         ;688
000a7c  a851              ADD      r0,sp,#0x144          ;689
000a7e  6160              STR      r0,[r4,#0x14]         ;689
000a80  a841              ADD      r0,sp,#0x104          ;690
000a82  61a0              STR      r0,[r4,#0x18]         ;690
000a84  a808              ADD      r0,sp,#0x20           ;691
000a86  61e0              STR      r0,[r4,#0x1c]         ;691
000a88  2020              MOVS     r0,#0x20              ;692
000a8a  6220              STR      r0,[r4,#0x20]         ;692
000a8c  2001              MOVS     r0,#1                 ;693
000a8e  6260              STR      r0,[r4,#0x24]         ;693
000a90  62a0              STR      r0,[r4,#0x28]         ;694
000a92  a9ff              ADD      r1,sp,#0x3fc          ;696
000a94  3134              ADDS     r1,r1,#0x34           ;696
000a96  4620              MOV      r0,r4                 ;696
000a98  f7fffffe          BL       HED_SM2KeyExchange
000a9c  b2c5              UXTB     r5,r0                 ;696
000a9e  2d00              CMP      r5,#0                 ;697
000aa0  d004              BEQ      |L1.2732|
000aa2  48cf              LDR      r0,|L1.3552|
000aa4  1cc0              ADDS     r0,r0,#3              ;699
000aa6  49cf              LDR      r1,|L1.3556|
000aa8  8008              STRH     r0,[r1,#0]            ;699
000aaa  e652              B        |L1.1874|
                  |L1.2732|
000aac  2220              MOVS     r2,#0x20              ;703
000aae  4669              MOV      r1,sp                 ;703
000ab0  a8ff              ADD      r0,sp,#0x3fc          ;703
000ab2  3034              ADDS     r0,r0,#0x34           ;703
000ab4  f7fffffe          BL       memcmp
000ab8  2800              CMP      r0,#0                 ;703
000aba  d004              BEQ      |L1.2758|
000abc  48c8              LDR      r0,|L1.3552|
000abe  1d00              ADDS     r0,r0,#4              ;705
000ac0  49c8              LDR      r1,|L1.3556|
000ac2  8008              STRH     r0,[r1,#0]            ;705
000ac4  e645              B        |L1.1874|
                  |L1.2758|
000ac6  acdb              ADD      r4,sp,#0x36c          ;710
000ac8  a838              ADD      r0,sp,#0xe0           ;711
000aca  6020              STR      r0,[r4,#0]            ;711
000acc  a871              ADD      r0,sp,#0x1c4          ;712
000ace  6060              STR      r0,[r4,#4]            ;712
000ad0  a820              ADD      r0,sp,#0x80           ;713
000ad2  60a0              STR      r0,[r4,#8]            ;713
000ad4  a830              ADD      r0,sp,#0xc0           ;714
000ad6  60e0              STR      r0,[r4,#0xc]          ;714
000ad8  a859              ADD      r0,sp,#0x164          ;715
000ada  6120              STR      r0,[r4,#0x10]         ;715
000adc  a818              ADD      r0,sp,#0x60           ;716
000ade  6160              STR      r0,[r4,#0x14]         ;716
000ae0  a808              ADD      r0,sp,#0x20           ;717
000ae2  61a0              STR      r0,[r4,#0x18]         ;717
000ae4  a841              ADD      r0,sp,#0x104          ;718
000ae6  61e0              STR      r0,[r4,#0x1c]         ;718
000ae8  2020              MOVS     r0,#0x20              ;719
000aea  6220              STR      r0,[r4,#0x20]         ;719
000aec  2000              MOVS     r0,#0                 ;720
000aee  6260              STR      r0,[r4,#0x24]         ;720
000af0  2001              MOVS     r0,#1                 ;721
000af2  62a0              STR      r0,[r4,#0x28]         ;721
000af4  a9ff              ADD      r1,sp,#0x3fc          ;723
000af6  3134              ADDS     r1,r1,#0x34           ;723
000af8  4620              MOV      r0,r4                 ;723
000afa  f7fffffe          BL       HED_SM2KeyExchange
000afe  b2c5              UXTB     r5,r0                 ;723
000b00  2d00              CMP      r5,#0                 ;724
000b02  d004              BEQ      |L1.2830|
000b04  48b6              LDR      r0,|L1.3552|
000b06  1d40              ADDS     r0,r0,#5              ;726
000b08  49b6              LDR      r1,|L1.3556|
000b0a  8008              STRH     r0,[r1,#0]            ;726
000b0c  e621              B        |L1.1874|
                  |L1.2830|
000b0e  2220              MOVS     r2,#0x20              ;730
000b10  4669              MOV      r1,sp                 ;730
000b12  a8ff              ADD      r0,sp,#0x3fc          ;730
000b14  3034              ADDS     r0,r0,#0x34           ;730
000b16  f7fffffe          BL       memcmp
000b1a  2800              CMP      r0,#0                 ;730
000b1c  d004              BEQ      |L1.2856|
000b1e  48b0              LDR      r0,|L1.3552|
000b20  1d80              ADDS     r0,r0,#6              ;732
000b22  49b0              LDR      r1,|L1.3556|
000b24  8008              STRH     r0,[r1,#0]            ;732
000b26  e614              B        |L1.1874|
                  |L1.2856|
000b28  2009              MOVS     r0,#9                 ;736
000b2a  0300              LSLS     r0,r0,#12             ;736
000b2c  49ad              LDR      r1,|L1.3556|
000b2e  8008              STRH     r0,[r1,#0]            ;736
000b30  bf00              NOP      
000b32  e60e              B        |L1.1874|
;;;738    /************************************************* 
                          ENDP

                  cmd_HASH_ALG PROC
;;;745    *************************************************/
;;;746    void cmd_HASH_ALG(void)
000b34  b570              PUSH     {r4-r6,lr}
;;;747    {
000b36  b0ff              SUB      sp,sp,#0x1fc
000b38  b08f              SUB      sp,sp,#0x3c
;;;748        INT32U  out_hash160_v[7];
;;;749        INT32U  out_hash256_v[10];
;;;750        INT32U  out_SM3_v[9];
;;;751        INT32U len;
;;;752        INT32U * inPtr;
;;;753        INT8U ret;
;;;754        
;;;755        /************************************************* 
;;;756            SHA1\SHA256\SM3 standard data
;;;757        *************************************************/    
;;;758    __align(4)    INT8U  std_SHA1_inputLess64[58] = {0x0A,0x0F,0xEA,0xAA,0x53,0x66,0x5D,0x4C,0x8C,0xB3,0x85,0x66,0xDF,0x4E,0xE6,0x1F,0x27,0x3B,0xB6,0x34,0x83,0x42,0x41,0x58,0x08,0x17,0x3C,0x55,0x95,0x4B,0xFE,0x8E,\
000b3a  223c              MOVS     r2,#0x3c
000b3c  a1ad              ADR      r1,|L1.3572|
000b3e  a865              ADD      r0,sp,#0x194
000b40  f7fffffe          BL       __aeabi_memcpy4
;;;759                                             0xC5,0xCB,0xBA,0xF6,0x76,0xB8,0x02,0xAB,0xD8,0x94,0x45,0x88,0x4C,0x69,0x7F,0x80,0x81,0x52,0x1C,0x0B,0x4A,0x88,0x30,0x0E,0x25,0x46};
;;;760    __align(4)    INT8U  std_SHA1_outputLess64[20] = {0x34,0x8C,0x74,0xD1,0xEE,0xB3,0x33,0x49,0x9B,0x8F,0xE2,0xC2,0xD0,0x5D,0xBF,0xD0,0x9B,0xA3,0x6D,0x2A};
000b44  2214              MOVS     r2,#0x14
000b46  a1ba              ADR      r1,|L1.3632|
000b48  a860              ADD      r0,sp,#0x180
000b4a  f7fffffe          BL       __aeabi_memcpy4
;;;761        
;;;762    __align(4)    INT8U  std_SHA_inputMore64[132] = {0xF4,0x4C,0x7D,0x4F,0x8D,0xF0,0xFD,0x73,0xE8,0x15,0x6A,0x23,0x26,0x0B,0x04,0x05,0x3A,0x16,0xF0,0x79,0x4E,0xB1,0x06,0xE5,0x95,0x4E,0x32,0xEE,0x48,0xD8,0x6C,0x2A,\
000b4e  2284              MOVS     r2,#0x84
000b50  49bc              LDR      r1,|L1.3652|
000b52  a83f              ADD      r0,sp,#0xfc
000b54  f7fffffe          BL       __aeabi_memcpy4
;;;763                                             0xD8,0xA2,0x38,0xDF,0x6A,0x5D,0x07,0xD6,0x88,0x13,0xBD,0x8A,0xAD,0x63,0x55,0xFD,0x0A,0x2A,0xDA,0x8F,0x74,0xB7,0x89,0x1A,0xC8,0x42,0x24,0x72,0xB9,0x90,0xFC,0x2A,\
;;;764                                             0xE8,0x8B,0x62,0xC4,0xD0,0x0E,0xC1,0x89,0x3C,0xBD,0x24,0xE9,0xCE,0xC1,0x6A,0xD3,0x59,0xC7,0xDB,0x27,0xD0,0x49,0x19,0x65,0xC8,0x10,0x2C,0x87,0xE4,0x18,0xCC,0x1C,\
;;;765                                             0x11,0xED,0x99,0xB6,0xF9,0x99,0xF9,0xEE,0xCC,0xBF,0x7E,0xE7,0xD4,0x3A,0x30,0xFA,0xAA,0xAE,0xF4,0x26,0x38,0xD4,0x7D,0xAA,0x55,0xB1,0x8E,0xC5,0x70,0x22,0x34,0xB8,\
;;;766                                             0x0D,0x18,0x68,0x67};
;;;767    __align(4)    INT8U  std_SHA1_input64[64] = {0x0A,0x0F,0xEA,0xAA,0x53,0x66,0x5D,0x4C,0x8C,0xB3,0x85,0x66,0xDF,0x4E,0xE6,0x1F,0x27,0x3B,0xB6,0x34,0x83,0x42,0x41,0x58,0x08,0x17,0x3C,0x55,0x95,0x4B,0xFE,0x8E,\
000b58  2240              MOVS     r2,#0x40
000b5a  a1bb              ADR      r1,|L1.3656|
000b5c  a82f              ADD      r0,sp,#0xbc
000b5e  f7fffffe          BL       __aeabi_memcpy4
;;;768                                             0xC5,0xCB,0xBA,0xF6,0x76,0xB8,0x02,0xAB,0xD8,0x94,0x45,0x88,0x4C,0x69,0x7F,0x80,0x81,0x52,0x1C,0x0B,0x4A,0x88,0x30,0x0E,0x25,0x46,0x00,0x00,0x00,0x00,0x00,0x00};
;;;769    __align(4)    INT8U  std_SHA1_outputMore64[20] = {0xFB,0x74,0xDD,0xEB,0xDB,0x40,0x34,0x5C,0x10,0xC0,0x09,0x8B,0x80,0x3D,0x25,0x35,0xF1,0xB9,0x43,0xD6};    
000b62  2214              MOVS     r2,#0x14
000b64  a1c8              ADR      r1,|L1.3720|
000b66  a82a              ADD      r0,sp,#0xa8
000b68  f7fffffe          BL       __aeabi_memcpy4
;;;770    __align(4)    INT8U  std_SHA256_outputMore64[32] = {0x39,0x21,0xE9,0x5E,0xCA,0xE2,0x33,0xB3,0x2C,0xB8,0x48,0xFC,0x45,0xF3,0x89,0xA7,0x84,0xF1,0x78,0x7B,0xF2,0x41,0x2E,0x9D,0x49,0x25,0xDB,0x23,0x4A,0x4A,0xDE,0xA1};
000b6c  2220              MOVS     r2,#0x20
000b6e  a1cb              ADR      r1,|L1.3740|
000b70  a822              ADD      r0,sp,#0x88
000b72  f7fffffe          BL       __aeabi_memcpy4
;;;771        
;;;772    __align(4)    INT8U   std_SM3_inputMore64[97] = {0x56,0xBB,0xAD,0x9F,0x88,0xD3,0xAC,0x07,0x58,0xC4,0xED,0x64,0xD2,0xEF,0x4A,0xA9,0x77,0x3A,0xC6,0xB8,0x74,0xFA,0xEA,0xF6,0x23,0x22,0x5F,0x0E,0xC6,0xAB,0xCE,0x03,\
000b76  2264              MOVS     r2,#0x64
000b78  49b2              LDR      r1,|L1.3652|
000b7a  3184              ADDS     r1,r1,#0x84
000b7c  a809              ADD      r0,sp,#0x24
000b7e  f7fffffe          BL       __aeabi_memcpy4
;;;773                                             0x81,0x45,0xF6,0x7A,0x98,0x3E,0x0E,0x48,0xE8,0xB2,0x5B,0x39,0xAA,0xF2,0x14,0x22,0x65,0x38,0x74,0x28,0x32,0x8B,0x1F,0x51,0x36,0xEF,0xB8,0x4A,0x5B,0xCF,0xC2,0x79,\
;;;774                                             0x50,0xAE,0xB6,0x44,0xC3,0x0B,0x64,0xA2,0xDB,0x94,0x8D,0xE2,0xFA,0x8D,0xC0,0xBA,0xB3,0x81,0x73,0x92,0x08,0x2A,0x64,0x11,0xE7,0x9C,0x31,0xE6,0xE6,0xB7,0x34,0xDA,\
;;;775                                             0x3C};
;;;776    __align(4)    INT8U  std_SM3_outputMore64[32] ={0x7C,0xF6,0x13,0x49,0x75,0xB9,0xD6,0x77,0x47,0x2B,0x98,0x4C,0xBE,0x4A,0xD2,0x60,0xFC,0x8A,0x37,0xAD,0x3E,0x96,0x4E,0xA6,0xE2,0x02,0xC5,0xB9,0xE2,0x97,0x26,0x44};
000b82  2220              MOVS     r2,#0x20
000b84  a1cd              ADR      r1,|L1.3772|
000b86  a801              ADD      r0,sp,#4
000b88  f7fffffe          BL       __aeabi_memcpy4
;;;777    
;;;778        /*1. SHA1 , data length less than 64Bytes */
;;;779        //1-1.run these sha1 fun
;;;780        HED_SHA1_Init(out_hash160_v);
000b8c  a887              ADD      r0,sp,#0x21c
000b8e  f7fffffe          BL       HED_SHA1_Init
;;;781        HED_SHA1_Block(out_hash160_v,(INT32U *)std_SHA1_inputLess64,sizeof(std_SHA1_inputLess64));
000b92  223a              MOVS     r2,#0x3a
000b94  a965              ADD      r1,sp,#0x194
000b96  a887              ADD      r0,sp,#0x21c
000b98  f7fffffe          BL       HED_SHA1_Block
;;;782        
;;;783        //1-2.check sha1 output data
;;;784        ret = memcmp(out_hash160_v, std_SHA1_outputLess64, 20);
000b9c  2214              MOVS     r2,#0x14
000b9e  a960              ADD      r1,sp,#0x180
000ba0  a887              ADD      r0,sp,#0x21c
000ba2  f7fffffe          BL       memcmp
000ba6  b2c6              UXTB     r6,r0
;;;785        if (ret !=0 )
000ba8  2e00              CMP      r6,#0
000baa  d006              BEQ      |L1.3002|
;;;786        {
;;;787            SW1SW2 = 0x6F01;
000bac  488c              LDR      r0,|L1.3552|
000bae  1fc0              SUBS     r0,r0,#7
000bb0  498c              LDR      r1,|L1.3556|
000bb2  8008              STRH     r0,[r1,#0]
                  |L1.2996|
;;;788            return;
;;;789        }
;;;790        
;;;791        /*2. SHA1 , data length more than 64Bytes */    
;;;792        len = sizeof(std_SHA_inputMore64);    
;;;793        HED_SHA1_Init(out_hash160_v);                  //init
;;;794        inPtr = (INT32U *)std_SHA_inputMore64;
;;;795        for(;len >= 64;)
;;;796        {
;;;797            HED_SHA1_Block(out_hash160_v,inPtr,64);         //ProcBlock
;;;798            len -=64;
;;;799            inPtr += 16;
;;;800        }
;;;801        HED_SHA1_Block(out_hash160_v,inPtr,len);       //FinalBlock
;;;802        
;;;803        ret = memcmp(out_hash160_v, std_SHA1_outputMore64, 20);
;;;804        if (ret !=0 )
;;;805        {
;;;806            SW1SW2 = 0x6F02;
;;;807            return;
;;;808        }
;;;809    
;;;810        /*3. SHA1 , data length equal to 64Bytes */
;;;811        inPtr = (INT32U *)std_SHA1_input64;
;;;812        HED_SHA1_Init(out_hash160_v);
;;;813        HED_SHA1_Block(out_hash160_v,inPtr,64);         //ProcBlock
;;;814        HED_SHA1_Block(out_hash160_v,inPtr+16,0);      //FinalBlock
;;;815        
;;;816        /*4. SHA256 , data length more than 64Bytes */    
;;;817        len = sizeof(std_SHA_inputMore64);    
;;;818        HED_SHA256_Init(out_hash256_v);                  //init
;;;819        inPtr = (INT32U *)std_SHA_inputMore64;
;;;820        for(;len >= 64;)
;;;821        {
;;;822            HED_SHA256_Block(out_hash256_v,inPtr,64);         //ProcBlock
;;;823            len -=64;
;;;824            inPtr += 16;
;;;825        }
;;;826        HED_SHA256_Block(out_hash256_v,inPtr,len);       //FinalBlock
;;;827        
;;;828        ret = memcmp(out_hash256_v, std_SHA256_outputMore64, 32);
;;;829        if (ret !=0 )
;;;830        {
;;;831            SW1SW2 = 0x6F03;
;;;832            return;
;;;833        }
;;;834    
;;;835        /*5. SHA256 , data length equal to 64Bytes */
;;;836        inPtr = (INT32U *)std_SHA1_input64;
;;;837        HED_SHA256_Init(out_hash256_v);
;;;838        HED_SHA256_Block(out_hash256_v,inPtr,64);         //ProcBlock
;;;839        HED_SHA256_Block(out_hash256_v,inPtr+16,0);      //FinalBlock
;;;840        
;;;841        /*6. SM3 , data length more than 64B */
;;;842        len = sizeof(std_SM3_inputMore64);    
;;;843        HED_SM3Initial(out_SM3_v);                  //init
;;;844        inPtr = (INT32U *)std_SM3_inputMore64;
;;;845        for(;len >= 64;)
;;;846        {
;;;847            HED_SM3Block(out_SM3_v,inPtr,64);         //ProcBlock
;;;848            len -=64;
;;;849            inPtr += 16;
;;;850        }
;;;851        HED_SM3Block(out_SM3_v,inPtr,len);       //FinalBlock
;;;852        ret = memcmp(out_SM3_v, std_SM3_outputMore64, 32);
;;;853        if (ret !=0 )
;;;854        {
;;;855            SW1SW2 = 0x6F04;
;;;856            return;
;;;857        }
;;;858        
;;;859        SW1SW2 = 0x9000;
;;;860    }
000bb4  b07f              ADD      sp,sp,#0x1fc
000bb6  b00f              ADD      sp,sp,#0x3c
000bb8  bd70              POP      {r4-r6,pc}
                  |L1.3002|
000bba  2484              MOVS     r4,#0x84              ;792
000bbc  a887              ADD      r0,sp,#0x21c          ;793
000bbe  f7fffffe          BL       HED_SHA1_Init
000bc2  ad3f              ADD      r5,sp,#0xfc           ;794
000bc4  e006              B        |L1.3028|
                  |L1.3014|
000bc6  2240              MOVS     r2,#0x40              ;797
000bc8  4629              MOV      r1,r5                 ;797
000bca  a887              ADD      r0,sp,#0x21c          ;797
000bcc  f7fffffe          BL       HED_SHA1_Block
000bd0  3c40              SUBS     r4,r4,#0x40           ;798
000bd2  3540              ADDS     r5,r5,#0x40           ;799
                  |L1.3028|
000bd4  2c40              CMP      r4,#0x40              ;795
000bd6  d2f6              BCS      |L1.3014|
000bd8  4622              MOV      r2,r4                 ;801
000bda  4629              MOV      r1,r5                 ;801
000bdc  a887              ADD      r0,sp,#0x21c          ;801
000bde  f7fffffe          BL       HED_SHA1_Block
000be2  2214              MOVS     r2,#0x14              ;803
000be4  a92a              ADD      r1,sp,#0xa8           ;803
000be6  a887              ADD      r0,sp,#0x21c          ;803
000be8  f7fffffe          BL       memcmp
000bec  b2c6              UXTB     r6,r0                 ;803
000bee  2e00              CMP      r6,#0                 ;804
000bf0  d004              BEQ      |L1.3068|
000bf2  487b              LDR      r0,|L1.3552|
000bf4  1f80              SUBS     r0,r0,#6              ;806
000bf6  497b              LDR      r1,|L1.3556|
000bf8  8008              STRH     r0,[r1,#0]            ;806
000bfa  e7db              B        |L1.2996|
                  |L1.3068|
000bfc  ad2f              ADD      r5,sp,#0xbc           ;811
000bfe  a887              ADD      r0,sp,#0x21c          ;812
000c00  f7fffffe          BL       HED_SHA1_Init
000c04  2240              MOVS     r2,#0x40              ;813
000c06  4629              MOV      r1,r5                 ;813
000c08  a887              ADD      r0,sp,#0x21c          ;813
000c0a  f7fffffe          BL       HED_SHA1_Block
000c0e  2200              MOVS     r2,#0                 ;814
000c10  4629              MOV      r1,r5                 ;814
000c12  3140              ADDS     r1,r1,#0x40           ;814
000c14  a887              ADD      r0,sp,#0x21c          ;814
000c16  f7fffffe          BL       HED_SHA1_Block
000c1a  2484              MOVS     r4,#0x84              ;817
000c1c  a87d              ADD      r0,sp,#0x1f4          ;818
000c1e  f7fffffe          BL       HED_SHA256_Init
000c22  ad3f              ADD      r5,sp,#0xfc           ;819
000c24  e006              B        |L1.3124|
                  |L1.3110|
000c26  2240              MOVS     r2,#0x40              ;822
000c28  4629              MOV      r1,r5                 ;822
000c2a  a87d              ADD      r0,sp,#0x1f4          ;822
000c2c  f7fffffe          BL       HED_SHA256_Block
000c30  3c40              SUBS     r4,r4,#0x40           ;823
000c32  3540              ADDS     r5,r5,#0x40           ;824
                  |L1.3124|
000c34  2c40              CMP      r4,#0x40              ;820
000c36  d2f6              BCS      |L1.3110|
000c38  4622              MOV      r2,r4                 ;826
000c3a  4629              MOV      r1,r5                 ;826
000c3c  a87d              ADD      r0,sp,#0x1f4          ;826
000c3e  f7fffffe          BL       HED_SHA256_Block
000c42  2220              MOVS     r2,#0x20              ;828
000c44  a922              ADD      r1,sp,#0x88           ;828
000c46  a87d              ADD      r0,sp,#0x1f4          ;828
000c48  f7fffffe          BL       memcmp
000c4c  b2c6              UXTB     r6,r0                 ;828
000c4e  2e00              CMP      r6,#0                 ;829
000c50  d004              BEQ      |L1.3164|
000c52  4863              LDR      r0,|L1.3552|
000c54  1f40              SUBS     r0,r0,#5              ;831
000c56  4963              LDR      r1,|L1.3556|
000c58  8008              STRH     r0,[r1,#0]            ;831
000c5a  e7ab              B        |L1.2996|
                  |L1.3164|
000c5c  ad2f              ADD      r5,sp,#0xbc           ;836
000c5e  a87d              ADD      r0,sp,#0x1f4          ;837
000c60  f7fffffe          BL       HED_SHA256_Init
000c64  2240              MOVS     r2,#0x40              ;838
000c66  4629              MOV      r1,r5                 ;838
000c68  a87d              ADD      r0,sp,#0x1f4          ;838
000c6a  f7fffffe          BL       HED_SHA256_Block
000c6e  2200              MOVS     r2,#0                 ;839
000c70  4629              MOV      r1,r5                 ;839
000c72  3140              ADDS     r1,r1,#0x40           ;839
000c74  a87d              ADD      r0,sp,#0x1f4          ;839
000c76  f7fffffe          BL       HED_SHA256_Block
000c7a  2461              MOVS     r4,#0x61              ;842
000c7c  a874              ADD      r0,sp,#0x1d0          ;843
000c7e  f7fffffe          BL       HED_SM3Initial
000c82  ad09              ADD      r5,sp,#0x24           ;844
000c84  e006              B        |L1.3220|
                  |L1.3206|
000c86  2240              MOVS     r2,#0x40              ;847
000c88  4629              MOV      r1,r5                 ;847
000c8a  a874              ADD      r0,sp,#0x1d0          ;847
000c8c  f7fffffe          BL       HED_SM3Block
000c90  3c40              SUBS     r4,r4,#0x40           ;848
000c92  3540              ADDS     r5,r5,#0x40           ;849
                  |L1.3220|
000c94  2c40              CMP      r4,#0x40              ;845
000c96  d2f6              BCS      |L1.3206|
000c98  4622              MOV      r2,r4                 ;851
000c9a  4629              MOV      r1,r5                 ;851
000c9c  a874              ADD      r0,sp,#0x1d0          ;851
000c9e  f7fffffe          BL       HED_SM3Block
000ca2  2220              MOVS     r2,#0x20              ;852
000ca4  a901              ADD      r1,sp,#4              ;852
000ca6  a874              ADD      r0,sp,#0x1d0          ;852
000ca8  f7fffffe          BL       memcmp
000cac  b2c6              UXTB     r6,r0                 ;852
000cae  2e00              CMP      r6,#0                 ;853
000cb0  d004              BEQ      |L1.3260|
000cb2  484b              LDR      r0,|L1.3552|
000cb4  1f00              SUBS     r0,r0,#4              ;855
000cb6  494b              LDR      r1,|L1.3556|
000cb8  8008              STRH     r0,[r1,#0]            ;855
000cba  e77b              B        |L1.2996|
                  |L1.3260|
000cbc  2009              MOVS     r0,#9                 ;859
000cbe  0300              LSLS     r0,r0,#12             ;859
000cc0  4948              LDR      r1,|L1.3556|
000cc2  8008              STRH     r0,[r1,#0]            ;859
000cc4  bf00              NOP      
000cc6  e775              B        |L1.2996|
;;;861    /************************************************* 
                          ENDP

                  cmd_GET_INFO PROC
;;;868    *************************************************/
;;;869    void cmd_GET_INFO(void)
000cc8  b570              PUSH     {r4-r6,lr}
;;;870    {
;;;871        INT8U p3,ret;
;;;872        
;;;873        /*no check P3 ,user can add it */    
;;;874        p3 = APDU_P3;
000cca  4884              LDR      r0,|L1.3804|
000ccc  7905              LDRB     r5,[r0,#4]  ; SCIAPDUBuf
;;;875        SendINS(APDU_INS);//send INS
000cce  4601              MOV      r1,r0
000cd0  7848              LDRB     r0,[r1,#1]  ; SCIAPDUBuf
000cd2  f7fffffe          BL       SendINS
;;;876        
;;;877        /* according to P1, do*/
;;;878        switch (APDU_P1)
000cd6  4881              LDR      r0,|L1.3804|
000cd8  7880              LDRB     r0,[r0,#2]  ; SCIAPDUBuf
000cda  2801              CMP      r0,#1
000cdc  d006              BEQ      |L1.3308|
000cde  2802              CMP      r0,#2
000ce0  d01d              BEQ      |L1.3358|
000ce2  2803              CMP      r0,#3
000ce4  d020              BEQ      |L1.3368|
000ce6  2804              CMP      r0,#4
000ce8  d126              BNE      |L1.3384|
000cea  e021              B        |L1.3376|
                  |L1.3308|
;;;879        {
;;;880            case 0x01:
;;;881                ret = HED_RNG1Check();//RNG1 self-check if neccessary
000cec  f7fffffe          BL       HED_RNG1Check
000cf0  b2c4              UXTB     r4,r0
;;;882                if(ret == 1)
000cf2  2c01              CMP      r4,#1
000cf4  d104              BNE      |L1.3328|
;;;883                {
;;;884                    SW1SW2 = 0x6F00;
000cf6  206f              MOVS     r0,#0x6f
000cf8  0200              LSLS     r0,r0,#8
000cfa  493a              LDR      r1,|L1.3556|
000cfc  8008              STRH     r0,[r1,#0]
                  |L1.3326|
;;;885                    return;    
;;;886                }
;;;887                ret = HED_PokerCheck();
;;;888                if(ret == 1)
;;;889                {
;;;890                    SW1SW2 = 0x6F01;
;;;891                    return;    
;;;892                }            
;;;893                HED_GetRandom_Enhanced(SCIAPDUBuf,8);
;;;894                break;
;;;895                
;;;896            case 0x02:
;;;897                HED_GetRandom(SCIAPDUBuf,8);
;;;898                break;
;;;899            
;;;900            case 0x03:
;;;901                HED_GetFactoryCode(SCIAPDUBuf);
;;;902                break;        
;;;903                
;;;904            case 0x04:
;;;905                HED_GetChipId(SCIAPDUBuf);
;;;906                break;
;;;907                
;;;908            default:
;;;909                SW1SW2 = 0x6F00;
;;;910                return;    
;;;911        }
;;;912            
;;;913        SCILeLength = (p3 == 0 ? 256 : p3);
;;;914        SW1SW2 = 0x9000;    
;;;915    }
000cfe  bd70              POP      {r4-r6,pc}
                  |L1.3328|
000d00  f7fffffe          BL       HED_PokerCheck
000d04  b2c4              UXTB     r4,r0                 ;887
000d06  2c01              CMP      r4,#1                 ;888
000d08  d104              BNE      |L1.3348|
000d0a  4835              LDR      r0,|L1.3552|
000d0c  1fc0              SUBS     r0,r0,#7              ;890
000d0e  4935              LDR      r1,|L1.3556|
000d10  8008              STRH     r0,[r1,#0]            ;890
000d12  e7f4              B        |L1.3326|
                  |L1.3348|
000d14  2108              MOVS     r1,#8                 ;893
000d16  4871              LDR      r0,|L1.3804|
000d18  f7fffffe          BL       HED_GetRandom_Enhanced
000d1c  e011              B        |L1.3394|
                  |L1.3358|
000d1e  2108              MOVS     r1,#8                 ;897
000d20  486e              LDR      r0,|L1.3804|
000d22  f7fffffe          BL       HED_GetRandom
000d26  e00c              B        |L1.3394|
                  |L1.3368|
000d28  486c              LDR      r0,|L1.3804|
000d2a  f7fffffe          BL       HED_GetFactoryCode
000d2e  e008              B        |L1.3394|
                  |L1.3376|
000d30  486a              LDR      r0,|L1.3804|
000d32  f7fffffe          BL       HED_GetChipId
000d36  e004              B        |L1.3394|
                  |L1.3384|
000d38  206f              MOVS     r0,#0x6f              ;909
000d3a  0200              LSLS     r0,r0,#8              ;909
000d3c  4929              LDR      r1,|L1.3556|
000d3e  8008              STRH     r0,[r1,#0]            ;909
000d40  e7dd              B        |L1.3326|
                  |L1.3394|
000d42  bf00              NOP                            ;894
000d44  2d00              CMP      r5,#0                 ;913
000d46  d102              BNE      |L1.3406|
000d48  20ff              MOVS     r0,#0xff              ;913
000d4a  3001              ADDS     r0,#1                 ;913
000d4c  e000              B        |L1.3408|
                  |L1.3406|
000d4e  4628              MOV      r0,r5                 ;913
                  |L1.3408|
000d50  4963              LDR      r1,|L1.3808|
000d52  6008              STR      r0,[r1,#0]            ;913  ; SCILeLength
000d54  2009              MOVS     r0,#9                 ;914
000d56  0300              LSLS     r0,r0,#12             ;914
000d58  4922              LDR      r1,|L1.3556|
000d5a  8008              STRH     r0,[r1,#0]            ;914
000d5c  bf00              NOP      
000d5e  e7ce              B        |L1.3326|
;;;916    /************************************************* 
                          ENDP

                  cmd_NVM_ErWr PROC
;;;923    *************************************************/
;;;924    void cmd_NVM_ErWr(void)
000d60  b5f0              PUSH     {r4-r7,lr}
;;;925    {
000d62  b0ff              SUB      sp,sp,#0x1fc
000d64  b082              SUB      sp,sp,#8
;;;926        INT32U NVMAddr,ret;
;;;927        INT32U  i;
;;;928        INT32U  DataToNVM[128];
;;;929        INT8U * ptr;    
;;;930        
;;;931        SendINS(APDU_INS);//send INS       
000d66  495d              LDR      r1,|L1.3804|
000d68  7848              LDRB     r0,[r1,#1]  ; SCIAPDUBuf
000d6a  f7fffffe          BL       SendINS
;;;932        while(G_SCIRecieveIndex != (5+APDU_P3));
000d6e  bf00              NOP      
                  |L1.3440|
000d70  485a              LDR      r0,|L1.3804|
000d72  7900              LDRB     r0,[r0,#4]  ; SCIAPDUBuf
000d74  1d40              ADDS     r0,r0,#5
000d76  495b              LDR      r1,|L1.3812|
000d78  8809              LDRH     r1,[r1,#0]  ; G_SCIRecieveIndex
000d7a  4288              CMP      r0,r1
000d7c  d1f8              BNE      |L1.3440|
;;;933        
;;;934        if(APDU_P3 < 0x04)
000d7e  4857              LDR      r0,|L1.3804|
000d80  7900              LDRB     r0,[r0,#4]  ; SCIAPDUBuf
000d82  2804              CMP      r0,#4
000d84  da06              BGE      |L1.3476|
;;;935        {
;;;936            SW1SW2 = 0x6F01;
000d86  4816              LDR      r0,|L1.3552|
000d88  1fc0              SUBS     r0,r0,#7
000d8a  4916              LDR      r1,|L1.3556|
000d8c  8008              STRH     r0,[r1,#0]
                  |L1.3470|
;;;937            return;
;;;938        }    
;;;939        
;;;940        memcpy(DataToNVM,SCIAPDUBuf+5+4,APDU_P3-4);
;;;941        
;;;942        NVMAddr = ((INT32U)SCIAPDUBuf[5])<<24 | ((INT32U)SCIAPDUBuf[6])<<16 | ((INT32U)SCIAPDUBuf[7])<<8 | SCIAPDUBuf[8];//NVM OPERATION ADDRESS
;;;943        NVMAddr &= ~0x1FF;//page aligned
;;;944        /*NVM address valid or not*/
;;;945        if((NVMAddr < DemoNVM_START_ADDR) || (NVMAddr >= DemoNVM_END_ADDR))
;;;946        {
;;;947            SW1SW2 = 0x6F01;
;;;948            return;
;;;949        }   
;;;950        
;;;951        ptr = (INT8U *)DataToNVM;
;;;952        for(i=APDU_P3-4;i<0x200;i++)
;;;953        {
;;;954            *(ptr+i) = 0xFF;//padding data
;;;955        }
;;;956        
;;;957         /*NVM API's para DataLen means word number */
;;;958         /*CHIP's NVM ADDR start at 0x0,but Demo only cover 200k-400k*/
;;;959        
;;;960        do
;;;961        {
;;;962            ret = HED_FlashPageInit_St(NVMAddr);
;;;963            ret |= HED_FlashErWrPage_St(NVMAddr,DataToNVM);
;;;964        }while(ret == ~0);
;;;965        
;;;966        ret = memcmp((INT8U *)DataToNVM, (INT8U *)NVMAddr, 0x200);
;;;967        if (ret !=0 )
;;;968        {
;;;969            SW1SW2 = 0x6F02;
;;;970            return;
;;;971        }    
;;;972        
;;;973        ret = HED_HEFlash_Init();
;;;974        if(ret == ~0)
;;;975        {
;;;976            HED_HEFlashMapReset();
;;;977        }
;;;978        HED_HEFlashEWPage(HEFlash_Addr,DataToNVM);     
;;;979        ret = memcmp((INT8U *)DataToNVM, (INT8U *)HEFlash_Addr, 0x200);
;;;980        if (ret !=0 )
;;;981        {
;;;982            SW1SW2 = 0x6F03;
;;;983            return;
;;;984        }
;;;985            
;;;986        SW1SW2 = 0x9000;
;;;987    }
000d8e  b07f              ADD      sp,sp,#0x1fc
000d90  b002              ADD      sp,sp,#8
000d92  bdf0              POP      {r4-r7,pc}
                  |L1.3476|
000d94  4851              LDR      r0,|L1.3804|
000d96  7900              LDRB     r0,[r0,#4]            ;940  ; SCIAPDUBuf
000d98  1f02              SUBS     r2,r0,#4              ;940
000d9a  4950              LDR      r1,|L1.3804|
000d9c  3109              ADDS     r1,r1,#9              ;940
000d9e  a801              ADD      r0,sp,#4              ;940
000da0  f7fffffe          BL       __aeabi_memcpy
000da4  484d              LDR      r0,|L1.3804|
000da6  7940              LDRB     r0,[r0,#5]            ;942  ; SCIAPDUBuf
000da8  0600              LSLS     r0,r0,#24             ;942
000daa  494c              LDR      r1,|L1.3804|
000dac  7989              LDRB     r1,[r1,#6]            ;942  ; SCIAPDUBuf
000dae  0409              LSLS     r1,r1,#16             ;942
000db0  4308              ORRS     r0,r0,r1              ;942
000db2  494a              LDR      r1,|L1.3804|
000db4  79c9              LDRB     r1,[r1,#7]            ;942  ; SCIAPDUBuf
000db6  0209              LSLS     r1,r1,#8              ;942
000db8  4308              ORRS     r0,r0,r1              ;942
000dba  4948              LDR      r1,|L1.3804|
000dbc  7a09              LDRB     r1,[r1,#8]            ;942  ; SCIAPDUBuf
000dbe  4308              ORRS     r0,r0,r1              ;942
000dc0  4604              MOV      r4,r0                 ;942
000dc2  0a64              LSRS     r4,r4,#9              ;943
000dc4  0264              LSLS     r4,r4,#9              ;943
000dc6  2019              MOVS     r0,#0x19              ;945
000dc8  0300              LSLS     r0,r0,#12             ;945
000dca  4284              CMP      r4,r0                 ;945
000dcc  d302              BCC      |L1.3540|
000dce  0080              LSLS     r0,r0,#2              ;945
000dd0  4284              CMP      r4,r0                 ;945
000dd2  d304              BCC      |L1.3550|
                  |L1.3540|
000dd4  4802              LDR      r0,|L1.3552|
000dd6  1fc0              SUBS     r0,r0,#7              ;947
000dd8  4902              LDR      r1,|L1.3556|
000dda  8008              STRH     r0,[r1,#0]            ;947
000ddc  e7d7              B        |L1.3470|
                  |L1.3550|
000dde  e083              B        |L1.3816|
                  |L1.3552|
                          DCD      0x00006f08
                  |L1.3556|
                          DCD      SW1SW2
                  |L1.3560|
                          DCD      0x00000530
                  |L1.3564|
                          DCD      0x00000570
                  |L1.3568|
                          DCD      0x00000590
                  |L1.3572|
000df4  0a0feaaa          DCB      "\n",15,234,170,"Sf]L",140,179,133,"f",223,"N",230,31,"'"
000df8  53665d4c
000dfc  8cb38566
000e00  df4ee61f
000e04  27      
000e05  3bb63483          DCB      ";",182,"4",131,"BAX\b",23,"<U",149,"K",254,142,197,203,186
000e09  42415808
000e0d  173c5595
000e11  4bfe8ec5
000e15  cbba    
000e17  f676b802          DCB      246,"v",184,2,171,216,148,"E",136,"Li",127,128,129,"R",28
000e1b  abd89445
000e1f  884c697f
000e23  8081521c
000e27  0b4a8830          DCB      "\vJ",136,"0",14,"%F",0
000e2b  0e254600
000e2f  00                DCB      0
                  |L1.3632|
000e30  348c74d1          DCB      "4",140,"t",209,238,179,"3I",155,143,226,194,208,"]",191
000e34  eeb33349
000e38  9b8fe2c2
000e3c  d05dbf  
000e3f  d09ba36d          DCB      208,155,163,"m*"
000e43  2a      
                  |L1.3652|
                          DCD      ||.constdata||+0xae4
                  |L1.3656|
000e48  0a0feaaa          DCB      "\n",15,234,170,"Sf]L",140,179,133,"f",223,"N",230,31,"'"
000e4c  53665d4c
000e50  8cb38566
000e54  df4ee61f
000e58  27      
000e59  3bb63483          DCB      ";",182,"4",131,"BAX\b",23,"<U",149,"K",254,142,197,203,186
000e5d  42415808
000e61  173c5595
000e65  4bfe8ec5
000e69  cbba    
000e6b  f676b802          DCB      246,"v",184,2,171,216,148,"E",136,"Li",127,128,129,"R",28
000e6f  abd89445
000e73  884c697f
000e77  8081521c
000e7b  0b4a8830          DCB      "\vJ",136,"0",14,"%F",0
000e7f  0e254600
000e83  00                DCB      0
000e84  00                DCB      0
000e85  00                DCB      0
000e86  00                DCB      0
000e87  00                DCB      0
                  |L1.3720|
000e88  fb74ddeb          DCB      251,"t",221,235,219,"@4\\",16,192,"\t",139,128,"=%5",241
000e8c  db40345c
000e90  10c0098b
000e94  803d2535
000e98  f1      
000e99  b943d6            DCB      185,"C",214
                  |L1.3740|
000e9c  3921e95e          DCB      "9!",233,"^",202,226,"3",179,",",184,"H",252,"E",243,137
000ea0  cae233b3
000ea4  2cb848fc
000ea8  45f389  
000eab  a784f178          DCB      167,132,241,"x{",242,"A.",157,"I%",219,"#JJ",222,161
000eaf  7bf2412e
000eb3  9d4925db
000eb7  234a4ade
000ebb  a1      
                  |L1.3772|
000ebc  7cf61349          DCB      "|",246,19,"Iu",185,214,"wG+",152,"L",190,"J",210,"`",252
000ec0  75b9d677
000ec4  472b984c
000ec8  be4ad260
000ecc  fc      
000ecd  8a37ad3e          DCB      138,"7",173,">",150,"N",166,226,2,197,185,226,151,"&D"
000ed1  964ea6e2
000ed5  02c5b9e2
000ed9  972644  
                  |L1.3804|
                          DCD      SCIAPDUBuf
                  |L1.3808|
                          DCD      SCILeLength
                  |L1.3812|
                          DCD      G_SCIRecieveIndex
                  |L1.3816|
000ee8  af01              ADD      r7,sp,#4              ;951
000eea  4896              LDR      r0,|L1.4420|
000eec  7900              LDRB     r0,[r0,#4]            ;952  ; SCIAPDUBuf
000eee  1f06              SUBS     r6,r0,#4              ;952
000ef0  e002              B        |L1.3832|
                  |L1.3826|
000ef2  20ff              MOVS     r0,#0xff              ;954
000ef4  55b8              STRB     r0,[r7,r6]            ;954
000ef6  1c76              ADDS     r6,r6,#1              ;952
                  |L1.3832|
000ef8  2001              MOVS     r0,#1                 ;952
000efa  0240              LSLS     r0,r0,#9              ;952
000efc  4286              CMP      r6,r0                 ;952
000efe  d3f8              BCC      |L1.3826|
000f00  bf00              NOP                            ;960
                  |L1.3842|
000f02  4620              MOV      r0,r4                 ;962
000f04  f7fffffe          BL       HED_FlashPageInit_St
000f08  4605              MOV      r5,r0                 ;962
000f0a  a901              ADD      r1,sp,#4              ;963
000f0c  4620              MOV      r0,r4                 ;963
000f0e  f7fffffe          BL       HED_FlashErWrPage_St
000f12  4305              ORRS     r5,r5,r0              ;963
000f14  1c68              ADDS     r0,r5,#1              ;964
000f16  d0f4              BEQ      |L1.3842|
000f18  2201              MOVS     r2,#1                 ;966
000f1a  0252              LSLS     r2,r2,#9              ;966
000f1c  4621              MOV      r1,r4                 ;966
000f1e  a801              ADD      r0,sp,#4              ;966
000f20  f7fffffe          BL       memcmp
000f24  4605              MOV      r5,r0                 ;966
000f26  2d00              CMP      r5,#0                 ;967
000f28  d003              BEQ      |L1.3890|
000f2a  4887              LDR      r0,|L1.4424|
000f2c  4987              LDR      r1,|L1.4428|
000f2e  8008              STRH     r0,[r1,#0]            ;969
000f30  e72d              B        |L1.3470|
                  |L1.3890|
000f32  f7fffffe          BL       HED_HEFlash_Init
000f36  4605              MOV      r5,r0                 ;973
000f38  1c68              ADDS     r0,r5,#1              ;974
000f3a  d101              BNE      |L1.3904|
000f3c  f7fffffe          BL       HED_HEFlashMapReset
                  |L1.3904|
000f40  a901              ADD      r1,sp,#4              ;978
000f42  2047              MOVS     r0,#0x47              ;978
000f44  0380              LSLS     r0,r0,#14             ;978
000f46  f7fffffe          BL       HED_HEFlashEWPage
000f4a  2201              MOVS     r2,#1                 ;979
000f4c  0252              LSLS     r2,r2,#9              ;979
000f4e  2147              MOVS     r1,#0x47              ;979
000f50  0389              LSLS     r1,r1,#14             ;979
000f52  a801              ADD      r0,sp,#4              ;979
000f54  f7fffffe          BL       memcmp
000f58  4605              MOV      r5,r0                 ;979
000f5a  2d00              CMP      r5,#0                 ;980
000f5c  d004              BEQ      |L1.3944|
000f5e  487a              LDR      r0,|L1.4424|
000f60  1c40              ADDS     r0,r0,#1              ;982
000f62  497a              LDR      r1,|L1.4428|
000f64  8008              STRH     r0,[r1,#0]            ;982
000f66  e712              B        |L1.3470|
                  |L1.3944|
000f68  2009              MOVS     r0,#9                 ;986
000f6a  0300              LSLS     r0,r0,#12             ;986
000f6c  4977              LDR      r1,|L1.4428|
000f6e  8008              STRH     r0,[r1,#0]            ;986
000f70  bf00              NOP      
000f72  e70c              B        |L1.3470|
;;;988    /************************************************* 
                          ENDP

                  cmd_back2Loader PROC
;;;995    *************************************************/
;;;996    void cmd_back2Loader(void)
000f74  b500              PUSH     {lr}
;;;997    {
000f76  b0ff              SUB      sp,sp,#0x1fc
000f78  b082              SUB      sp,sp,#8
;;;998        INT32U  DataToNVM[128];
;;;999        
;;;1000       memcpy((INT8U*)DataToNVM,(INT8U*)Card_Status_ADDR,0x200);
000f7a  2201              MOVS     r2,#1
000f7c  0252              LSLS     r2,r2,#9
000f7e  4974              LDR      r1,|L1.4432|
000f80  a801              ADD      r0,sp,#4
000f82  f7fffffe          BL       __aeabi_memcpy4
;;;1001       DataToNVM[0] = 0xB639A527;
000f86  4873              LDR      r0,|L1.4436|
000f88  9001              STR      r0,[sp,#4]
;;;1002       
;;;1003       HED_FlashErWrPage_St(Card_Status_ADDR,DataToNVM);
000f8a  a901              ADD      r1,sp,#4
000f8c  4870              LDR      r0,|L1.4432|
000f8e  f7fffffe          BL       HED_FlashErWrPage_St
;;;1004       SW1SW2 = 0x9000;
000f92  2009              MOVS     r0,#9
000f94  0300              LSLS     r0,r0,#12
000f96  496d              LDR      r1,|L1.4428|
000f98  8008              STRH     r0,[r1,#0]
;;;1005   }
000f9a  b07f              ADD      sp,sp,#0x1fc
000f9c  b002              ADD      sp,sp,#8
000f9e  bd00              POP      {pc}
;;;1006   /************************************************* 
                          ENDP

                  cmd_M1_Opt PROC
;;;1013   *************************************************/
;;;1014   void cmd_M1_Opt(void)
000fa0  b510              PUSH     {r4,lr}
;;;1015   {
000fa2  b090              SUB      sp,sp,#0x40
;;;1016   	INT8U result;
;;;1017   	INT32U block0Data[4]={0x00010203, 0x04050607, 0x08090A0B, 0x0C0D0E0F};
000fa4  4b6c              LDR      r3,|L1.4440|
000fa6  cb0f              LDM      r3,{r0-r3}
000fa8  ac0c              ADD      r4,sp,#0x30
000faa  c40f              STM      r4!,{r0-r3}
;;;1018   	INT32U pwData[6]={0x0B545707, 0X45FE3AE7, 0x01020304, 0X05060708, 0x090a0B0C, 0X0D0E1F23};
000fac  2218              MOVS     r2,#0x18
000fae  496a              LDR      r1,|L1.4440|
000fb0  3110              ADDS     r1,r1,#0x10
000fb2  a806              ADD      r0,sp,#0x18
000fb4  f7fffffe          BL       __aeabi_memcpy4
;;;1019   	INT32U pwData2[6]={0x0B545707, 0X45FE3AE7, 0x0, 0x0, 0x0, 0x0};
000fb8  2218              MOVS     r2,#0x18
000fba  4967              LDR      r1,|L1.4440|
000fbc  3128              ADDS     r1,r1,#0x28
000fbe  4668              MOV      r0,sp
000fc0  f7fffffe          BL       __aeabi_memcpy4
;;;1020   	
;;;1021   	G_cM1_PwAlgType = 0;//M1 Standard PassWord Algorithm type
000fc4  2000              MOVS     r0,#0
000fc6  4965              LDR      r1,|L1.4444|
000fc8  7008              STRB     r0,[r1,#0]
;;;1022   
;;;1023   	result = HED_M1_InitBlock(block0Data);
000fca  a80c              ADD      r0,sp,#0x30
000fcc  f7fffffe          BL       HED_M1_InitBlock
000fd0  b2c4              UXTB     r4,r0
;;;1024       result |= HED_M1_ResetSector(1);
000fd2  2001              MOVS     r0,#1
000fd4  f7fffffe          BL       HED_M1_ResetSector
000fd8  4320              ORRS     r0,r0,r4
000fda  b2c4              UXTB     r4,r0
;;;1025   	if(result != 0)
000fdc  2c00              CMP      r4,#0
000fde  d005              BEQ      |L1.4076|
;;;1026       {
;;;1027           SW1SW2 = 0x6F01;
000fe0  4859              LDR      r0,|L1.4424|
000fe2  1e40              SUBS     r0,r0,#1
000fe4  4959              LDR      r1,|L1.4428|
000fe6  8008              STRH     r0,[r1,#0]
                  |L1.4072|
;;;1028           return;
;;;1029       }   
;;;1030       
;;;1031   	result = HED_M1_PwWriteBlock (pwData, 2);
;;;1032   	if(result != 0)
;;;1033       {
;;;1034           SW1SW2 = 0x6F02;
;;;1035           return;
;;;1036       }
;;;1037   	
;;;1038   	result = HED_M1_PwReadBlock (pwData2, 2);
;;;1039   	if(result != 0)
;;;1040       {
;;;1041           SW1SW2 = 0x6F03;
;;;1042           return;
;;;1043       }
;;;1044   		
;;;1045   	if(memcmp(pwData2, pwData, 24) !=0)
;;;1046   	{
;;;1047           SW1SW2 = 0x6F03;
;;;1048           return;
;;;1049   	}
;;;1050       SW1SW2 = 0x9000;
;;;1051   }
000fe8  b010              ADD      sp,sp,#0x40
000fea  bd10              POP      {r4,pc}
                  |L1.4076|
000fec  2102              MOVS     r1,#2                 ;1031
000fee  a806              ADD      r0,sp,#0x18           ;1031
000ff0  f7fffffe          BL       HED_M1_PwWriteBlock
000ff4  b2c4              UXTB     r4,r0                 ;1031
000ff6  2c00              CMP      r4,#0                 ;1032
000ff8  d003              BEQ      |L1.4098|
000ffa  4853              LDR      r0,|L1.4424|
000ffc  4953              LDR      r1,|L1.4428|
000ffe  8008              STRH     r0,[r1,#0]            ;1034
001000  e7f2              B        |L1.4072|
                  |L1.4098|
001002  2102              MOVS     r1,#2                 ;1038
001004  4668              MOV      r0,sp                 ;1038
001006  f7fffffe          BL       HED_M1_PwReadBlock
00100a  b2c4              UXTB     r4,r0                 ;1038
00100c  2c00              CMP      r4,#0                 ;1039
00100e  d004              BEQ      |L1.4122|
001010  484d              LDR      r0,|L1.4424|
001012  1c40              ADDS     r0,r0,#1              ;1041
001014  494d              LDR      r1,|L1.4428|
001016  8008              STRH     r0,[r1,#0]            ;1041
001018  e7e6              B        |L1.4072|
                  |L1.4122|
00101a  2218              MOVS     r2,#0x18              ;1045
00101c  a906              ADD      r1,sp,#0x18           ;1045
00101e  4668              MOV      r0,sp                 ;1045
001020  f7fffffe          BL       memcmp
001024  2800              CMP      r0,#0                 ;1045
001026  d004              BEQ      |L1.4146|
001028  4847              LDR      r0,|L1.4424|
00102a  1c40              ADDS     r0,r0,#1              ;1047
00102c  4947              LDR      r1,|L1.4428|
00102e  8008              STRH     r0,[r1,#0]            ;1047
001030  e7da              B        |L1.4072|
                  |L1.4146|
001032  2009              MOVS     r0,#9                 ;1050
001034  0300              LSLS     r0,r0,#12             ;1050
001036  4945              LDR      r1,|L1.4428|
001038  8008              STRH     r0,[r1,#0]            ;1050
00103a  bf00              NOP      
00103c  e7d4              B        |L1.4072|
;;;1052   /****************************************************************************
                          ENDP

                  cmd_TerminalCapa PROC
;;;1059   ****************************************************************************/
;;;1060   void cmd_TerminalCapa(void)
00103e  b510              PUSH     {r4,lr}
;;;1061   {
;;;1062       SendINS(APDU_INS);
001040  4940              LDR      r1,|L1.4420|
001042  7848              LDRB     r0,[r1,#1]  ; SCIAPDUBuf
001044  f7fffffe          BL       SendINS
;;;1063       while(G_SCIRecieveIndex != 5+APDU_P3);
001048  bf00              NOP      
                  |L1.4170|
00104a  483e              LDR      r0,|L1.4420|
00104c  7900              LDRB     r0,[r0,#4]  ; SCIAPDUBuf
00104e  1d40              ADDS     r0,r0,#5
001050  4943              LDR      r1,|L1.4448|
001052  8809              LDRH     r1,[r1,#0]  ; G_SCIRecieveIndex
001054  4288              CMP      r0,r1
001056  d1f8              BNE      |L1.4170|
;;;1064   
;;;1065       if (SYSINFST & BIT2)//swp interface not detected
001058  4842              LDR      r0,|L1.4452|
00105a  6800              LDR      r0,[r0,#0]
00105c  2104              MOVS     r1,#4
00105e  4208              TST      r0,r1
001060  d00e              BEQ      |L1.4224|
;;;1066       {		
;;;1067           SYSPUDCON |= BIT30;
001062  4840              LDR      r0,|L1.4452|
001064  6940              LDR      r0,[r0,#0x14]
001066  0709              LSLS     r1,r1,#28
001068  4308              ORRS     r0,r0,r1
00106a  493e              LDR      r1,|L1.4452|
00106c  6148              STR      r0,[r1,#0x14]
;;;1068           SYSCLKCLR |= BIT20;		
00106e  483d              LDR      r0,|L1.4452|
001070  3080              ADDS     r0,r0,#0x80
001072  6840              LDR      r0,[r0,#4]
001074  2101              MOVS     r1,#1
001076  0509              LSLS     r1,r1,#20
001078  4308              ORRS     r0,r0,r1
00107a  493a              LDR      r1,|L1.4452|
00107c  3180              ADDS     r1,r1,#0x80
00107e  6048              STR      r0,[r1,#4]
                  |L1.4224|
;;;1069       }
;;;1070       SW1SW2 = 0x9000;
001080  2009              MOVS     r0,#9
001082  0300              LSLS     r0,r0,#12
001084  4931              LDR      r1,|L1.4428|
001086  8008              STRH     r0,[r1,#0]
;;;1071   }
001088  bd10              POP      {r4,pc}
;;;1072   /****************************************************************************
                          ENDP

                  cmd_getResponse PROC
;;;1079   ****************************************************************************/
;;;1080   void cmd_getResponse(void)
00108a  b510              PUSH     {r4,lr}
;;;1081   {
;;;1082   	INT32U i;
;;;1083   
;;;1084   	SCIAPDUBuf[0] = 0x61;
00108c  2061              MOVS     r0,#0x61
00108e  492d              LDR      r1,|L1.4420|
001090  7008              STRB     r0,[r1,#0]
;;;1085   	SCIAPDUBuf[1] = 0x12;
001092  2012              MOVS     r0,#0x12
001094  7048              STRB     r0,[r1,#1]
;;;1086   	SCIAPDUBuf[2] = 0x12;
001096  7088              STRB     r0,[r1,#2]
;;;1087   	SCIAPDUBuf[3] = 0x4F;
001098  204f              MOVS     r0,#0x4f
00109a  70c8              STRB     r0,[r1,#3]
;;;1088   	SCIAPDUBuf[4] = 0x10;	
00109c  2010              MOVS     r0,#0x10
00109e  7108              STRB     r0,[r1,#4]
;;;1089   	for(i=0;i<16;i++)
0010a0  2400              MOVS     r4,#0
0010a2  e003              B        |L1.4268|
                  |L1.4260|
;;;1090   	{
;;;1091   		SCIAPDUBuf[5+i] = i;
0010a4  1d60              ADDS     r0,r4,#5
0010a6  4a27              LDR      r2,|L1.4420|
0010a8  5414              STRB     r4,[r2,r0]
0010aa  1c64              ADDS     r4,r4,#1              ;1089
                  |L1.4268|
0010ac  2c10              CMP      r4,#0x10              ;1089
0010ae  d3f9              BCC      |L1.4260|
;;;1092   	}
;;;1093       
;;;1094   	SCILeLength = 0x15;
0010b0  2015              MOVS     r0,#0x15
0010b2  492d              LDR      r1,|L1.4456|
0010b4  6008              STR      r0,[r1,#0]  ; SCILeLength
;;;1095       SendINS(0xC0);//case 2 APDU
0010b6  20c0              MOVS     r0,#0xc0
0010b8  f7fffffe          BL       SendINS
;;;1096       SW1SW2 = 0x9000;
0010bc  2009              MOVS     r0,#9
0010be  0300              LSLS     r0,r0,#12
0010c0  4922              LDR      r1,|L1.4428|
0010c2  8008              STRH     r0,[r1,#0]
;;;1097   }
0010c4  bd10              POP      {r4,pc}
;;;1098   /****************************************************************************
                          ENDP

                  cmd_selectFile PROC
;;;1105   ****************************************************************************/
;;;1106   void cmd_selectFile(void)
0010c6  b510              PUSH     {r4,lr}
;;;1107   {
;;;1108       SendINS(APDU_INS);
0010c8  491e              LDR      r1,|L1.4420|
0010ca  7848              LDRB     r0,[r1,#1]  ; SCIAPDUBuf
0010cc  f7fffffe          BL       SendINS
;;;1109       while(G_SCIRecieveIndex != 5+APDU_P3);	    
0010d0  bf00              NOP      
                  |L1.4306|
0010d2  481c              LDR      r0,|L1.4420|
0010d4  7900              LDRB     r0,[r0,#4]  ; SCIAPDUBuf
0010d6  1d40              ADDS     r0,r0,#5
0010d8  4921              LDR      r1,|L1.4448|
0010da  8809              LDRH     r1,[r1,#0]  ; G_SCIRecieveIndex
0010dc  4288              CMP      r0,r1
0010de  d1f8              BNE      |L1.4306|
;;;1110   	if(SCIAPDUBuf[4] == 0x02)
0010e0  4818              LDR      r0,|L1.4420|
0010e2  7900              LDRB     r0,[r0,#4]  ; SCIAPDUBuf
0010e4  2802              CMP      r0,#2
0010e6  d103              BNE      |L1.4336|
;;;1111       {
;;;1112           SW1SW2 = 0x6115; 
0010e8  4820              LDR      r0,|L1.4460|
0010ea  4918              LDR      r1,|L1.4428|
0010ec  8008              STRH     r0,[r1,#0]
0010ee  e003              B        |L1.4344|
                  |L1.4336|
;;;1113       }
;;;1114       else
;;;1115       {
;;;1116           SW1SW2 = 0x9000; 
0010f0  2009              MOVS     r0,#9
0010f2  0300              LSLS     r0,r0,#12
0010f4  4915              LDR      r1,|L1.4428|
0010f6  8008              STRH     r0,[r1,#0]
                  |L1.4344|
;;;1117       }
;;;1118   }
0010f8  bd10              POP      {r4,pc}
;;;1119   //command list
                          ENDP

                  SCIAPDU_Dispatch PROC
;;;1142   *************************************************/
;;;1143   void SCIAPDU_Dispatch(void)
0010fa  b510              PUSH     {r4,lr}
;;;1144   {
;;;1145       INT8U i;
;;;1146       
;;;1147   	SW1SW2 = 0x6D00;
0010fc  206d              MOVS     r0,#0x6d
0010fe  0200              LSLS     r0,r0,#8
001100  4912              LDR      r1,|L1.4428|
001102  8008              STRH     r0,[r1,#0]
;;;1148       SCILeLength = 0x00;    
001104  2000              MOVS     r0,#0
001106  4918              LDR      r1,|L1.4456|
001108  6008              STR      r0,[r1,#0]  ; SCILeLength
;;;1149       
;;;1150       for(i=0;i<(sizeof(CMD_INSList)/sizeof(COMMANDLIST));i++)
00110a  2400              MOVS     r4,#0
00110c  e00e              B        |L1.4396|
                  |L1.4366|
;;;1151       {
;;;1152       	if(CMD_INSList[i].ins == APDU_INS)
00110e  00e0              LSLS     r0,r4,#3
001110  4917              LDR      r1,|L1.4464|
001112  5c08              LDRB     r0,[r1,r0]
001114  490b              LDR      r1,|L1.4420|
001116  7849              LDRB     r1,[r1,#1]  ; SCIAPDUBuf
001118  4288              CMP      r0,r1
00111a  d105              BNE      |L1.4392|
;;;1153       	{
;;;1154       		CMD_INSList[i].func();
00111c  00e1              LSLS     r1,r4,#3
00111e  4a14              LDR      r2,|L1.4464|
001120  1889              ADDS     r1,r1,r2
001122  6848              LDR      r0,[r1,#4]
001124  4780              BLX      r0
;;;1155       		break;
001126  e003              B        |L1.4400|
                  |L1.4392|
001128  1c60              ADDS     r0,r4,#1              ;1150
00112a  b2c4              UXTB     r4,r0                 ;1150
                  |L1.4396|
00112c  2c0c              CMP      r4,#0xc               ;1150
00112e  d3ee              BCC      |L1.4366|
                  |L1.4400|
001130  bf00              NOP      
;;;1156       	}                           			
;;;1157       }
;;;1158       
;;;1159       SCI_WaitRx(0x00);//prepare to Rx next APDU
001132  2000              MOVS     r0,#0
001134  f7fffffe          BL       SCI_WaitRx
;;;1160       SCI_StopTx60();
001138  f7fffffe          BL       SCI_StopTx60
;;;1161   	SCI_StartTx_INT(0);//Tx Le data or SW1SW2 in int mode    
00113c  2000              MOVS     r0,#0
00113e  f7fffffe          BL       SCI_StartTx_INT
;;;1162   }
001142  bd10              POP      {r4,pc}
;;;1163   
                          ENDP

                  |L1.4420|
                          DCD      SCIAPDUBuf
                  |L1.4424|
                          DCD      0x00006f02
                  |L1.4428|
                          DCD      SW1SW2
                  |L1.4432|
                          DCD      0x1fff8000
                  |L1.4436|
                          DCD      0xb639a527
                  |L1.4440|
                          DCD      ||.constdata||+0x91c
                  |L1.4444|
                          DCD      G_cM1_PwAlgType
                  |L1.4448|
                          DCD      G_SCIRecieveIndex
                  |L1.4452|
                          DCD      0x50007180
                  |L1.4456|
                          DCD      SCILeLength
                  |L1.4460|
                          DCD      0x00006115
                  |L1.4464|
                          DCD      CMD_INSList

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  G_output
                          %        400

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CMD_INSList
000000  f0000000          DCB      0xf0,0x00,0x00,0x00
                          DCD      cmd_Symmetry_ALG
000008  f2000000          DCB      0xf2,0x00,0x00,0x00
                          DCD      cmd_CRC_Calculate
000010  f4000000          DCB      0xf4,0x00,0x00,0x00
                          DCD      cmd_RSA_ALG
000018  f6000000          DCB      0xf6,0x00,0x00,0x00
                          DCD      cmd_SM2_ALG
000020  f8000000          DCB      0xf8,0x00,0x00,0x00
                          DCD      cmd_HASH_ALG
000028  d6000000          DCB      0xd6,0x00,0x00,0x00
                          DCD      cmd_GET_INFO
000030  d2000000          DCB      0xd2,0x00,0x00,0x00
                          DCD      cmd_NVM_ErWr
000038  d8000000          DCB      0xd8,0x00,0x00,0x00
                          DCD      cmd_M1_Opt
000040  d0000000          DCB      0xd0,0x00,0x00,0x00
                          DCD      cmd_back2Loader
000048  c0000000          DCB      0xc0,0x00,0x00,0x00
                          DCD      cmd_getResponse
000050  a4000000          DCB      0xa4,0x00,0x00,0x00
                          DCD      cmd_selectFile
000058  aa000000          DCB      0xaa,0x00,0x00,0x00
                          DCD      cmd_TerminalCapa
                          DCD      0x53d6a7a9
                          DCD      0x0d38bc86
                          DCD      0x13b88389
                          DCD      0x963e20cb
                          DCD      0x3dcd8d1e
                          DCD      0x76f1233b
                          DCD      0xf0e5ac7f
                          DCD      0x803571b0
                          DCD      0xa7408e0c
                          DCD      0x378c05ae
                          DCD      0xe58732c7
                          DCD      0xcc28a34e
                          DCD      0x0b52ee7a
                          DCD      0x8214c162
                          DCD      0x1d1a9d5a
                          DCD      0x7be7c2f0
                          DCD      0xdd3bfc0a
                          DCD      0x74dba3c3
                          DCD      0x5daffb8c
                          DCD      0x87286f17
                          DCD      0xe36194f3
                          DCD      0x307dfaa3
                          DCD      0x8e507b1d
                          DCD      0x81ef13c6
                          DCD      0x56bcf427
                          DCD      0x8a35434d
                          DCD      0xa5db5c40
                          DCD      0x04b9fe12
                          DCD      0x5a81fed3
                          DCD      0x82ac8df7
                          DCD      0x53d6a7a9
                          DCD      0x0d38bc86
                          DCD      0x13b88389
                          DCD      0x963e20cb
                          DCD      0xf0e5ac7f
                          DCD      0x803571b0
                          DCD      0xa7408e0c
                          DCD      0x378c05ae
                          DCD      0xe58732c7
                          DCD      0xcc28a34e
                          DCD      0x0b52ee7a
                          DCD      0x8214c162
                          DCD      0xa106ccab
                          DCD      0x5fa73d12
                          DCD      0xd20150eb
                          DCD      0x3e0c3f72
                          DCD      0x82c19a1b
                          DCD      0xe04097bc
                          DCD      0xc1bc9f09
                          DCD      0x3a349ead
                          DCD      0x891e5349
                          DCD      0x9fdbe309
                          DCD      0x4e0e4b89
                          DCD      0xb40a8608
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x65062726
                          DCD      0xbd109208
                          DCD      0x8abc16a8
                          DCD      0xf93323e9
                          DCD      0xe8c03160
                          DCD      0x3eb4347f
                          DCD      0x7eace55d
                          DCD      0x34b11e9e
                          DCD      0xc93c62e4
                          DCD      0x8a124f86
                          DCD      0xf8644891
                          DCD      0x51265dff
                          DCD      0x84fa74a2
                          DCD      0x8a5529d3
                          DCD      0x0c745b64
                          DCD      0x7ce480c8
                          DCD      0xabf41aec
                          DCD      0x3ad45119
                          DCD      0x9d86ac50
                          DCD      0x84346c60
                          DCD      0x9c945b04
                          DCD      0xcda87aad
                          DCD      0x8bba1956
                          DCD      0x8f9decff
                          DCD      0x73eece91
                          DCD      0x460f6140
                          DCD      0x646e3486
                          DCD      0xc221e412
                          DCD      0x9f77527f
                          DCD      0x43687b5e
                          DCD      0xf8419782
                          DCD      0x488f6f8c
                          DCD      0x0165e254
                          DCD      0xdff63d63
                          DCD      0x1829af44
                          DCD      0x000c7f9f
                          DCD      0x61825aba
                          DCD      0x8ad476a1
                          DCD      0x77b6eda0
                          DCD      0x8c85e4c0
                          DCD      0xc95310cc
                          DCD      0xc2b556c3
                          DCD      0x9c3afb5c
                          DCD      0x72e94b62
                          DCD      0x052c238a
                          DCD      0xcf5f00b1
                          DCD      0x405dee28
                          DCD      0x08a766ac
                          DCD      0xcd803447
                          DCD      0x0eeb5773
                          DCD      0xdd681675
                          DCD      0x7b4f2ecf
                          DCD      0x00010001
                          DCD      0xab9c27ff
                          DCD      0x7745ba4e
                          DCD      0xb2f3499e
                          DCD      0xb86b6f98
                          DCD      0x66e62f7e
                          DCD      0x3867198f
                          DCD      0x3cab7b48
                          DCD      0x6cd1358b
                          DCD      0x94c9352b
                          DCD      0xc1e19fff
                          DCD      0x09b30fef
                          DCD      0x5aada132
                          DCD      0xd9fb9f40
                          DCD      0x9047dc7e
                          DCD      0x594168d1
                          DCD      0xaf9843ab
                          DCD      0x8aed0357
                          DCD      0x4a220a7a
                          DCD      0x1f7f24f4
                          DCD      0xfdd95c3a
                          DCD      0xa2811af7
                          DCD      0x36935d39
                          DCD      0x7a49a408
                          DCD      0x574c865e
                          DCD      0x305ef0ef
                          DCD      0x6abdac25
                          DCD      0x4534cb92
                          DCD      0xdbf3a52e
                          DCD      0xa3283921
                          DCD      0x17f0c925
                          DCD      0xff199a31
                          DCD      0xb6b13e31
                          DCD      0xc3af3333
                          DCD      0x0bf5e51b
                          DCD      0xdd5629e7
                          DCD      0x904fd609
                          DCD      0xb465c676
                          DCD      0x49cfada1
                          DCD      0x467b3c53
                          DCD      0x97e4f5d3
                          DCD      0x12770d85
                          DCD      0xe3d26c38
                          DCD      0x8fce0b06
                          DCD      0xb72a0856
                          DCD      0xd4e03e1d
                          DCD      0x7cdce5f8
                          DCD      0xbe9d9ef9
                          DCD      0x37a08d7e
                          DCD      0xd6b2a91d
                          DCD      0x6ac24a37
                          DCD      0x75148f1e
                          DCD      0xe17c16d7
                          DCD      0x58ecf7ec
                          DCD      0xec314434
                          DCD      0xdadd6918
                          DCD      0x15ea58f7
                          DCD      0x486efcd2
                          DCD      0xb4086cbe
                          DCD      0x5ac73b16
                          DCD      0x7c5004bb
                          DCD      0xd6fd635a
                          DCD      0x5a1d069d
                          DCD      0x221a3dfc
                          DCD      0x0b992529
                          DCD      0x7c72b121
                          DCD      0xa45321bb
                          DCD      0xdea75557
                          DCD      0x41854f44
                          DCD      0x4d12ac87
                          DCD      0x66ac701b
                          DCD      0x0fc0a4af
                          DCD      0x4a515f7f
                          DCD      0x330a4f2f
                          DCD      0x720afd8b
                          DCD      0x469564b1
                          DCD      0x7a1949c3
                          DCD      0xc5389dfd
                          DCD      0xe550a2b8
                          DCD      0x9c9bcc1c
                          DCD      0x7648f659
                          DCD      0xddc194c3
                          DCD      0x96ff7ac6
                          DCD      0xce633687
                          DCD      0x478184a0
                          DCD      0xbd5ed586
                          DCD      0xfe11fa9e
                          DCD      0x8538e88d
                          DCD      0x3541a8b1
                          DCD      0x7a7dcc82
                          DCD      0x8541dc1d
                          DCD      0xeb2b031a
                          DCD      0x02c5961c
                          DCD      0x39d1d2d1
                          DCD      0x24ff0054
                          DCD      0xce114f2b
                          DCD      0xd5ca3eb8
                          DCD      0x597b256a
                          DCD      0x1811bb6c
                          DCD      0x91abb345
                          DCD      0x3e204285
                          DCD      0xf9f0cd1f
                          DCD      0x1d1bea48
                          DCD      0xd488f902
                          DCD      0x1ef2c5dc
                          DCD      0xc563bb73
                          DCD      0xe57163e8
                          DCD      0x56c59731
                          DCD      0xbe0e8100
                          DCD      0x6a9d9dd7
                          DCD      0x5764e34a
                          DCD      0xbd2ebe74
                          DCD      0x4a85799d
                          DCD      0xef2bbd2c
                          DCD      0xee5ba2fb
                          DCD      0xd5278831
                          DCD      0x7ecf0d63
                          DCD      0x4710ea32
                          DCD      0xb61ac97a
                          DCD      0xbba15b58
                          DCD      0x7ccfce52
                          DCD      0x80c45c75
                          DCD      0x97a7fdb4
                          DCD      0x306a7319
                          DCD      0x737c32f3
                          DCD      0xfac8b41e
                          DCD      0x4d21d77a
                          DCD      0x79d5d429
                          DCD      0x0049e881
                          DCD      0x832d6489
                          DCD      0x43950dfb
                          DCD      0x9459e42b
                          DCD      0x31f7943a
                          DCD      0xb2feff71
                          DCD      0xc806fa64
                          DCD      0xe692e2e4
                          DCD      0xcce6cbeb
                          DCD      0xd5cb659a
                          DCD      0xb561c85d
                          DCD      0xdc6b8b35
                          DCD      0x88a19545
                          DCD      0xd9027cdf
                          DCD      0xfbf9b138
                          DCD      0xfc7f6db7
                          DCD      0xbb9b813e
                          DCD      0xabea847a
                          DCD      0x779f9811
                          DCD      0xcac0f430
                          DCD      0x6ddb1577
                          DCD      0x1246829e
                          DCD      0xb97a1477
                          DCD      0x30ad83d5
                          DCD      0xfa1749b1
                          DCD      0xa8a67895
                          DCD      0x73eb4537
                          DCD      0x8534c83d
                          DCD      0xfba4620d
                          DCD      0x1e26e982
                          DCD      0xb4d87312
                          DCD      0x95614fd6
                          DCD      0x51bd39d8
                          DCD      0x66c5fb03
                          DCD      0xfdf39c7a
                          DCD      0x48c6df18
                          DCD      0x850a9375
                          DCD      0x16b9b913
                          DCD      0x217aca84
                          DCD      0xf9e36874
                          DCD      0xec64cbd6
                          DCD      0xfe71810c
                          DCD      0xf34f37c8
                          DCD      0x4ad7452d
                          DCD      0xab0a396b
                          DCD      0x9fd6b301
                          DCD      0xde1b73f7
                          DCD      0x19f3d69d
                          DCD      0x483e5f3b
                          DCD      0xffb5d9f8
                          DCD      0xf5c4a723
                          DCD      0x75d57185
                          DCD      0x117947ae
                          DCD      0xad1af2cf
                          DCD      0x953bf175
                          DCD      0x88d06678
                          DCD      0x3f5d33b1
                          DCD      0x51c00dd3
                          DCD      0x116506d1
                          DCD      0x8ee8786e
                          DCD      0xf2227676
                          DCD      0x1d298184
                          DCD      0x6e4548a9
                          DCD      0xbe379434
                          DCD      0x26a90ad9
                          DCD      0x008cdf2f
                          DCD      0xd5ce12ed
                          DCD      0xdb4078cd
                          DCD      0x442d7ba2
                          DCD      0x6525bf95
                          DCD      0x98ad0275
                          DCD      0x3c36474d
                          DCD      0xfe4c333c
                          DCD      0x5710b781
                          DCD      0x56e8efd6
                          DCD      0xa0754aff
                          DCD      0xb5c6eca2
                          DCD      0x75cb5059
                          DCD      0xe20c3206
                          DCD      0x279aac66
                          DCD      0xd9469fea
                          DCD      0x7e1254c2
                          DCD      0x4ce5633a
                          DCD      0x3283d449
                          DCD      0x1dbb8567
                          DCD      0x74e2cba0
                          DCD      0xe4815ce7
                          DCD      0x634b6dac
                          DCD      0x6f5217b0
                          DCD      0x977aff19
                          DCD      0x3d2d36c1
                          DCD      0x9a505ed4
                          DCD      0x02760f9a
                          DCD      0x6a547891
                          DCD      0x27754abf
                          DCD      0xf82fd146
                          DCD      0x47d66439
                          DCD      0xac2f00ae
                          DCD      0xb3283015
                          DCD      0xdfc630c8
                          DCD      0xef5e51e2
                          DCD      0x5f089f55
                          DCD      0x3251c237
                          DCD      0xef30225d
                          DCD      0xea3b4e2b
                          DCD      0xc41b9faa
                          DCD      0x353e18db
                          DCD      0x09cb914c
                          DCD      0x69db15e8
                          DCD      0x5ce68813
                          DCD      0x8d7b8df7
                          DCD      0x4f35a618
                          DCD      0xdeea9d2f
                          DCD      0xe8252435
                          DCD      0x4cd7b8be
                          DCD      0x2149cb88
                          DCD      0xfa552154
                          DCD      0x68d67bf4
                          DCD      0xc15d73a6
                          DCD      0x2025a7a0
                          DCD      0xad4a19ec
                          DCD      0x1f35d676
                          DCD      0x7e5bd664
                          DCD      0x2e2724a5
                          DCD      0x29343ecd
                          DCD      0x8cc0bf20
                          DCD      0x555e3bec
                          DCD      0x6bea6b1c
                          DCD      0xdec28a0b
                          DCD      0x72339510
                          DCD      0xb2c145bd
                          DCD      0xe348ffb9
                          DCD      0x855a43e4
                          DCD      0x53f2f12a
                          DCD      0xfcf638e2
                          DCD      0xbc13646f
                          DCD      0x3cabda96
                          DCD      0x5d04d100
                          DCD      0x1f579a39
                          DCD      0x0370a84f
                          DCD      0xfec7eccb
                          DCD      0x5289af9c
                          DCD      0x78eb1c16
                          DCD      0x1006c1dd
                          DCD      0x3db851b9
                          DCD      0x9534b555
                          DCD      0x6ee0d93d
                          DCD      0x9c9e63b5
                          DCD      0xac3fa3c2
                          DCD      0x23eac0ed
                          DCD      0x79f28d17
                          DCD      0xaf3b8c70
                          DCD      0x1db25daa
                          DCD      0x06ad55bc
                          DCD      0x03b61b64
                          DCD      0x5f46f7e6
                          DCD      0xebf27467
                          DCD      0x7a7272d7
                          DCD      0xeb3f3605
                          DCD      0x2de17b0c
                          DCD      0x17b4f0f3
                          DCD      0xdf98977b
                          DCD      0x80c266a6
                          DCD      0x7098bc09
                          DCD      0x40aa1049
                          DCD      0x42eef868
                          DCD      0x98533498
                          DCD      0xc8c18b8b
                          DCD      0x40939cb3
                          DCD      0x53177411
                          DCD      0x59b95a4b
                          DCD      0xf183ee37
                          DCD      0x9f2268a5
                          DCD      0x9b286aa9
                          DCD      0x7ee3cdc3
                          DCD      0xbcb5cf84
                          DCD      0x099ab05a
                          DCD      0x79ad814e
                          DCD      0x89aa90a3
                          DCD      0x4785a19a
                          DCD      0x9301ca79
                          DCD      0xc2315726
                          DCD      0x307e16eb
                          DCD      0xba08bc6c
                          DCD      0x393034c9
                          DCD      0x696b24ff
                          DCD      0xa128ada0
                          DCD      0xe3852b15
                          DCD      0x0f7af55a
                          DCD      0x96898d95
                          DCD      0xaef6bf28
                          DCD      0x5c80c969
                          DCD      0x58fe6dc1
                          DCD      0x00f6d766
                          DCD      0x9237c2e4
                          DCD      0xa2a6d2dd
                          DCD      0x7b12e9bd
                          DCD      0xa66b8e01
                          DCD      0x802f914a
                          DCD      0xf426eeb0
                          DCD      0x8a4ff458
                          DCD      0xa11aa749
                          DCD      0xf8d7627b
                          DCD      0x746fc131
                          DCD      0x1d52bd89
                          DCD      0x69b01952
                          DCD      0xbdecfd1d
                          DCD      0x314ee197
                          DCD      0x93f7ad16
                          DCD      0xaf1b1f71
                          DCD      0xce6a6c15
                          DCD      0x7dcf2a55
                          DCD      0x905d6d02
                          DCD      0x6686313c
                          DCD      0x6d8ff887
                          DCD      0xe940b321
                          DCD      0xf2e0e693
                          DCD      0xbc610887
                          DCD      0x1cd728d9
                          DCD      0x472ed6f1
                          DCD      0xdc1d414f
                          DCD      0x25569d67
                          DCD      0x9900c8b0
                          DCD      0xa6662cf8
                          DCD      0xaef1e7fa
                          DCD      0x5f16cc28
                          DCD      0x2485ff80
                          DCD      0x8d84203a
                          DCD      0xfcdc5c44
                          DCD      0x1b5f8436
                          DCD      0x335a7de6
                          DCD      0xfc737f5e
                          DCD      0x33fd299d
                          DCD      0x90f219ea
                          DCD      0x8b32dc5b
                          DCD      0x2ce29b4f
                          DCD      0x646ab492
                          DCD      0xac4f5b3d
                          DCD      0x010c260b
                          DCD      0x777b7a3b
                          DCD      0x2ed8ffa7
                          DCD      0x3b21c0b9
                          DCD      0x9734587e
                          DCD      0xfc86057e
                          DCD      0xa449ee21
                          DCD      0xb310bf0a
                          DCD      0x2ab9e48a
                          DCD      0x0d23075d
                          DCD      0xd49dd902
                          DCD      0x1e817ce5
                          DCD      0x8b83b134
                          DCD      0xb2bfe0e8
                          DCD      0x410ea39e
                          DCD      0x7ecf6073
                          DCD      0x4e531ab1
                          DCD      0xfa5f81ce
                          DCD      0xb587f5d8
                          DCD      0x5b692daf
                          DCD      0xd36b8a74
                          DCD      0xe3c7326c
                          DCD      0xcc0b1e2a
                          DCD      0xb0d60025
                          DCD      0x1a5bf0fb
                          DCD      0x383a5a70
                          DCD      0x0a7bc9c4
                          DCD      0xfaf81a57
                          DCD      0x69625b16
                          DCD      0xac952219
                          DCD      0xf21690cd
                          DCD      0x5aa51ee4
                          DCD      0xc7ce7869
                          DCD      0xf3b8e360
                          DCD      0xa1a3c2d6
                          DCD      0x70cab6f4
                          DCD      0x1bd39eb8
                          DCD      0xfe2a995e
                          DCD      0x32ab4978
                          DCD      0xaa401f8b
                          DCD      0x9e0a95f6
                          DCD      0xf22cfa6c
                          DCD      0x45e8ee08
                          DCD      0x8d18bb94
                          DCD      0xe3378628
                          DCD      0xd413e1f4
                          DCD      0xcfe3d885
                          DCD      0xba1ab50e
                          DCD      0xeb13ead3
                          DCD      0x2a57dc27
                          DCD      0x740dff23
                          DCD      0x85380bbd
                          DCD      0x36791323
                          DCD      0xf2982e60
                          DCD      0xe97375e6
                          DCD      0x3261b99c
                          DCD      0x6ebe40d2
                          DCD      0x7cd0273f
                          DCD      0x2c5f933c
                          DCD      0xc2b466ab
                          DCD      0x4b5a6442
                          DCD      0x670bceb0
                          DCD      0x7d6f76d3
                          DCD      0x8713be86
                          DCD      0x3abf1275
                          DCD      0x27063e0e
                          DCD      0x461c0dbc
                          DCD      0xb264667c
                          DCD      0x18cecc5e
                          DCD      0xdc9aa242
                          DCD      0x2c9ae2d7
                          DCD      0x57a101ed
                          DCD      0x07029ade
                          DCD      0x7973ceff
                          DCD      0x102e00f5
                          DCD      0x08fc95be
                          DCD      0x35592981
                          DCD      0xf19046d6
                          DCD      0x0c401847
                          DCD      0xdd45c5fd
                          DCD      0x7f8a99df
                          DCD      0x7d79c382
                          DCD      0x354ed8d4
                          DCD      0x00010203
                          DCD      0x04050607
                          DCD      0x08090a0b
                          DCD      0x0c0d0e0f
                          DCD      0x0b545707
                          DCD      0x45fe3ae7
                          DCD      0x01020304
                          DCD      0x05060708
                          DCD      0x090a0b0c
                          DCD      0x0d0e1f23
                          DCD      0x0b545707
                          DCD      0x45fe3ae7
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00095c  ba37b15a          DCB      0xba,0x37,0xb1,0x5a
000960  cff77c7d          DCB      0xcf,0xf7,0x7c,0x7d
000964  0cfda406          DCB      0x0c,0xfd,0xa4,0x06
000968  c2a66dd8          DCB      0xc2,0xa6,0x6d,0xd8
00096c  35028d5c          DCB      0x35,0x02,0x8d,0x5c
000970  284a571b          DCB      0x28,0x4a,0x57,0x1b
000974  a7a0259d          DCB      0xa7,0xa0,0x25,0x9d
000978  16080683          DCB      0x16,0x08,0x06,0x83
00097c  79a5a7e3          DCB      0x79,0xa5,0xa7,0xe3
000980  043785e2          DCB      0x04,0x37,0x85,0xe2
000984  e4d35296          DCB      0xe4,0xd3,0x52,0x96
000988  4ee3a61d          DCB      0x4e,0xe3,0xa6,0x1d
00098c  c860e9f7          DCB      0xc8,0x60,0xe9,0xf7
000990  b64c7fab          DCB      0xb6,0x4c,0x7f,0xab
000994  26743498          DCB      0x26,0x74,0x34,0x98
000998  df66e91a          DCB      0xdf,0x66,0xe9,0x1a
00099c  a6b07fe0          DCB      0xa6,0xb0,0x7f,0xe0
0009a0  d159028b          DCB      0xd1,0x59,0x02,0x8b
0009a4  10a3188a          DCB      0x10,0xa3,0x18,0x8a
0009a8  7a01aa33          DCB      0x7a,0x01,0xaa,0x33
0009ac  d554d324          DCB      0xd5,0x54,0xd3,0x24
0009b0  296d08db          DCB      0x29,0x6d,0x08,0xdb
0009b4  86be8792          DCB      0x86,0xbe,0x87,0x92
0009b8  1361045e          DCB      0x13,0x61,0x04,0x5e
0009bc  594d908a          DCB      0x59,0x4d,0x90,0x8a
0009c0  d0d6cc30          DCB      0xd0,0xd6,0xcc,0x30
0009c4  a9644d18          DCB      0xa9,0x64,0x4d,0x18
0009c8  dc7651d3          DCB      0xdc,0x76,0x51,0xd3
0009cc  74d9a219          DCB      0x74,0xd9,0xa2,0x19
0009d0  1923c962          DCB      0x19,0x23,0xc9,0x62
0009d4  dd7575c2          DCB      0xdd,0x75,0x75,0xc2
0009d8  4a702d09          DCB      0x4a,0x70,0x2d,0x09
0009dc  aa763319          DCB      0xaa,0x76,0x33,0x19
0009e0  9724ba88          DCB      0x97,0x24,0xba,0x88
0009e4  c50e4a79          DCB      0xc5,0x0e,0x4a,0x79
0009e8  0ebc72b5          DCB      0x0e,0xbc,0x72,0xb5
0009ec  bde4af10          DCB      0xbd,0xe4,0xaf,0x10
0009f0  1ee89af9          DCB      0x1e,0xe8,0x9a,0xf9
0009f4  44915761          DCB      0x44,0x91,0x57,0x61
0009f8  1c0b3cd1          DCB      0x1c,0x0b,0x3c,0xd1
0009fc  b122c0c5          DCB      0xb1,0x22,0xc0,0xc5
000a00  c0bda54c          DCB      0xc0,0xbd,0xa5,0x4c
000a04  7e9a67e4          DCB      0x7e,0x9a,0x67,0xe4
000a08  a64be691          DCB      0xa6,0x4b,0xe6,0x91
000a0c  c86f513f          DCB      0xc8,0x6f,0x51,0x3f
000a10  d0335458          DCB      0xd0,0x33,0x54,0x58
000a14  d40a85a8          DCB      0xd4,0x0a,0x85,0xa8
000a18  21aa0a6f          DCB      0x21,0xaa,0x0a,0x6f
000a1c  86498ec5          DCB      0x86,0x49,0x8e,0xc5
000a20  e1186434          DCB      0xe1,0x18,0x64,0x34
000a24  eafffb93          DCB      0xea,0xff,0xfb,0x93
000a28  3e99841f          DCB      0x3e,0x99,0x84,0x1f
000a2c  ae71e1df          DCB      0xae,0x71,0xe1,0xdf
000a30  c77ccf37          DCB      0xc7,0x7c,0xcf,0x37
000a34  a3d956cc          DCB      0xa3,0xd9,0x56,0xcc
000a38  f1c66f9a          DCB      0xf1,0xc6,0x6f,0x9a
000a3c  42e4f552          DCB      0x42,0xe4,0xf5,0x52
000a40  94aed0f8          DCB      0x94,0xae,0xd0,0xf8
000a44  23355fbc          DCB      0x23,0x35,0x5f,0xbc
000a48  6d202517          DCB      0x6d,0x20,0x25,0x17
000a4c  85e2b627          DCB      0x85,0xe2,0xb6,0x27
000a50  9b3ce24e          DCB      0x9b,0x3c,0xe2,0x4e
000a54  cbf52208          DCB      0xcb,0xf5,0x22,0x08
000a58  24d6420c          DCB      0x24,0xd6,0x42,0x0c
000a5c  fbea4ea5          DCB      0xfb,0xea,0x4e,0xa5
000a60  70000000          DCB      0x70,0x00,0x00,0x00
000a64  4eb73993          DCB      0x4e,0xb7,0x39,0x93
000a68  6b125d38          DCB      0x6b,0x12,0x5d,0x38
000a6c  edc96bec          DCB      0xed,0xc9,0x6b,0xec
000a70  94033e70          DCB      0x94,0x03,0x3e,0x70
000a74  787484d4          DCB      0x78,0x74,0x84,0xd4
000a78  559af8b7          DCB      0x55,0x9a,0xf8,0xb7
000a7c  228013e4          DCB      0x22,0x80,0x13,0xe4
000a80  99691f83          DCB      0x99,0x69,0x1f,0x83
000a84  9c75d004          DCB      0x9c,0x75,0xd0,0x04
000a88  3505ba10          DCB      0x35,0x05,0xba,0x10
000a8c  0ed51832          DCB      0x0e,0xd5,0x18,0x32
000a90  8c67ac13          DCB      0x8c,0x67,0xac,0x13
000a94  740c8d44          DCB      0x74,0x0c,0x8d,0x44
000a98  a142a681          DCB      0xa1,0x42,0xa6,0x81
000a9c  4a224f1a          DCB      0x4a,0x22,0x4f,0x1a
000aa0  20924b25          DCB      0x20,0x92,0x4b,0x25
000aa4  cbfae958          DCB      0xcb,0xfa,0xe9,0x58
000aa8  887f99b3          DCB      0x88,0x7f,0x99,0xb3
000aac  a982b346          DCB      0xa9,0x82,0xb3,0x46
000ab0  92bb62ab          DCB      0x92,0xbb,0x62,0xab
000ab4  4d9164fa          DCB      0x4d,0x91,0x64,0xfa
000ab8  e813c4a1          DCB      0xe8,0x13,0xc4,0xa1
000abc  a29f887e          DCB      0xa2,0x9f,0x88,0x7e
000ac0  1a422cd9          DCB      0x1a,0x42,0x2c,0xd9
000ac4  5ce946be          DCB      0x5c,0xe9,0x46,0xbe
000ac8  f45b0a62          DCB      0xf4,0x5b,0x0a,0x62
000acc  6ceeeb46          DCB      0x6c,0xee,0xeb,0x46
000ad0  f01079a2          DCB      0xf0,0x10,0x79,0xa2
000ad4  8a67dcaf          DCB      0x8a,0x67,0xdc,0xaf
000ad8  3fe60f4b          DCB      0x3f,0xe6,0x0f,0x4b
000adc  7d945f36          DCB      0x7d,0x94,0x5f,0x36
000ae0  82694899          DCB      0x82,0x69,0x48,0x99
000ae4  f44c7d4f          DCB      0xf4,0x4c,0x7d,0x4f
000ae8  8df0fd73          DCB      0x8d,0xf0,0xfd,0x73
000aec  e8156a23          DCB      0xe8,0x15,0x6a,0x23
000af0  260b0405          DCB      0x26,0x0b,0x04,0x05
000af4  3a16f079          DCB      0x3a,0x16,0xf0,0x79
000af8  4eb106e5          DCB      0x4e,0xb1,0x06,0xe5
000afc  954e32ee          DCB      0x95,0x4e,0x32,0xee
000b00  48d86c2a          DCB      0x48,0xd8,0x6c,0x2a
000b04  d8a238df          DCB      0xd8,0xa2,0x38,0xdf
000b08  6a5d07d6          DCB      0x6a,0x5d,0x07,0xd6
000b0c  8813bd8a          DCB      0x88,0x13,0xbd,0x8a
000b10  ad6355fd          DCB      0xad,0x63,0x55,0xfd
000b14  0a2ada8f          DCB      0x0a,0x2a,0xda,0x8f
000b18  74b7891a          DCB      0x74,0xb7,0x89,0x1a
000b1c  c8422472          DCB      0xc8,0x42,0x24,0x72
000b20  b990fc2a          DCB      0xb9,0x90,0xfc,0x2a
000b24  e88b62c4          DCB      0xe8,0x8b,0x62,0xc4
000b28  d00ec189          DCB      0xd0,0x0e,0xc1,0x89
000b2c  3cbd24e9          DCB      0x3c,0xbd,0x24,0xe9
000b30  cec16ad3          DCB      0xce,0xc1,0x6a,0xd3
000b34  59c7db27          DCB      0x59,0xc7,0xdb,0x27
000b38  d0491965          DCB      0xd0,0x49,0x19,0x65
000b3c  c8102c87          DCB      0xc8,0x10,0x2c,0x87
000b40  e418cc1c          DCB      0xe4,0x18,0xcc,0x1c
000b44  11ed99b6          DCB      0x11,0xed,0x99,0xb6
000b48  f999f9ee          DCB      0xf9,0x99,0xf9,0xee
000b4c  ccbf7ee7          DCB      0xcc,0xbf,0x7e,0xe7
000b50  d43a30fa          DCB      0xd4,0x3a,0x30,0xfa
000b54  aaaef426          DCB      0xaa,0xae,0xf4,0x26
000b58  38d47daa          DCB      0x38,0xd4,0x7d,0xaa
000b5c  55b18ec5          DCB      0x55,0xb1,0x8e,0xc5
000b60  702234b8          DCB      0x70,0x22,0x34,0xb8
000b64  0d186867          DCB      0x0d,0x18,0x68,0x67
000b68  56bbad9f          DCB      0x56,0xbb,0xad,0x9f
000b6c  88d3ac07          DCB      0x88,0xd3,0xac,0x07
000b70  58c4ed64          DCB      0x58,0xc4,0xed,0x64
000b74  d2ef4aa9          DCB      0xd2,0xef,0x4a,0xa9
000b78  773ac6b8          DCB      0x77,0x3a,0xc6,0xb8
000b7c  74faeaf6          DCB      0x74,0xfa,0xea,0xf6
000b80  23225f0e          DCB      0x23,0x22,0x5f,0x0e
000b84  c6abce03          DCB      0xc6,0xab,0xce,0x03
000b88  8145f67a          DCB      0x81,0x45,0xf6,0x7a
000b8c  983e0e48          DCB      0x98,0x3e,0x0e,0x48
000b90  e8b25b39          DCB      0xe8,0xb2,0x5b,0x39
000b94  aaf21422          DCB      0xaa,0xf2,0x14,0x22
000b98  65387428          DCB      0x65,0x38,0x74,0x28
000b9c  328b1f51          DCB      0x32,0x8b,0x1f,0x51
000ba0  36efb84a          DCB      0x36,0xef,0xb8,0x4a
000ba4  5bcfc279          DCB      0x5b,0xcf,0xc2,0x79
000ba8  50aeb644          DCB      0x50,0xae,0xb6,0x44
000bac  c30b64a2          DCB      0xc3,0x0b,0x64,0xa2
000bb0  db948de2          DCB      0xdb,0x94,0x8d,0xe2
000bb4  fa8dc0ba          DCB      0xfa,0x8d,0xc0,0xba
000bb8  b3817392          DCB      0xb3,0x81,0x73,0x92
000bbc  082a6411          DCB      0x08,0x2a,0x64,0x11
000bc0  e79c31e6          DCB      0xe7,0x9c,0x31,0xe6
000bc4  e6b734da          DCB      0xe6,0xb7,0x34,0xda
000bc8  3c                DCB      0x3c
