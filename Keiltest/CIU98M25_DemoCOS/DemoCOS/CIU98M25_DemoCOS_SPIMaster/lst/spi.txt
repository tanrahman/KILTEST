; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi.d --cpu=SC000 --bi --apcs=interwork -O0 -I.\INC -IC:\Keil_v4\ARM\RV31\INC -IC:\Keil_v4\ARM\CMSIS\Include -IC:\Keil_v4\ARM\Device\ARM\ARMSC000\Include --omf_browse=.\obj\spi.crf SRC\SPI.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSpiWorkMode PROC
;;;16     
;;;17     void SetSpiWorkMode(SPI_WORK_MODE mode)
000000  4984              LDR      r1,|L1.532|
;;;18     {
;;;19     	SPICON = (SPICON & 0xF) | SET_VAL_TO_BIT(mode,SPICON_MODSEL);
000002  6809              LDR      r1,[r1,#0]
000004  0709              LSLS     r1,r1,#28
000006  0f09              LSRS     r1,r1,#28
000008  0102              LSLS     r2,r0,#4
00000a  4311              ORRS     r1,r1,r2
00000c  4a81              LDR      r2,|L1.532|
00000e  6011              STR      r1,[r2,#0]
;;;20     }
000010  4770              BX       lr
;;;21     void SetPolarityAndPhase(BIT_VALUE polarity, BIT_VALUE phase)
                          ENDP

                  SetPolarityAndPhase PROC
000012  4a80              LDR      r2,|L1.532|
;;;22     {
;;;23     
;;;24     	SPICON = (SPICON & (CLEAR_BIT(SPICON_CPOL) & CLEAR_BIT(SPICON_CPHA))) | \
000014  6812              LDR      r2,[r2,#0]
000016  2306              MOVS     r3,#6
000018  439a              BICS     r2,r2,r3
00001a  0083              LSLS     r3,r0,#2
00001c  431a              ORRS     r2,r2,r3
00001e  004b              LSLS     r3,r1,#1
000020  431a              ORRS     r2,r2,r3
000022  4b7c              LDR      r3,|L1.532|
000024  601a              STR      r2,[r3,#0]
;;;25     			 SET_VAL_TO_BIT(polarity, SPICON_CPOL) | \
;;;26     			 SET_VAL_TO_BIT(phase, SPICON_CPHA);
;;;27     }
000026  4770              BX       lr
;;;28     void HED_DEMO_SPI_Init(void)
                          ENDP

                  HED_DEMO_SPI_Init PROC
000028  b500              PUSH     {lr}
;;;29     {
;;;30     	//configure gpio pins
;;;31     	GPIODIR = SET_BIT(SPI_SS)  | \
00002a  203a              MOVS     r0,#0x3a
00002c  497a              LDR      r1,|L1.536|
00002e  6048              STR      r0,[r1,#4]
;;;32     			  SET_BIT(SPI_SCK) | \
;;;33     			  SET_BIT(SPI_MOSI)| \
;;;34     			  SET_BIT(SPI_MOSI_1);
;;;35     	//disable gpio interrupt
;;;36     	GPIOIE = 0x00;
000030  2000              MOVS     r0,#0
000032  6148              STR      r0,[r1,#0x14]
;;;37     	//disable spi interrupt
;;;38     	SPIIE = 0x00;
000034  4977              LDR      r1,|L1.532|
000036  6108              STR      r0,[r1,#0x10]
;;;39     	//set to master
;;;40     	SET_SPI_MSTR;
000038  4608              MOV      r0,r1
00003a  6800              LDR      r0,[r0,#0]
00003c  2101              MOVS     r1,#1
00003e  4308              ORRS     r0,r0,r1
000040  4974              LDR      r1,|L1.532|
000042  6008              STR      r0,[r1,#0]
;;;41     	SetSpiWorkMode(SPI_STANDARD);
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       SetSpiWorkMode
;;;42     	SET_REG_BIT(SPIDIV,SPIDIV_MDIV_EN); //frequece division enable
00004a  4872              LDR      r0,|L1.532|
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  21ff              MOVS     r1,#0xff
000050  3101              ADDS     r1,#1
000052  4308              ORRS     r0,r0,r1
000054  496f              LDR      r1,|L1.532|
000056  60c8              STR      r0,[r1,#0xc]
;;;43     	SetPolarityAndPhase(BIT_VAL_0, BIT_VAL_0);
000058  2100              MOVS     r1,#0
00005a  4608              MOV      r0,r1
00005c  f7fffffe          BL       SetPolarityAndPhase
;;;44     	SET_SPI_MSB_FIRST; //MSB
000060  486c              LDR      r0,|L1.532|
000062  6800              LDR      r0,[r0,#0]
000064  2108              MOVS     r1,#8
000066  4388              BICS     r0,r0,r1
000068  496a              LDR      r1,|L1.532|
00006a  6008              STR      r0,[r1,#0]
;;;45     }
00006c  bd00              POP      {pc}
;;;46     
                          ENDP

                  WaitSFlashIdle PROC
;;;55     *************************************************/
;;;56     void WaitSFlashIdle(void)
00006e  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	do
000070  bf00              NOP      
                  |L1.114|
;;;59     	{
;;;60      		ENABLE_SPI_SS;	
000072  4869              LDR      r0,|L1.536|
000074  6800              LDR      r0,[r0,#0]
000076  2120              MOVS     r1,#0x20
000078  4388              BICS     r0,r0,r1
00007a  4967              LDR      r1,|L1.536|
00007c  6008              STR      r0,[r1,#0]
;;;61     		SpiCmdBuf[0] = SFLASH_CMD_RDSR; //read sflash status register
00007e  2005              MOVS     r0,#5
000080  4966              LDR      r1,|L1.540|
000082  7008              STRB     r0,[r1,#0]
;;;62     		HED_SPIM_SendNBytes(SpiCmdBuf,0x01);
000084  2101              MOVS     r1,#1
000086  4865              LDR      r0,|L1.540|
000088  f7fffffe          BL       HED_SPIM_SendNBytes
;;;63     		HED_SPIM_ReceiveNBytesRam(SpiCmdBuf,0x01);
00008c  2101              MOVS     r1,#1
00008e  4863              LDR      r0,|L1.540|
000090  f7fffffe          BL       HED_SPIM_ReceiveNBytesRam
;;;64     	    DISABLE_SPI_SS;	
000094  4860              LDR      r0,|L1.536|
000096  6800              LDR      r0,[r0,#0]
000098  2120              MOVS     r1,#0x20
00009a  4308              ORRS     r0,r0,r1
00009c  495e              LDR      r1,|L1.536|
00009e  6008              STR      r0,[r1,#0]
;;;65     	}while(REG_BIT_IS_SET(SpiCmdBuf[0],SFLASH_STATUS_REGISTER_WIP));
0000a0  485e              LDR      r0,|L1.540|
0000a2  7800              LDRB     r0,[r0,#0]  ; SpiCmdBuf
0000a4  07c0              LSLS     r0,r0,#31
0000a6  0fc0              LSRS     r0,r0,#31
0000a8  d1e3              BNE      |L1.114|
;;;66     }
0000aa  bd10              POP      {r4,pc}
;;;67     /************************************************* 
                          ENDP

                  SPIM_ReadSFlashNbytes PROC
;;;74     *************************************************/
;;;75     unsigned char SPIM_ReadSFlashNbytes(unsigned char * DataBuf,unsigned int  FlashAddr , unsigned int  DataLen )
0000ac  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;76     {
0000ae  4606              MOV      r6,r0
0000b0  4614              MOV      r4,r2
;;;77     
;;;78     	unsigned char * flashAddr;
;;;79         
;;;80         flashAddr = (unsigned char *)(&FlashAddr);
0000b2  ad01              ADD      r5,sp,#4
;;;81         
;;;82     	if ((FlashAddr+DataLen) >= 0x200000)
0000b4  9801              LDR      r0,[sp,#4]
0000b6  1900              ADDS     r0,r0,r4
0000b8  2101              MOVS     r1,#1
0000ba  0549              LSLS     r1,r1,#21
0000bc  4288              CMP      r0,r1
0000be  d301              BCC      |L1.196|
;;;83     	{
;;;84     		return (0x01);
0000c0  2001              MOVS     r0,#1
                  |L1.194|
;;;85     	}
;;;86     
;;;87     	WaitSFlashIdle();
;;;88     	SpiCmdBuf[0] = SFLASH_CMD_READ; //
;;;89     	SpiCmdBuf[1] = flashAddr[1]; //MSB
;;;90     	SpiCmdBuf[2] = flashAddr[2];
;;;91     	SpiCmdBuf[3] = flashAddr[3];
;;;92     	ENABLE_SPI_SS;
;;;93     	HED_SPIM_SendNBytes(SpiCmdBuf,0x04); //ins & address
;;;94     	HED_SPIM_ReceiveNBytesRam(DataBuf,DataLen);
;;;95     	DISABLE_SPI_SS;
;;;96     	return 0;
;;;97     }
0000c2  bdfe              POP      {r1-r7,pc}
                  |L1.196|
0000c4  f7fffffe          BL       WaitSFlashIdle
0000c8  2003              MOVS     r0,#3                 ;88
0000ca  4954              LDR      r1,|L1.540|
0000cc  7008              STRB     r0,[r1,#0]            ;88
0000ce  7868              LDRB     r0,[r5,#1]            ;89
0000d0  7048              STRB     r0,[r1,#1]            ;89
0000d2  78a8              LDRB     r0,[r5,#2]            ;90
0000d4  7088              STRB     r0,[r1,#2]            ;90
0000d6  78e8              LDRB     r0,[r5,#3]            ;91
0000d8  70c8              STRB     r0,[r1,#3]            ;91
0000da  484f              LDR      r0,|L1.536|
0000dc  6800              LDR      r0,[r0,#0]            ;92
0000de  2120              MOVS     r1,#0x20              ;92
0000e0  4388              BICS     r0,r0,r1              ;92
0000e2  494d              LDR      r1,|L1.536|
0000e4  6008              STR      r0,[r1,#0]            ;92
0000e6  2104              MOVS     r1,#4                 ;93
0000e8  484c              LDR      r0,|L1.540|
0000ea  f7fffffe          BL       HED_SPIM_SendNBytes
0000ee  4621              MOV      r1,r4                 ;94
0000f0  4630              MOV      r0,r6                 ;94
0000f2  f7fffffe          BL       HED_SPIM_ReceiveNBytesRam
0000f6  4848              LDR      r0,|L1.536|
0000f8  6800              LDR      r0,[r0,#0]            ;95
0000fa  2120              MOVS     r1,#0x20              ;95
0000fc  4308              ORRS     r0,r0,r1              ;95
0000fe  4946              LDR      r1,|L1.536|
000100  6008              STR      r0,[r1,#0]            ;95
000102  2000              MOVS     r0,#0                 ;96
000104  e7dd              B        |L1.194|
;;;98     /************************************************* 
                          ENDP

                  SPIM_WriteSFlashNbytes PROC
;;;105    *************************************************/
;;;106    unsigned char SPIM_WriteSFlashNbytes(unsigned char * DataBuf,unsigned int  FlashAddr , unsigned int  DataLen )
000106  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;107    {
000108  4606              MOV      r6,r0
00010a  4615              MOV      r5,r2
;;;108    
;;;109    	unsigned char * flashAddr = (unsigned char *)(&FlashAddr);
00010c  ac01              ADD      r4,sp,#4
;;;110        
;;;111    	if ((FlashAddr+DataLen) >= 0x200000)
00010e  9801              LDR      r0,[sp,#4]
000110  1940              ADDS     r0,r0,r5
000112  2101              MOVS     r1,#1
000114  0549              LSLS     r1,r1,#21
000116  4288              CMP      r0,r1
000118  d301              BCC      |L1.286|
;;;112    	{
;;;113    		return (0x01);
00011a  2001              MOVS     r0,#1
                  |L1.284|
;;;114    	}
;;;115    
;;;116    	WaitSFlashIdle();
;;;117    
;;;118    	SpiCmdBuf[0] = SFLASH_CMD_WREN; //write enable
;;;119    	ENABLE_SPI_SS;
;;;120    	HED_SPIM_SendNBytes(SpiCmdBuf,0x01); //
;;;121    	DISABLE_SPI_SS;
;;;122    
;;;123     	WaitSFlashIdle();
;;;124    	SpiCmdBuf[0] = SFLASH_CMD_BLOCK_E_32; //erase 32K
;;;125    	SpiCmdBuf[1] = flashAddr[1];
;;;126    	SpiCmdBuf[2] = flashAddr[2];
;;;127    	SpiCmdBuf[3] = flashAddr[3];
;;;128      	ENABLE_SPI_SS;
;;;129    	HED_SPIM_SendNBytes(SpiCmdBuf,0x04); //ins & address
;;;130    	DISABLE_SPI_SS;
;;;131    
;;;132    	WaitSFlashIdle();
;;;133        SpiCmdBuf[0] = SFLASH_CMD_WREN; //write enable
;;;134    	ENABLE_SPI_SS;
;;;135    	HED_SPIM_SendNBytes(SpiCmdBuf,0x01); //
;;;136    	DISABLE_SPI_SS;
;;;137    
;;;138     	WaitSFlashIdle();
;;;139    	SpiCmdBuf[0] = SFLASH_CMD_PAGE_P; //page program 
;;;140    	SpiCmdBuf[1] = flashAddr[1];
;;;141    	SpiCmdBuf[2] = flashAddr[2];
;;;142    	SpiCmdBuf[3] = flashAddr[3];
;;;143     	ENABLE_SPI_SS;
;;;144    	HED_SPIM_SendNBytes(SpiCmdBuf,0x04); //ins & address
;;;145    	HED_SPIM_SendNBytes(DataBuf,DataLen);//data
;;;146    	DISABLE_SPI_SS;
;;;147    
;;;148    	WaitSFlashIdle();
;;;149    	ENABLE_SPI_SS;
;;;150    	SpiCmdBuf[0] = SFLASH_CMD_WRDI; //write disable
;;;151    	HED_SPIM_SendNBytes(SpiCmdBuf,0x01); //
;;;152    	DISABLE_SPI_SS;
;;;153    	return 0;
;;;154    }
00011c  bdfe              POP      {r1-r7,pc}
                  |L1.286|
00011e  f7fffffe          BL       WaitSFlashIdle
000122  2006              MOVS     r0,#6                 ;118
000124  493d              LDR      r1,|L1.540|
000126  7008              STRB     r0,[r1,#0]            ;118
000128  483b              LDR      r0,|L1.536|
00012a  6800              LDR      r0,[r0,#0]            ;119
00012c  2120              MOVS     r1,#0x20              ;119
00012e  4388              BICS     r0,r0,r1              ;119
000130  4939              LDR      r1,|L1.536|
000132  6008              STR      r0,[r1,#0]            ;119
000134  2101              MOVS     r1,#1                 ;120
000136  4839              LDR      r0,|L1.540|
000138  f7fffffe          BL       HED_SPIM_SendNBytes
00013c  4836              LDR      r0,|L1.536|
00013e  6800              LDR      r0,[r0,#0]            ;121
000140  2120              MOVS     r1,#0x20              ;121
000142  4308              ORRS     r0,r0,r1              ;121
000144  4934              LDR      r1,|L1.536|
000146  6008              STR      r0,[r1,#0]            ;121
000148  f7fffffe          BL       WaitSFlashIdle
00014c  2052              MOVS     r0,#0x52              ;124
00014e  4933              LDR      r1,|L1.540|
000150  7008              STRB     r0,[r1,#0]            ;124
000152  7860              LDRB     r0,[r4,#1]            ;125
000154  7048              STRB     r0,[r1,#1]            ;125
000156  78a0              LDRB     r0,[r4,#2]            ;126
000158  7088              STRB     r0,[r1,#2]            ;126
00015a  78e0              LDRB     r0,[r4,#3]            ;127
00015c  70c8              STRB     r0,[r1,#3]            ;127
00015e  482e              LDR      r0,|L1.536|
000160  6800              LDR      r0,[r0,#0]            ;128
000162  2120              MOVS     r1,#0x20              ;128
000164  4388              BICS     r0,r0,r1              ;128
000166  492c              LDR      r1,|L1.536|
000168  6008              STR      r0,[r1,#0]            ;128
00016a  2104              MOVS     r1,#4                 ;129
00016c  482b              LDR      r0,|L1.540|
00016e  f7fffffe          BL       HED_SPIM_SendNBytes
000172  4829              LDR      r0,|L1.536|
000174  6800              LDR      r0,[r0,#0]            ;130
000176  2120              MOVS     r1,#0x20              ;130
000178  4308              ORRS     r0,r0,r1              ;130
00017a  4927              LDR      r1,|L1.536|
00017c  6008              STR      r0,[r1,#0]            ;130
00017e  f7fffffe          BL       WaitSFlashIdle
000182  2006              MOVS     r0,#6                 ;133
000184  4925              LDR      r1,|L1.540|
000186  7008              STRB     r0,[r1,#0]            ;133
000188  4823              LDR      r0,|L1.536|
00018a  6800              LDR      r0,[r0,#0]            ;134
00018c  2120              MOVS     r1,#0x20              ;134
00018e  4388              BICS     r0,r0,r1              ;134
000190  4921              LDR      r1,|L1.536|
000192  6008              STR      r0,[r1,#0]            ;134
000194  2101              MOVS     r1,#1                 ;135
000196  4821              LDR      r0,|L1.540|
000198  f7fffffe          BL       HED_SPIM_SendNBytes
00019c  481e              LDR      r0,|L1.536|
00019e  6800              LDR      r0,[r0,#0]            ;136
0001a0  2120              MOVS     r1,#0x20              ;136
0001a2  4308              ORRS     r0,r0,r1              ;136
0001a4  491c              LDR      r1,|L1.536|
0001a6  6008              STR      r0,[r1,#0]            ;136
0001a8  f7fffffe          BL       WaitSFlashIdle
0001ac  2002              MOVS     r0,#2                 ;139
0001ae  491b              LDR      r1,|L1.540|
0001b0  7008              STRB     r0,[r1,#0]            ;139
0001b2  7860              LDRB     r0,[r4,#1]            ;140
0001b4  7048              STRB     r0,[r1,#1]            ;140
0001b6  78a0              LDRB     r0,[r4,#2]            ;141
0001b8  7088              STRB     r0,[r1,#2]            ;141
0001ba  78e0              LDRB     r0,[r4,#3]            ;142
0001bc  70c8              STRB     r0,[r1,#3]            ;142
0001be  4816              LDR      r0,|L1.536|
0001c0  6800              LDR      r0,[r0,#0]            ;143
0001c2  2120              MOVS     r1,#0x20              ;143
0001c4  4388              BICS     r0,r0,r1              ;143
0001c6  4914              LDR      r1,|L1.536|
0001c8  6008              STR      r0,[r1,#0]            ;143
0001ca  2104              MOVS     r1,#4                 ;144
0001cc  4813              LDR      r0,|L1.540|
0001ce  f7fffffe          BL       HED_SPIM_SendNBytes
0001d2  4629              MOV      r1,r5                 ;145
0001d4  4630              MOV      r0,r6                 ;145
0001d6  f7fffffe          BL       HED_SPIM_SendNBytes
0001da  480f              LDR      r0,|L1.536|
0001dc  6800              LDR      r0,[r0,#0]            ;146
0001de  2120              MOVS     r1,#0x20              ;146
0001e0  4308              ORRS     r0,r0,r1              ;146
0001e2  490d              LDR      r1,|L1.536|
0001e4  6008              STR      r0,[r1,#0]            ;146
0001e6  f7fffffe          BL       WaitSFlashIdle
0001ea  480b              LDR      r0,|L1.536|
0001ec  6800              LDR      r0,[r0,#0]            ;149
0001ee  2120              MOVS     r1,#0x20              ;149
0001f0  4388              BICS     r0,r0,r1              ;149
0001f2  4909              LDR      r1,|L1.536|
0001f4  6008              STR      r0,[r1,#0]            ;149
0001f6  2004              MOVS     r0,#4                 ;150
0001f8  4908              LDR      r1,|L1.540|
0001fa  7008              STRB     r0,[r1,#0]            ;150
0001fc  2101              MOVS     r1,#1                 ;151
0001fe  4807              LDR      r0,|L1.540|
000200  f7fffffe          BL       HED_SPIM_SendNBytes
000204  4804              LDR      r0,|L1.536|
000206  6800              LDR      r0,[r0,#0]            ;152
000208  2120              MOVS     r1,#0x20              ;152
00020a  4308              ORRS     r0,r0,r1              ;152
00020c  4902              LDR      r1,|L1.536|
00020e  6008              STR      r0,[r1,#0]            ;152
000210  2000              MOVS     r0,#0                 ;153
000212  e783              B        |L1.284|
                          ENDP

                  |L1.532|
                          DCD      0x40001800
                  |L1.536|
                          DCD      0x40003000
                  |L1.540|
                          DCD      SpiCmdBuf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  SpiCmdBuf
                          %        16
