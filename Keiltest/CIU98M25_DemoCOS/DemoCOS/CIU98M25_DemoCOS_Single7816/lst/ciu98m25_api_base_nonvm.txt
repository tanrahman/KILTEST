; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\obj\ciu98m25_api_base_nonvm.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ciu98m25_api_base_nonvm.d --cpu=SC000 --bi --apcs=interwork -O0 -I.\INC -IC:\Keil_v4\ARM\RV31\INC -IC:\Keil_v4\ARM\CMSIS\Include -IC:\Keil_v4\ARM\Device\ARM\ARMSC000\Include --omf_browse=.\obj\ciu98m25_api_base_nonvm.crf API\CIU98M25_API_Base_NoNVM.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HED_T0_SendNBytes PROC
;;;190    *************************************************/ 
;;;191    unsigned int HED_T0_SendNBytes (unsigned char * DataAddr , unsigned int DataLen)
000000  4602              MOV      r2,r0
;;;192    {
;;;193    	if(DataLen == 0) 
000002  2900              CMP      r1,#0
000004  d101              BNE      |L1.10|
;;;194    	{
;;;195    		return (2);
000006  2002              MOVS     r0,#2
                  |L1.8|
;;;196    	}
;;;197    
;;;198    	//wait for idle time
;;;199    	while(SCI_IS_BUSY); 
;;;200    
;;;201    	//set auto retry time = 3
;;;202    	CLEAR_SCI_AUTO_RETRY_LIMIT; 
;;;203    	SET_SCI_AUTO_RETRY_LIMIT(3);
;;;204    
;;;205    	while(DataLen--)
;;;206    	{
;;;207    		//write one byte to buffer a time
;;;208    		SCISBUF = (*DataAddr++);
;;;209    		while(SCI_DATA_IS_SENDING);
;;;210    
;;;211    		if(SCI_PARITY_IS_ERROR == 0 )
;;;212    		{
;;;213    			SCISSR = 0;							//clr SCI status
;;;214    		}
;;;215    		else
;;;216    		{
;;;217    			SCITXFCR = 0x01;					//clr trans FIFO control
;;;218    			while ((SCITXFCR & 0x01) == 0x01);
;;;219    			SCISSR = 0;							//clr SCI status
;;;220    			return (1);    	
;;;221    		}
;;;222    	}
;;;223    	return (0);
;;;224    }
000008  4770              BX       lr
                  |L1.10|
00000a  bf00              NOP                            ;199
                  |L1.12|
00000c  48fe              LDR      r0,|L1.1032|
00000e  6880              LDR      r0,[r0,#8]            ;199
000010  2328              MOVS     r3,#0x28              ;199
000012  4218              TST      r0,r3                 ;199
000014  d1fa              BNE      |L1.12|
000016  48fc              LDR      r0,|L1.1032|
000018  6840              LDR      r0,[r0,#4]            ;202
00001a  0880              LSRS     r0,r0,#2              ;202
00001c  0080              LSLS     r0,r0,#2              ;202
00001e  4bfa              LDR      r3,|L1.1032|
000020  6058              STR      r0,[r3,#4]            ;202
000022  4618              MOV      r0,r3                 ;203
000024  6840              LDR      r0,[r0,#4]            ;203
000026  2301              MOVS     r3,#1                 ;203
000028  4318              ORRS     r0,r0,r3              ;203
00002a  4bf7              LDR      r3,|L1.1032|
00002c  6058              STR      r0,[r3,#4]            ;203
00002e  e01f              B        |L1.112|
                  |L1.48|
000030  7810              LDRB     r0,[r2,#0]            ;208
000032  4bf5              LDR      r3,|L1.1032|
000034  6018              STR      r0,[r3,#0]            ;208
000036  1c52              ADDS     r2,r2,#1              ;208
000038  bf00              NOP                            ;209
                  |L1.58|
00003a  48f3              LDR      r0,|L1.1032|
00003c  6880              LDR      r0,[r0,#8]            ;209
00003e  2310              MOVS     r3,#0x10              ;209
000040  4218              TST      r0,r3                 ;209
000042  d0fa              BEQ      |L1.58|
000044  48f0              LDR      r0,|L1.1032|
000046  6880              LDR      r0,[r0,#8]            ;211
000048  2302              MOVS     r3,#2                 ;211
00004a  4218              TST      r0,r3                 ;211
00004c  d103              BNE      |L1.86|
00004e  2000              MOVS     r0,#0                 ;213
000050  4bed              LDR      r3,|L1.1032|
000052  6098              STR      r0,[r3,#8]            ;213
000054  e00c              B        |L1.112|
                  |L1.86|
000056  2001              MOVS     r0,#1                 ;217
000058  4beb              LDR      r3,|L1.1032|
00005a  6118              STR      r0,[r3,#0x10]         ;217
00005c  bf00              NOP                            ;218
                  |L1.94|
00005e  48ea              LDR      r0,|L1.1032|
000060  6900              LDR      r0,[r0,#0x10]         ;218
000062  07c0              LSLS     r0,r0,#31             ;218
000064  0fc0              LSRS     r0,r0,#31             ;218
000066  d1fa              BNE      |L1.94|
000068  4be7              LDR      r3,|L1.1032|
00006a  6098              STR      r0,[r3,#8]            ;219
00006c  2001              MOVS     r0,#1                 ;220
00006e  e7cb              B        |L1.8|
                  |L1.112|
000070  4608              MOV      r0,r1                 ;205
000072  1e49              SUBS     r1,r1,#1              ;205
000074  2800              CMP      r0,#0                 ;205
000076  d1db              BNE      |L1.48|
000078  bf00              NOP                            ;223
00007a  e7c5              B        |L1.8|
;;;225    /************************************************* 
                          ENDP

                  HED_T0_ReceiveNBytesRam PROC
;;;236    *************************************************/ 
;;;237    void HED_T0_ReceiveNBytesRam(unsigned char *DataAddr, unsigned int DataLen)
00007c  bf00              NOP      
                  |L1.126|
;;;238    {
;;;239    	while(SCI_IS_BUSY);
00007e  4ae2              LDR      r2,|L1.1032|
000080  6892              LDR      r2,[r2,#8]
000082  2328              MOVS     r3,#0x28
000084  421a              TST      r2,r3
000086  d1fa              BNE      |L1.126|
;;;240    
;;;241    	while(DataLen--)
000088  e009              B        |L1.158|
                  |L1.138|
;;;242    	{	 	      
;;;243    		//wait for data
;;;244    		while(SCIRXFCR_RX_IS_EMPTY);
00008a  bf00              NOP      
                  |L1.140|
00008c  4ade              LDR      r2,|L1.1032|
00008e  6952              LDR      r2,[r2,#0x14]
000090  2302              MOVS     r3,#2
000092  421a              TST      r2,r3
000094  d1fa              BNE      |L1.140|
;;;245    		(*DataAddr++) = (unsigned char)SCISBUF; 
000096  4adc              LDR      r2,|L1.1032|
000098  6812              LDR      r2,[r2,#0]
00009a  7002              STRB     r2,[r0,#0]
00009c  1c40              ADDS     r0,r0,#1
                  |L1.158|
00009e  460a              MOV      r2,r1                 ;241
0000a0  1e49              SUBS     r1,r1,#1              ;241
0000a2  2a00              CMP      r2,#0                 ;241
0000a4  d1f1              BNE      |L1.138|
;;;246    	}
;;;247    }
0000a6  4770              BX       lr
;;;248    
                          ENDP

                  HED_CRC16 PROC
;;;264    *************************************************/ 
;;;265    unsigned short HED_CRC16(unsigned short IV, unsigned int DataLen, unsigned char *DataBuf, unsigned char type)
0000a8  b5ff              PUSH     {r0-r7,lr}
;;;266    {
0000aa  b081              SUB      sp,sp,#4
;;;267    	unsigned int tmp_cnt = (unsigned int)DataBuf & 0x3; //distance to previous word border
0000ac  0793              LSLS     r3,r2,#30
0000ae  0f9b              LSRS     r3,r3,#30
;;;268    	unsigned int div4_quotient, div4_mod;   //
;;;269    
;;;270    	if(DataLen == 0)
0000b0  2900              CMP      r1,#0
0000b2  d102              BNE      |L1.186|
;;;271    	{
;;;272    		return IV;
0000b4  9801              LDR      r0,[sp,#4]
                  |L1.182|
;;;273    	}
;;;274    	
;;;275    	CRCIV = IV;
;;;276    	CRCCSR = ((type&0x3)<<1) | SET_BIT(CRCCSR_CRC_ST);
;;;277    
;;;278    	if (DataLen <= 0x07)
;;;279    	{
;;;280    		div4_quotient = 0;
;;;281    		div4_mod = DataLen;   
;;;282    	}
;;;283    	else
;;;284    	{
;;;285    		unsigned int curr_crccsr = CRCCSR;
;;;286    		if (tmp_cnt)
;;;287    		{
;;;288    			tmp_cnt = 0x4 - tmp_cnt;
;;;289    			DataLen -= tmp_cnt;
;;;290    			CHANGE_CRC_WIDTH_FROM_32_TO_8;   //CRCCSR[5:4] = 10 ->8
;;;291    			while (tmp_cnt--)
;;;292    			{
;;;293    				CRCDATA = *DataBuf++;
;;;294    			}
;;;295    		}
;;;296    		div4_quotient = DataLen >> 0x02; 
;;;297    		div4_mod = DataLen & 0x3;   //word numbers
;;;298    		CRCCSR = curr_crccsr;
;;;299    
;;;300    		if (div4_quotient)
;;;301    		{
;;;302    			unsigned int * tmp_databuf = (unsigned int *)DataBuf;
;;;303    			while (div4_quotient--)
;;;304    			{
;;;305    				CRCDATA = *(unsigned int *)tmp_databuf++;//4 bytes one time
;;;306    			}
;;;307    			DataBuf = (unsigned char *)tmp_databuf;
;;;308    		}
;;;309    	}
;;;310    
;;;311    	if (div4_mod)	
;;;312    	{
;;;313    		CHANGE_CRC_WIDTH_FROM_32_TO_8;   //CRCCSR[5:4] = 10 ->8
;;;314    		while (div4_mod--)
;;;315    		{
;;;316    			CRCDATA = *DataBuf++;
;;;317    		}
;;;318    
;;;319    	}
;;;320    
;;;321    	return (unsigned short)CRCDATA;
;;;322    }
0000b6  b005              ADD      sp,sp,#0x14
0000b8  bdf0              POP      {r4-r7,pc}
                  |L1.186|
0000ba  4ed4              LDR      r6,|L1.1036|
0000bc  9801              LDR      r0,[sp,#4]            ;275
0000be  60b0              STR      r0,[r6,#8]            ;275
0000c0  9804              LDR      r0,[sp,#0x10]         ;276
0000c2  0780              LSLS     r0,r0,#30             ;276
0000c4  0f40              LSRS     r0,r0,#29             ;276
0000c6  1c40              ADDS     r0,r0,#1              ;276
0000c8  6030              STR      r0,[r6,#0]            ;276
0000ca  2907              CMP      r1,#7                 ;278
0000cc  d802              BHI      |L1.212|
0000ce  2400              MOVS     r4,#0                 ;280
0000d0  460d              MOV      r5,r1                 ;281
0000d2  e02a              B        |L1.298|
                  |L1.212|
0000d4  48cd              LDR      r0,|L1.1036|
0000d6  6800              LDR      r0,[r0,#0]            ;285
0000d8  9000              STR      r0,[sp,#0]            ;285
0000da  2b00              CMP      r3,#0                 ;286
0000dc  d011              BEQ      |L1.258|
0000de  2004              MOVS     r0,#4                 ;288
0000e0  1ac3              SUBS     r3,r0,r3              ;288
0000e2  1ac9              SUBS     r1,r1,r3              ;289
0000e4  48c9              LDR      r0,|L1.1036|
0000e6  6800              LDR      r0,[r0,#0]            ;290
0000e8  2620              MOVS     r6,#0x20              ;290
0000ea  4330              ORRS     r0,r0,r6              ;290
0000ec  4ec7              LDR      r6,|L1.1036|
0000ee  6030              STR      r0,[r6,#0]            ;290
0000f0  e003              B        |L1.250|
                  |L1.242|
0000f2  7810              LDRB     r0,[r2,#0]            ;293
0000f4  4ec5              LDR      r6,|L1.1036|
0000f6  6070              STR      r0,[r6,#4]            ;293
0000f8  1c52              ADDS     r2,r2,#1              ;293
                  |L1.250|
0000fa  4618              MOV      r0,r3                 ;291
0000fc  1e5b              SUBS     r3,r3,#1              ;291
0000fe  2800              CMP      r0,#0                 ;291
000100  d1f7              BNE      |L1.242|
                  |L1.258|
000102  088c              LSRS     r4,r1,#2              ;296
000104  078d              LSLS     r5,r1,#30             ;297
000106  0fad              LSRS     r5,r5,#30             ;297
000108  4ec0              LDR      r6,|L1.1036|
00010a  9800              LDR      r0,[sp,#0]            ;298
00010c  6030              STR      r0,[r6,#0]            ;298
00010e  2c00              CMP      r4,#0                 ;300
000110  d00a              BEQ      |L1.296|
000112  4610              MOV      r0,r2                 ;302
000114  e002              B        |L1.284|
                  |L1.278|
000116  c840              LDM      r0!,{r6}              ;305
000118  4fbc              LDR      r7,|L1.1036|
00011a  607e              STR      r6,[r7,#4]            ;305
                  |L1.284|
00011c  4626              MOV      r6,r4                 ;303
00011e  1e64              SUBS     r4,r4,#1              ;303
000120  2e00              CMP      r6,#0                 ;303
000122  d1f8              BNE      |L1.278|
000124  4602              MOV      r2,r0                 ;307
000126  bf00              NOP                            ;308
                  |L1.296|
000128  bf00              NOP                            ;309
                  |L1.298|
00012a  2d00              CMP      r5,#0                 ;311
00012c  d00e              BEQ      |L1.332|
00012e  48b7              LDR      r0,|L1.1036|
000130  6800              LDR      r0,[r0,#0]            ;313
000132  2620              MOVS     r6,#0x20              ;313
000134  4330              ORRS     r0,r0,r6              ;313
000136  4eb5              LDR      r6,|L1.1036|
000138  6030              STR      r0,[r6,#0]            ;313
00013a  e003              B        |L1.324|
                  |L1.316|
00013c  7810              LDRB     r0,[r2,#0]            ;316
00013e  4eb3              LDR      r6,|L1.1036|
000140  6070              STR      r0,[r6,#4]            ;316
000142  1c52              ADDS     r2,r2,#1              ;316
                  |L1.324|
000144  4628              MOV      r0,r5                 ;314
000146  1e6d              SUBS     r5,r5,#1              ;314
000148  2800              CMP      r0,#0                 ;314
00014a  d1f7              BNE      |L1.316|
                  |L1.332|
00014c  48af              LDR      r0,|L1.1036|
00014e  6840              LDR      r0,[r0,#4]            ;321
000150  b280              UXTH     r0,r0                 ;321
000152  e7b0              B        |L1.182|
;;;323    
                          ENDP

                  HED_GetChipInfo PROC
;;;325    /* Serial Num */
;;;326    void HED_GetChipInfo(unsigned char *DataBuf, unsigned int FlashAddr, unsigned int DataLen)
000154  b510              PUSH     {r4,lr}
;;;327    {
;;;328    	while(DataLen--)
000156  e003              B        |L1.352|
                  |L1.344|
;;;329    	{
;;;330    		*DataBuf++ = *(unsigned char *)FlashAddr;
000158  780b              LDRB     r3,[r1,#0]
00015a  7003              STRB     r3,[r0,#0]
00015c  1c40              ADDS     r0,r0,#1
;;;331    		FlashAddr += 0x00000001;
00015e  1c49              ADDS     r1,r1,#1
                  |L1.352|
000160  4613              MOV      r3,r2                 ;328
000162  1e52              SUBS     r2,r2,#1              ;328
000164  2b00              CMP      r3,#0                 ;328
000166  d1f7              BNE      |L1.344|
;;;332    	}
;;;333    } 
000168  bd10              POP      {r4,pc}
;;;334    /* Chip ID */
                          ENDP

                  HED_GetChipId PROC
;;;343    *************************************************/ 
;;;344    void HED_GetChipId(unsigned char *ChipId)
00016a  b51c              PUSH     {r2-r4,lr}
;;;345    {
00016c  4604              MOV      r4,r0
;;;346        unsigned char die_YX_position;
;;;347        unsigned char test_month;
;;;348        
;;;349        HED_GetChipInfo(ChipId,  FACTORY_CODE_SADDR+0x09, 1);	//Test year
00016e  2201              MOVS     r2,#1
000170  49a7              LDR      r1,|L1.1040|
000172  4620              MOV      r0,r4
000174  f7fffffe          BL       HED_GetChipInfo
;;;350        
;;;351        /*get 2nd sequence number*/
;;;352        HED_GetChipInfo(&die_YX_position,  FACTORY_CODE_SADDR+0x17, 1);	//get die X/Y position on wafer
000178  2201              MOVS     r2,#1
00017a  49a5              LDR      r1,|L1.1040|
00017c  310e              ADDS     r1,r1,#0xe
00017e  a801              ADD      r0,sp,#4
000180  f7fffffe          BL       HED_GetChipInfo
;;;353        HED_GetChipInfo(&test_month,  FACTORY_CODE_SADDR+0x0A, 1);	//get test_month
000184  2201              MOVS     r2,#1
000186  49a2              LDR      r1,|L1.1040|
000188  1c49              ADDS     r1,r1,#1
00018a  4668              MOV      r0,sp
00018c  f7fffffe          BL       HED_GetChipInfo
;;;354        die_YX_position = ((die_YX_position & 0x10) << 3) | ((die_YX_position & 0x01) << 6);    
000190  4668              MOV      r0,sp
000192  7900              LDRB     r0,[r0,#4]
000194  2110              MOVS     r1,#0x10
000196  4008              ANDS     r0,r0,r1
000198  00c1              LSLS     r1,r0,#3
00019a  4668              MOV      r0,sp
00019c  7900              LDRB     r0,[r0,#4]
00019e  07c0              LSLS     r0,r0,#31
0001a0  0e40              LSRS     r0,r0,#25
0001a2  4301              ORRS     r1,r1,r0
0001a4  4668              MOV      r0,sp
0001a6  7101              STRB     r1,[r0,#4]
;;;355        test_month = (test_month >> 4)*10 + (test_month & 0x0F);
0001a8  7800              LDRB     r0,[r0,#0]
0001aa  1101              ASRS     r1,r0,#4
0001ac  200a              MOVS     r0,#0xa
0001ae  4341              MULS     r1,r0,r1
0001b0  4668              MOV      r0,sp
0001b2  7800              LDRB     r0,[r0,#0]
0001b4  0700              LSLS     r0,r0,#28
0001b6  0f00              LSRS     r0,r0,#28
0001b8  1808              ADDS     r0,r1,r0
0001ba  b2c1              UXTB     r1,r0
0001bc  4668              MOV      r0,sp
0001be  7001              STRB     r1,[r0,#0]
;;;356        test_month &= 0x3F;
0001c0  7800              LDRB     r0,[r0,#0]
0001c2  0681              LSLS     r1,r0,#26
0001c4  0e89              LSRS     r1,r1,#26
0001c6  4668              MOV      r0,sp
0001c8  7001              STRB     r1,[r0,#0]
;;;357        ChipId[1] = die_YX_position | test_month;
0001ca  7900              LDRB     r0,[r0,#4]
0001cc  4669              MOV      r1,sp
0001ce  7809              LDRB     r1,[r1,#0]
0001d0  4308              ORRS     r0,r0,r1
0001d2  7060              STRB     r0,[r4,#1]
;;;358        /*get 2nd sequence number*/
;;;359        
;;;360        HED_GetChipInfo(ChipId+2,  FACTORY_CODE_SADDR+0x1C, 1);	//lot number (highest byte)
0001d4  2201              MOVS     r2,#1
0001d6  498e              LDR      r1,|L1.1040|
0001d8  3113              ADDS     r1,r1,#0x13
0001da  1ca0              ADDS     r0,r4,#2
0001dc  f7fffffe          BL       HED_GetChipInfo
;;;361        HED_GetChipInfo(ChipId+3,  FACTORY_CODE_SADDR+0x1D, 1);	//lot number (second byte)
0001e0  2201              MOVS     r2,#1
0001e2  498b              LDR      r1,|L1.1040|
0001e4  3114              ADDS     r1,r1,#0x14
0001e6  1ce0              ADDS     r0,r4,#3
0001e8  f7fffffe          BL       HED_GetChipInfo
;;;362        HED_GetChipInfo(ChipId+4,  FACTORY_CODE_SADDR+0x1E, 1);	//lot number (third byte)
0001ec  2201              MOVS     r2,#1
0001ee  4988              LDR      r1,|L1.1040|
0001f0  3115              ADDS     r1,r1,#0x15
0001f2  1d20              ADDS     r0,r4,#4
0001f4  f7fffffe          BL       HED_GetChipInfo
;;;363        HED_GetChipInfo(ChipId+5,  FACTORY_CODE_SADDR+0x1F, 1);	//lot number (fourth byte)
0001f8  2201              MOVS     r2,#1
0001fa  4985              LDR      r1,|L1.1040|
0001fc  3116              ADDS     r1,r1,#0x16
0001fe  1d60              ADDS     r0,r4,#5
000200  f7fffffe          BL       HED_GetChipInfo
;;;364        HED_GetChipInfo(ChipId+6,  FACTORY_CODE_SADDR+0x0B, 1);	//lot number (fifth byte)
000204  2201              MOVS     r2,#1
000206  4982              LDR      r1,|L1.1040|
000208  1c89              ADDS     r1,r1,#2
00020a  1da0              ADDS     r0,r4,#6
00020c  f7fffffe          BL       HED_GetChipInfo
;;;365        HED_GetChipInfo(ChipId+7,  FACTORY_CODE_SADDR+0x0C, 1);	//lot number (lowest byte)
000210  2201              MOVS     r2,#1
000212  497f              LDR      r1,|L1.1040|
000214  1cc9              ADDS     r1,r1,#3
000216  1de0              ADDS     r0,r4,#7
000218  f7fffffe          BL       HED_GetChipInfo
;;;366        HED_GetChipInfo(ChipId+8,  FACTORY_CODE_SADDR+0x1A, 1);	//lot subsidiary number (high byte)
00021c  2201              MOVS     r2,#1
00021e  497c              LDR      r1,|L1.1040|
000220  3111              ADDS     r1,r1,#0x11
000222  4620              MOV      r0,r4
000224  3008              ADDS     r0,r0,#8
000226  f7fffffe          BL       HED_GetChipInfo
;;;367        HED_GetChipInfo(ChipId+9,  FACTORY_CODE_SADDR+0x1B, 1);	//lot subsidiary number (low byte)
00022a  2201              MOVS     r2,#1
00022c  4978              LDR      r1,|L1.1040|
00022e  3112              ADDS     r1,r1,#0x12
000230  4620              MOV      r0,r4
000232  3009              ADDS     r0,r0,#9
000234  f7fffffe          BL       HED_GetChipInfo
;;;368        HED_GetChipInfo(ChipId+10,  FACTORY_CODE_SADDR+0x0D, 1); //wafer number
000238  2201              MOVS     r2,#1
00023a  4975              LDR      r1,|L1.1040|
00023c  1d09              ADDS     r1,r1,#4
00023e  4620              MOV      r0,r4
000240  300a              ADDS     r0,r0,#0xa
000242  f7fffffe          BL       HED_GetChipInfo
;;;369        HED_GetChipInfo(ChipId+11,  FACTORY_CODE_SADDR+0x0E, 1); //die X position on wafer
000246  2201              MOVS     r2,#1
000248  4971              LDR      r1,|L1.1040|
00024a  1d49              ADDS     r1,r1,#5
00024c  4620              MOV      r0,r4
00024e  300b              ADDS     r0,r0,#0xb
000250  f7fffffe          BL       HED_GetChipInfo
;;;370        HED_GetChipInfo(ChipId+12,  FACTORY_CODE_SADDR+0x0F, 1); //die Y position on wafer
000254  2201              MOVS     r2,#1
000256  496e              LDR      r1,|L1.1040|
000258  1d89              ADDS     r1,r1,#6
00025a  4620              MOV      r0,r4
00025c  300c              ADDS     r0,r0,#0xc
00025e  f7fffffe          BL       HED_GetChipInfo
;;;371    }
000262  bd1c              POP      {r2-r4,pc}
;;;372    
                          ENDP

                  HED_GetFactoryCode PROC
;;;382    *************************************************/ 
;;;383    void HED_GetFactoryCode(unsigned char *FactoryCode)
000264  b510              PUSH     {r4,lr}
;;;384    {
000266  4604              MOV      r4,r0
;;;385    	HED_GetChipInfo(FactoryCode, FACTORY_CODE_SADDR, 32);
000268  2220              MOVS     r2,#0x20
00026a  4969              LDR      r1,|L1.1040|
00026c  3909              SUBS     r1,r1,#9
00026e  4620              MOV      r0,r4
000270  f7fffffe          BL       HED_GetChipInfo
;;;386    }
000274  bd10              POP      {r4,pc}
;;;387    
                          ENDP

                  HED_ChangeSYSFreq PROC
;;;437    
;;;438    void HED_ChangeSYSFreq(SYS_FREQUENCY_DIVISOR SysDiv, APB_FREQUENCY_DIVISOR APBDiv) 
000276  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;439    {	
000278  b081              SUB      sp,sp,#4
00027a  4605              MOV      r5,r0
;;;440    	unsigned int currDiv,SysDivGap;
;;;441    	unsigned int tmpSysClk;    
;;;442        
;;;443    	if (APBDiv == APB_HALF_AHB)
00027c  9802              LDR      r0,[sp,#8]
00027e  2801              CMP      r0,#1
000280  d107              BNE      |L1.658|
;;;444    	{
;;;445    		SET_REG_BIT(SYSCLKCFG,SYSCLKCFG_APBDIV);
000282  4864              LDR      r0,|L1.1044|
000284  6880              LDR      r0,[r0,#8]
000286  2101              MOVS     r1,#1
000288  0309              LSLS     r1,r1,#12
00028a  4308              ORRS     r0,r0,r1
00028c  4961              LDR      r1,|L1.1044|
00028e  6088              STR      r0,[r1,#8]
000290  e006              B        |L1.672|
                  |L1.658|
;;;446    	}
;;;447    	else
;;;448    	{
;;;449    		CLEAR_REG_BIT(SYSCLKCFG, SYSCLKCFG_APBDIV);
000292  4860              LDR      r0,|L1.1044|
000294  6880              LDR      r0,[r0,#8]
000296  2101              MOVS     r1,#1
000298  0309              LSLS     r1,r1,#12
00029a  4388              BICS     r0,r0,r1
00029c  495d              LDR      r1,|L1.1044|
00029e  6088              STR      r0,[r1,#8]
                  |L1.672|
;;;450    	}
;;;451        
;;;452    	tmpSysClk = SYSCLKCFG;
0002a0  485c              LDR      r0,|L1.1044|
0002a2  6884              LDR      r4,[r0,#8]
;;;453        currDiv = (SYSCLKCFG & (0x07 << SYSCLKCFG_SYSDIV)) >> SYSCLKCFG_SYSDIV;//sysclk is SYSCLKCFG[6:4]
0002a4  6880              LDR      r0,[r0,#8]
0002a6  2170              MOVS     r1,#0x70
0002a8  4008              ANDS     r0,r0,r1
0002aa  0906              LSRS     r6,r0,#4
;;;454    
;;;455    	if (currDiv == SysDiv)//no switch
0002ac  42ae              CMP      r6,r5
0002ae  d10a              BNE      |L1.710|
;;;456    	{
;;;457            tmpSysClk &= ~(0x07 << SYSCLKCFG_PKEDIV);
0002b0  0409              LSLS     r1,r1,#16
0002b2  4620              MOV      r0,r4
0002b4  4388              BICS     r0,r0,r1
0002b6  4604              MOV      r4,r0
;;;458            tmpSysClk |= (SYS_PKE_ClkTable[SysDiv] << SYSCLKCFG_PKEDIV);
0002b8  4857              LDR      r0,|L1.1048|
0002ba  5d40              LDRB     r0,[r0,r5]
0002bc  0500              LSLS     r0,r0,#20
0002be  4304              ORRS     r4,r4,r0
;;;459            SYSCLKCFG = tmpSysClk;//renew PKE Div        
0002c0  4854              LDR      r0,|L1.1044|
0002c2  6084              STR      r4,[r0,#8]
                  |L1.708|
;;;460            return;
;;;461    	}
;;;462    	else if(currDiv > SysDiv)//up switch
;;;463    	{
;;;464            SysDivGap = currDiv - SysDiv;
;;;465    	}	
;;;466        else//down switch
;;;467        {
;;;468            SysDivGap = SysDiv - currDiv;
;;;469        }
;;;470        
;;;471        if((SysDivGap == 2) || (SysDivGap == 6))//SysDIV switch to 18M first,then target Div
;;;472        {
;;;473            tmpSysClk &= ~(0x07 << SYSCLKCFG_SYSDIV);
;;;474            tmpSysClk |= (1 << SYSCLKCFG_SYSDIV); //prepare switch to 18Mhz 
;;;475            SYSCLKCFG = tmpSysClk; 
;;;476            delay(43);//delay 10us when 18Mhz
;;;477            tmpSysClk &= ~(0x07 << SYSCLKCFG_SYSDIV);
;;;478            tmpSysClk |= (SysDiv <<SYSCLKCFG_SYSDIV);//prepare switch to target Div
;;;479            SYSCLKCFG = tmpSysClk;
;;;480        }
;;;481        else//SysDIV switch to target Div directly
;;;482        {
;;;483            tmpSysClk &= ~(0x07 << SYSCLKCFG_SYSDIV);
;;;484            tmpSysClk |= (SysDiv <<SYSCLKCFG_SYSDIV);//prepare switch to target SYSDIV  
;;;485            SYSCLKCFG = tmpSysClk;            
;;;486        }    
;;;487        
;;;488        tmpSysClk &= ~(0x07 << SYSCLKCFG_PKEDIV);
;;;489        tmpSysClk |= (SYS_PKE_ClkTable[SysDiv] << SYSCLKCFG_PKEDIV);
;;;490        SYSCLKCFG = tmpSysClk;//set PKE Div
;;;491    }
0002c4  bdfe              POP      {r1-r7,pc}
                  |L1.710|
0002c6  42ae              CMP      r6,r5                 ;462
0002c8  d901              BLS      |L1.718|
0002ca  1b77              SUBS     r7,r6,r5              ;464
0002cc  e000              B        |L1.720|
                  |L1.718|
0002ce  1baf              SUBS     r7,r5,r6              ;468
                  |L1.720|
0002d0  2f02              CMP      r7,#2                 ;471
0002d2  d001              BEQ      |L1.728|
0002d4  2f06              CMP      r7,#6                 ;471
0002d6  d113              BNE      |L1.768|
                  |L1.728|
0002d8  2170              MOVS     r1,#0x70              ;473
0002da  4620              MOV      r0,r4                 ;473
0002dc  4388              BICS     r0,r0,r1              ;473
0002de  4604              MOV      r4,r0                 ;473
0002e0  2010              MOVS     r0,#0x10              ;474
0002e2  4304              ORRS     r4,r4,r0              ;474
0002e4  484b              LDR      r0,|L1.1044|
0002e6  6084              STR      r4,[r0,#8]            ;475
0002e8  202b              MOVS     r0,#0x2b              ;476
0002ea  f7fffffe          BL       delay
0002ee  2170              MOVS     r1,#0x70              ;477
0002f0  4620              MOV      r0,r4                 ;477
0002f2  4388              BICS     r0,r0,r1              ;477
0002f4  4604              MOV      r4,r0                 ;477
0002f6  0128              LSLS     r0,r5,#4              ;478
0002f8  4304              ORRS     r4,r4,r0              ;478
0002fa  4846              LDR      r0,|L1.1044|
0002fc  6084              STR      r4,[r0,#8]            ;479
0002fe  e007              B        |L1.784|
                  |L1.768|
000300  2170              MOVS     r1,#0x70              ;483
000302  4620              MOV      r0,r4                 ;483
000304  4388              BICS     r0,r0,r1              ;483
000306  4604              MOV      r4,r0                 ;483
000308  0128              LSLS     r0,r5,#4              ;484
00030a  4304              ORRS     r4,r4,r0              ;484
00030c  4841              LDR      r0,|L1.1044|
00030e  6084              STR      r4,[r0,#8]            ;485
                  |L1.784|
000310  2107              MOVS     r1,#7                 ;488
000312  0509              LSLS     r1,r1,#20             ;488
000314  4620              MOV      r0,r4                 ;488
000316  4388              BICS     r0,r0,r1              ;488
000318  4604              MOV      r4,r0                 ;488
00031a  483f              LDR      r0,|L1.1048|
00031c  5d40              LDRB     r0,[r0,r5]            ;489
00031e  0500              LSLS     r0,r0,#20             ;489
000320  4304              ORRS     r4,r4,r0              ;489
000322  483c              LDR      r0,|L1.1044|
000324  6084              STR      r4,[r0,#8]            ;490
000326  bf00              NOP      
000328  e7cc              B        |L1.708|
;;;492    
                          ENDP

                  HED_SetToStandby PROC
;;;503    *************************************************/ 
;;;504    void HED_SetToStandby(void)
00032a  b5f8              PUSH     {r3-r7,lr}
;;;505    {
;;;506    	unsigned int bak_SYSCLKEN,bak_SYSCLKCFG;
;;;507        unsigned int bak_SYSDiv,bak_APBDiv;
;;;508        
;;;509        bak_SYSCLKEN = SYSCLKEN;
00032c  4839              LDR      r0,|L1.1044|
00032e  6806              LDR      r6,[r0,#0]
;;;510        bak_SYSCLKCFG = SYSCLKCFG;
000330  6885              LDR      r5,[r0,#8]
;;;511        bak_SYSDiv = (bak_SYSCLKCFG & (0x07 << SYSCLKCFG_SYSDIV)) >> SYSCLKCFG_SYSDIV;//sysclk is SYSCLKCFG[6:4]
000332  2070              MOVS     r0,#0x70
000334  4028              ANDS     r0,r0,r5
000336  0904              LSRS     r4,r0,#4
;;;512        bak_APBDiv = (bak_SYSCLKCFG & (0x01 << SYSCLKCFG_APBDIV)) >> SYSCLKCFG_APBDIV;//sysclk is SYSCLKCFG[bit12]
000338  2001              MOVS     r0,#1
00033a  0300              LSLS     r0,r0,#12
00033c  4028              ANDS     r0,r0,r5
00033e  0b07              LSRS     r7,r0,#12
;;;513    
;;;514    	SYSCLKCLR = (1<<4) | (1<<11); //disable PKE/SM4 IP's clock
000340  2081              MOVS     r0,#0x81
000342  0100              LSLS     r0,r0,#4
000344  4933              LDR      r1,|L1.1044|
000346  6048              STR      r0,[r1,#4]
;;;515        
;;;516        HED_ChangeSYSFreq(SYSCLK_AHB_6Mhz,APB_HALF_AHB);
000348  2101              MOVS     r1,#1
00034a  2006              MOVS     r0,#6
00034c  f7fffffe          BL       HED_ChangeSYSFreq
;;;517        
;;;518    	if(SCI_IS_IDLE)
000350  482d              LDR      r0,|L1.1032|
000352  6880              LDR      r0,[r0,#8]
000354  2108              MOVS     r1,#8
000356  4208              TST      r0,r1
000358  d105              BNE      |L1.870|
00035a  482b              LDR      r0,|L1.1032|
00035c  6940              LDR      r0,[r0,#0x14]
00035e  2102              MOVS     r1,#2
000360  4208              TST      r0,r1
000362  d000              BEQ      |L1.870|
;;;519        {
;;;520             __wfe(); //set standby
000364  bf20              WFE      
                  |L1.870|
;;;521        }
;;;522        
;;;523        if((bak_SYSDiv == 0) || (bak_SYSDiv == 1) || (bak_SYSDiv == 2) || (bak_SYSDiv == 6))
000366  2c00              CMP      r4,#0
000368  d005              BEQ      |L1.886|
00036a  2c01              CMP      r4,#1
00036c  d003              BEQ      |L1.886|
00036e  2c02              CMP      r4,#2
000370  d001              BEQ      |L1.886|
000372  2c06              CMP      r4,#6
000374  d103              BNE      |L1.894|
                  |L1.886|
;;;524        {
;;;525            HED_ChangeSYSFreq((SYS_FREQUENCY_DIVISOR)bak_SYSDiv,(APB_FREQUENCY_DIVISOR)bak_APBDiv);//restore SYSCLKCFG
000376  b2f9              UXTB     r1,r7
000378  b2e0              UXTB     r0,r4
00037a  f7fffffe          BL       HED_ChangeSYSFreq
                  |L1.894|
;;;526        }
;;;527        
;;;528    	SYSCLKEN = bak_SYSCLKEN;//enable IP's CLK							
00037e  4825              LDR      r0,|L1.1044|
000380  6006              STR      r6,[r0,#0]
;;;529    }
000382  bdf8              POP      {r3-r7,pc}
;;;530    
                          ENDP

                  HED_Memcpy PROC
;;;590    *************************************************/ 
;;;591    void HED_Memcpy(unsigned char* to,unsigned char* from,unsigned int count)
000384  b510              PUSH     {r4,lr}
;;;592    {
;;;593    	while(count-- != 0)
000386  e003              B        |L1.912|
                  |L1.904|
;;;594    	{
;;;595    		*to++ = *from++;
000388  780b              LDRB     r3,[r1,#0]
00038a  7003              STRB     r3,[r0,#0]
00038c  1c49              ADDS     r1,r1,#1
00038e  1c40              ADDS     r0,r0,#1
                  |L1.912|
000390  4613              MOV      r3,r2                 ;593
000392  1e52              SUBS     r2,r2,#1              ;593
000394  2b00              CMP      r3,#0                 ;593
000396  d1f7              BNE      |L1.904|
;;;596    	}
;;;597    }
000398  bd10              POP      {r4,pc}
;;;598    /************************************************* 
                          ENDP

                  HED_WordEndianAlter PROC
;;;606    *************************************************/ 
;;;607    unsigned int HED_WordEndianAlter(unsigned int inWord)
00039a  b508              PUSH     {r3,lr}
;;;608    {
00039c  4601              MOV      r1,r0
;;;609    	unsigned int outWord;
;;;610        unsigned char* tmpBytePtr;
;;;611        
;;;612        tmpBytePtr = (unsigned char*)(&outWord);
00039e  466a              MOV      r2,sp
;;;613        tmpBytePtr[0] = inWord >> 0;
0003a0  7011              STRB     r1,[r2,#0]
;;;614        tmpBytePtr[1] = inWord >> 8;
0003a2  0408              LSLS     r0,r1,#16
0003a4  0e00              LSRS     r0,r0,#24
0003a6  7050              STRB     r0,[r2,#1]
;;;615        tmpBytePtr[2] = inWord >> 16;
0003a8  0208              LSLS     r0,r1,#8
0003aa  0e00              LSRS     r0,r0,#24
0003ac  7090              STRB     r0,[r2,#2]
;;;616        tmpBytePtr[3] = inWord >> 24;
0003ae  0e08              LSRS     r0,r1,#24
0003b0  70d0              STRB     r0,[r2,#3]
;;;617        
;;;618        return outWord;
0003b2  9800              LDR      r0,[sp,#0]
;;;619    }
0003b4  bd08              POP      {r3,pc}
;;;620    /* SPI-Master */
                          ENDP

                  HED_SPIM_SendNBytes PROC
;;;629    *************************************************/ 
;;;630    void HED_SPIM_SendNBytes(unsigned char *DataAddr, unsigned int DataLen)
0003b6  b5ff              PUSH     {r0-r7,lr}
;;;631    {
0003b8  4606              MOV      r6,r0
0003ba  460f              MOV      r7,r1
;;;632    	unsigned int div16Quotien, div16Mod;
;;;633    	unsigned int * tmpDataAddr,* tmpSpiData;
;;;634    	unsigned int disToPreviousWord,disToNextWord; //distance to previous/next word border
;;;635    	
;;;636        disToPreviousWord = (unsigned int)DataAddr & 0x03;
0003bc  07b0              LSLS     r0,r6,#30
0003be  0f80              LSRS     r0,r0,#30
0003c0  9001              STR      r0,[sp,#4]
;;;637        disToNextWord = 0x04 - disToPreviousWord;
0003c2  2104              MOVS     r1,#4
0003c4  9801              LDR      r0,[sp,#4]
0003c6  1a08              SUBS     r0,r1,r0
0003c8  9000              STR      r0,[sp,#0]
;;;638    	if (DataLen == 0x00)
0003ca  2f00              CMP      r7,#0
0003cc  d100              BNE      |L1.976|
                  |L1.974|
;;;639    	{
;;;640    		return;
;;;641    	}
;;;642    
;;;643    	if (disToPreviousWord) 
;;;644    	{
;;;645    		if (DataLen <= 0x04)
;;;646    		{
;;;647    			SPIDLEN = DataLen - 1; 
;;;648    			SPIDATA = (unsigned int)((DataAddr[3] << 24) | (DataAddr[2] << 16) | (DataAddr[1] << 8) | DataAddr[0]);
;;;649    			START_SPI_MSTR_TRANS; //transfer start
;;;650    			while (SPI_IS_BUSY);
;;;651    			CLEAR_SPI_DONE; 
;;;652    			return;
;;;653    		}
;;;654    		else //front n bytes
;;;655    		{
;;;656    			SPIDLEN = disToNextWord - 0x01;
;;;657                SPIDATA = (unsigned int)((DataAddr[3] << 24) | (DataAddr[2] << 16) | (DataAddr[1] << 8) | DataAddr[0]);
;;;658    			START_SPI_MSTR_TRANS; //transfer start
;;;659    			while (SPI_IS_BUSY);
;;;660    			CLEAR_SPI_DONE;
;;;661    			DataLen -= disToNextWord;
;;;662    			DataAddr += disToNextWord;
;;;663    		}
;;;664    	}
;;;665    	div16Quotien = DataLen >> 4; 
;;;666    	div16Mod = DataLen & 0xF;
;;;667    	tmpDataAddr = (unsigned int *)DataAddr;
;;;668    	if (div16Quotien)
;;;669    	{
;;;670    		//16 bytes a time
;;;671    		SPIDLEN = 0xF; 
;;;672    		while (div16Quotien--)
;;;673    		{
;;;674    			tmpSpiData = (unsigned int *)&SPIDATA;
;;;675                
;;;676                *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;677                *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;678                *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;679                *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;680    
;;;681    			START_SPI_MSTR_TRANS; //transfer start
;;;682    			while (SPI_IS_BUSY);
;;;683    			CLEAR_SPI_DONE; 
;;;684    		}
;;;685    	}
;;;686    
;;;687    	if (div16Mod)
;;;688    	{
;;;689    		SPIDLEN = div16Mod - 1; //left bytes
;;;690    		tmpSpiData = (unsigned int *)&SPIDATA;
;;;691            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;692            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;693            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;694            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
;;;695    		START_SPI_MSTR_TRANS; //transfer start 
;;;696    		while (SPI_IS_BUSY);
;;;697    		CLEAR_SPI_DONE;
;;;698    	}
;;;699    }
0003ce  bdff              POP      {r0-r7,pc}
                  |L1.976|
0003d0  9801              LDR      r0,[sp,#4]            ;643
0003d2  2800              CMP      r0,#0                 ;643
0003d4  d062              BEQ      |L1.1180|
0003d6  2f04              CMP      r7,#4                 ;645
0003d8  d834              BHI      |L1.1092|
0003da  1e78              SUBS     r0,r7,#1              ;647
0003dc  490f              LDR      r1,|L1.1052|
0003de  6048              STR      r0,[r1,#4]            ;647
0003e0  78f0              LDRB     r0,[r6,#3]            ;648
0003e2  0600              LSLS     r0,r0,#24             ;648
0003e4  78b1              LDRB     r1,[r6,#2]            ;648
0003e6  0409              LSLS     r1,r1,#16             ;648
0003e8  4308              ORRS     r0,r0,r1              ;648
0003ea  7871              LDRB     r1,[r6,#1]            ;648
0003ec  0209              LSLS     r1,r1,#8              ;648
0003ee  4308              ORRS     r0,r0,r1              ;648
0003f0  7831              LDRB     r1,[r6,#0]            ;648
0003f2  4308              ORRS     r0,r0,r1              ;648
0003f4  4909              LDR      r1,|L1.1052|
0003f6  3140              ADDS     r1,r1,#0x40           ;648
0003f8  6008              STR      r0,[r1,#0]            ;648
0003fa  4808              LDR      r0,|L1.1052|
0003fc  6980              LDR      r0,[r0,#0x18]         ;649
0003fe  2101              MOVS     r1,#1                 ;649
000400  4308              ORRS     r0,r0,r1              ;649
000402  4906              LDR      r1,|L1.1052|
000404  6188              STR      r0,[r1,#0x18]         ;649
000406  e00b              B        |L1.1056|
                  |L1.1032|
                          DCD      0x40001000
                  |L1.1036|
                          DCD      0x50005000
                  |L1.1040|
                          DCD      0x1ffffe09
                  |L1.1044|
                          DCD      0x50007200
                  |L1.1048|
                          DCD      SYS_PKE_ClkTable
                  |L1.1052|
                          DCD      0x40001800
                  |L1.1056|
000420  bf00              NOP                            ;650
                  |L1.1058|
000422  48fa              LDR      r0,|L1.2060|
000424  6880              LDR      r0,[r0,#8]            ;650
000426  07c0              LSLS     r0,r0,#31             ;650
000428  0fc0              LSRS     r0,r0,#31             ;650
00042a  d0fa              BEQ      |L1.1058|
00042c  48f7              LDR      r0,|L1.2060|
00042e  6880              LDR      r0,[r0,#8]            ;651
000430  0840              LSRS     r0,r0,#1              ;651
000432  0040              LSLS     r0,r0,#1              ;651
000434  49f5              LDR      r1,|L1.2060|
000436  6088              STR      r0,[r1,#8]            ;651
000438  4608              MOV      r0,r1                 ;651
00043a  6940              LDR      r0,[r0,#0x14]         ;651
00043c  0840              LSRS     r0,r0,#1              ;651
00043e  0040              LSLS     r0,r0,#1              ;651
000440  6148              STR      r0,[r1,#0x14]         ;651
000442  e7c4              B        |L1.974|
                  |L1.1092|
000444  9800              LDR      r0,[sp,#0]            ;656
000446  1e40              SUBS     r0,r0,#1              ;656
000448  49f0              LDR      r1,|L1.2060|
00044a  6048              STR      r0,[r1,#4]            ;656
00044c  78f0              LDRB     r0,[r6,#3]            ;657
00044e  0600              LSLS     r0,r0,#24             ;657
000450  78b1              LDRB     r1,[r6,#2]            ;657
000452  0409              LSLS     r1,r1,#16             ;657
000454  4308              ORRS     r0,r0,r1              ;657
000456  7871              LDRB     r1,[r6,#1]            ;657
000458  0209              LSLS     r1,r1,#8              ;657
00045a  4308              ORRS     r0,r0,r1              ;657
00045c  7831              LDRB     r1,[r6,#0]            ;657
00045e  4308              ORRS     r0,r0,r1              ;657
000460  49ea              LDR      r1,|L1.2060|
000462  3140              ADDS     r1,r1,#0x40           ;657
000464  6008              STR      r0,[r1,#0]            ;657
000466  48e9              LDR      r0,|L1.2060|
000468  6980              LDR      r0,[r0,#0x18]         ;658
00046a  2101              MOVS     r1,#1                 ;658
00046c  4308              ORRS     r0,r0,r1              ;658
00046e  49e7              LDR      r1,|L1.2060|
000470  6188              STR      r0,[r1,#0x18]         ;658
000472  bf00              NOP                            ;659
                  |L1.1140|
000474  48e5              LDR      r0,|L1.2060|
000476  6880              LDR      r0,[r0,#8]            ;659
000478  07c0              LSLS     r0,r0,#31             ;659
00047a  0fc0              LSRS     r0,r0,#31             ;659
00047c  d0fa              BEQ      |L1.1140|
00047e  48e3              LDR      r0,|L1.2060|
000480  6880              LDR      r0,[r0,#8]            ;660
000482  0840              LSRS     r0,r0,#1              ;660
000484  0040              LSLS     r0,r0,#1              ;660
000486  49e1              LDR      r1,|L1.2060|
000488  6088              STR      r0,[r1,#8]            ;660
00048a  4608              MOV      r0,r1                 ;660
00048c  6940              LDR      r0,[r0,#0x14]         ;660
00048e  0840              LSRS     r0,r0,#1              ;660
000490  0040              LSLS     r0,r0,#1              ;660
000492  6148              STR      r0,[r1,#0x14]         ;660
000494  9800              LDR      r0,[sp,#0]            ;661
000496  1a3f              SUBS     r7,r7,r0              ;661
000498  9800              LDR      r0,[sp,#0]            ;662
00049a  1836              ADDS     r6,r6,r0              ;662
                  |L1.1180|
00049c  0938              LSRS     r0,r7,#4              ;665
00049e  9003              STR      r0,[sp,#0xc]          ;665
0004a0  0738              LSLS     r0,r7,#28             ;666
0004a2  0f00              LSRS     r0,r0,#28             ;666
0004a4  9002              STR      r0,[sp,#8]            ;666
0004a6  4634              MOV      r4,r6                 ;667
0004a8  9803              LDR      r0,[sp,#0xc]          ;668
0004aa  2800              CMP      r0,#0                 ;668
0004ac  d031              BEQ      |L1.1298|
0004ae  200f              MOVS     r0,#0xf               ;671
0004b0  49d6              LDR      r1,|L1.2060|
0004b2  6048              STR      r0,[r1,#4]            ;671
0004b4  e028              B        |L1.1288|
                  |L1.1206|
0004b6  4dd5              LDR      r5,|L1.2060|
0004b8  3540              ADDS     r5,r5,#0x40           ;674
0004ba  cc01              LDM      r4!,{r0}              ;676
0004bc  f7fffffe          BL       HED_WordEndianAlter
0004c0  c501              STM      r5!,{r0}              ;676
0004c2  cc01              LDM      r4!,{r0}              ;677
0004c4  f7fffffe          BL       HED_WordEndianAlter
0004c8  c501              STM      r5!,{r0}              ;677
0004ca  cc01              LDM      r4!,{r0}              ;678
0004cc  f7fffffe          BL       HED_WordEndianAlter
0004d0  c501              STM      r5!,{r0}              ;678
0004d2  cc01              LDM      r4!,{r0}              ;679
0004d4  f7fffffe          BL       HED_WordEndianAlter
0004d8  c501              STM      r5!,{r0}              ;679
0004da  48cc              LDR      r0,|L1.2060|
0004dc  6980              LDR      r0,[r0,#0x18]         ;681
0004de  2101              MOVS     r1,#1                 ;681
0004e0  4308              ORRS     r0,r0,r1              ;681
0004e2  49ca              LDR      r1,|L1.2060|
0004e4  6188              STR      r0,[r1,#0x18]         ;681
0004e6  bf00              NOP                            ;682
                  |L1.1256|
0004e8  48c8              LDR      r0,|L1.2060|
0004ea  6880              LDR      r0,[r0,#8]            ;682
0004ec  07c0              LSLS     r0,r0,#31             ;682
0004ee  0fc0              LSRS     r0,r0,#31             ;682
0004f0  d0fa              BEQ      |L1.1256|
0004f2  48c6              LDR      r0,|L1.2060|
0004f4  6880              LDR      r0,[r0,#8]            ;683
0004f6  0840              LSRS     r0,r0,#1              ;683
0004f8  0040              LSLS     r0,r0,#1              ;683
0004fa  49c4              LDR      r1,|L1.2060|
0004fc  6088              STR      r0,[r1,#8]            ;683
0004fe  4608              MOV      r0,r1                 ;683
000500  6940              LDR      r0,[r0,#0x14]         ;683
000502  0840              LSRS     r0,r0,#1              ;683
000504  0040              LSLS     r0,r0,#1              ;683
000506  6148              STR      r0,[r1,#0x14]         ;683
                  |L1.1288|
000508  9803              LDR      r0,[sp,#0xc]          ;672
00050a  1e41              SUBS     r1,r0,#1              ;672
00050c  9103              STR      r1,[sp,#0xc]          ;672
00050e  2800              CMP      r0,#0                 ;672
000510  d1d1              BNE      |L1.1206|
                  |L1.1298|
000512  9802              LDR      r0,[sp,#8]            ;687
000514  2800              CMP      r0,#0                 ;687
000516  d02c              BEQ      |L1.1394|
000518  9802              LDR      r0,[sp,#8]            ;689
00051a  1e40              SUBS     r0,r0,#1              ;689
00051c  49bb              LDR      r1,|L1.2060|
00051e  6048              STR      r0,[r1,#4]            ;689
000520  4dba              LDR      r5,|L1.2060|
000522  3540              ADDS     r5,r5,#0x40           ;690
000524  cc01              LDM      r4!,{r0}              ;691
000526  f7fffffe          BL       HED_WordEndianAlter
00052a  c501              STM      r5!,{r0}              ;691
00052c  cc01              LDM      r4!,{r0}              ;692
00052e  f7fffffe          BL       HED_WordEndianAlter
000532  c501              STM      r5!,{r0}              ;692
000534  cc01              LDM      r4!,{r0}              ;693
000536  f7fffffe          BL       HED_WordEndianAlter
00053a  c501              STM      r5!,{r0}              ;693
00053c  cc01              LDM      r4!,{r0}              ;694
00053e  f7fffffe          BL       HED_WordEndianAlter
000542  c501              STM      r5!,{r0}              ;694
000544  48b1              LDR      r0,|L1.2060|
000546  6980              LDR      r0,[r0,#0x18]         ;695
000548  2101              MOVS     r1,#1                 ;695
00054a  4308              ORRS     r0,r0,r1              ;695
00054c  49af              LDR      r1,|L1.2060|
00054e  6188              STR      r0,[r1,#0x18]         ;695
000550  bf00              NOP                            ;696
                  |L1.1362|
000552  48ae              LDR      r0,|L1.2060|
000554  6880              LDR      r0,[r0,#8]            ;696
000556  07c0              LSLS     r0,r0,#31             ;696
000558  0fc0              LSRS     r0,r0,#31             ;696
00055a  d0fa              BEQ      |L1.1362|
00055c  48ab              LDR      r0,|L1.2060|
00055e  6880              LDR      r0,[r0,#8]            ;697
000560  0840              LSRS     r0,r0,#1              ;697
000562  0040              LSLS     r0,r0,#1              ;697
000564  49a9              LDR      r1,|L1.2060|
000566  6088              STR      r0,[r1,#8]            ;697
000568  4608              MOV      r0,r1                 ;697
00056a  6940              LDR      r0,[r0,#0x14]         ;697
00056c  0840              LSRS     r0,r0,#1              ;697
00056e  0040              LSLS     r0,r0,#1              ;697
000570  6148              STR      r0,[r1,#0x14]         ;697
                  |L1.1394|
000572  bf00              NOP      
000574  e72b              B        |L1.974|
;;;700    /************************************************* 
                          ENDP

                  HED_SPIM_ReceiveNBytesRam PROC
;;;708    *************************************************/ 
;;;709    void HED_SPIM_ReceiveNBytesRam(unsigned char *DataAddr, unsigned int DataLen)
000576  b5f0              PUSH     {r4-r7,lr}
;;;710    {
000578  b088              SUB      sp,sp,#0x20
00057a  4607              MOV      r7,r0
00057c  460e              MOV      r6,r1
;;;711    	unsigned int div16Quotien, div16Mod;
;;;712    	unsigned int* tmpDataAddr,*tmpSpiData;
;;;713    	unsigned int disToPreviousWord,disToNextWord; //distance to previous/next word border
;;;714    	unsigned int databuf[4];
;;;715        
;;;716        disToPreviousWord = (unsigned int)DataAddr & 0x03;
00057e  07b8              LSLS     r0,r7,#30
000580  0f80              LSRS     r0,r0,#30
000582  9005              STR      r0,[sp,#0x14]
;;;717    	disToNextWord = 0x04 - disToPreviousWord;
000584  2104              MOVS     r1,#4
000586  9805              LDR      r0,[sp,#0x14]
000588  1a08              SUBS     r0,r1,r0
00058a  9004              STR      r0,[sp,#0x10]
;;;718    	if (DataLen == 0x00)
00058c  2e00              CMP      r6,#0
00058e  d101              BNE      |L1.1428|
                  |L1.1424|
;;;719    	{
;;;720    		return;
;;;721    	}
;;;722    	if (disToPreviousWord)
;;;723    	{
;;;724    		tmpDataAddr = databuf;
;;;725    		tmpSpiData = (unsigned int *)&SPIDATA;
;;;726    		if (DataLen <= 0x10)
;;;727    		{
;;;728    			SPIDLEN = DataLen - 1;
;;;729    			START_SPI_MSTR_TRANS; 
;;;730    			while (SPI_IS_BUSY);
;;;731    
;;;732    			//read 16 bytes
;;;733    			*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;734    			*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;735    			*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;736    			*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;737    
;;;738    			CLEAR_SPI_DONE; 
;;;739    			HED_Memcpy(DataAddr,(unsigned char*)databuf,DataLen);
;;;740    			return;
;;;741    		}
;;;742    		else
;;;743    		{
;;;744    			SPIDLEN = disToNextWord - 0x01;
;;;745    			START_SPI_MSTR_TRANS; 
;;;746    			while (SPI_IS_BUSY);
;;;747    			//read 
;;;748                *tmpDataAddr++ = HED_WordEndianAlter(SPIDATA);
;;;749    
;;;750    			CLEAR_SPI_DONE; 
;;;751    			HED_Memcpy(DataAddr,(unsigned char*)databuf,disToNextWord);
;;;752    			DataAddr += disToNextWord;
;;;753    			DataLen -= disToNextWord;
;;;754    		}
;;;755    	}
;;;756    
;;;757    	div16Quotien = DataLen >> 4; 
;;;758    	div16Mod = DataLen & 0xF;
;;;759    	tmpDataAddr = (unsigned int *)DataAddr;
;;;760    	if (div16Quotien)
;;;761    	{
;;;762    		//SPIDLEN
;;;763    		SPIDLEN = 0xF; //16 bytes a time
;;;764    		while (div16Quotien--)
;;;765    		{
;;;766    			tmpSpiData = (unsigned int *)&SPIDATA;
;;;767    			START_SPI_MSTR_TRANS; 
;;;768    			while (SPI_IS_BUSY);
;;;769                
;;;770                *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;771                *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;772                *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;773                *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;774    			CLEAR_SPI_DONE; 
;;;775    		}
;;;776    		DataAddr = (unsigned char *)tmpDataAddr;
;;;777    	}
;;;778    
;;;779    	if (div16Mod)
;;;780    	{
;;;781    		SPIDLEN = div16Mod - 1; //left bytes
;;;782    		tmpDataAddr = databuf;
;;;783    		tmpSpiData = (unsigned int *)&SPIDATA;
;;;784    		START_SPI_MSTR_TRANS; 
;;;785    		while (SPI_IS_BUSY);
;;;786    
;;;787    		//read 16 bytes
;;;788    		*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;789    		*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;790    		*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;791    		*tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);    
;;;792    		CLEAR_SPI_DONE; 
;;;793    
;;;794    		HED_Memcpy(DataAddr,(unsigned char*)databuf,div16Mod);
;;;795    	}
;;;796    }
000590  b008              ADD      sp,sp,#0x20
000592  bdf0              POP      {r4-r7,pc}
                  |L1.1428|
000594  9805              LDR      r0,[sp,#0x14]         ;722
000596  2800              CMP      r0,#0                 ;722
000598  d05e              BEQ      |L1.1624|
00059a  466c              MOV      r4,sp                 ;724
00059c  4d9b              LDR      r5,|L1.2060|
00059e  3540              ADDS     r5,r5,#0x40           ;725
0005a0  2e10              CMP      r6,#0x10              ;726
0005a2  d82f              BHI      |L1.1540|
0005a4  1e70              SUBS     r0,r6,#1              ;728
0005a6  4999              LDR      r1,|L1.2060|
0005a8  6048              STR      r0,[r1,#4]            ;728
0005aa  4608              MOV      r0,r1                 ;729
0005ac  6980              LDR      r0,[r0,#0x18]         ;729
0005ae  2101              MOVS     r1,#1                 ;729
0005b0  4308              ORRS     r0,r0,r1              ;729
0005b2  4996              LDR      r1,|L1.2060|
0005b4  6188              STR      r0,[r1,#0x18]         ;729
0005b6  bf00              NOP                            ;730
                  |L1.1464|
0005b8  4894              LDR      r0,|L1.2060|
0005ba  6880              LDR      r0,[r0,#8]            ;730
0005bc  07c0              LSLS     r0,r0,#31             ;730
0005be  0fc0              LSRS     r0,r0,#31             ;730
0005c0  d0fa              BEQ      |L1.1464|
0005c2  cd01              LDM      r5!,{r0}              ;733
0005c4  f7fffffe          BL       HED_WordEndianAlter
0005c8  c401              STM      r4!,{r0}              ;733
0005ca  cd01              LDM      r5!,{r0}              ;734
0005cc  f7fffffe          BL       HED_WordEndianAlter
0005d0  c401              STM      r4!,{r0}              ;734
0005d2  cd01              LDM      r5!,{r0}              ;735
0005d4  f7fffffe          BL       HED_WordEndianAlter
0005d8  c401              STM      r4!,{r0}              ;735
0005da  cd01              LDM      r5!,{r0}              ;736
0005dc  f7fffffe          BL       HED_WordEndianAlter
0005e0  c401              STM      r4!,{r0}              ;736
0005e2  488a              LDR      r0,|L1.2060|
0005e4  6880              LDR      r0,[r0,#8]            ;738
0005e6  0840              LSRS     r0,r0,#1              ;738
0005e8  0040              LSLS     r0,r0,#1              ;738
0005ea  4988              LDR      r1,|L1.2060|
0005ec  6088              STR      r0,[r1,#8]            ;738
0005ee  4608              MOV      r0,r1                 ;738
0005f0  6940              LDR      r0,[r0,#0x14]         ;738
0005f2  0840              LSRS     r0,r0,#1              ;738
0005f4  0040              LSLS     r0,r0,#1              ;738
0005f6  6148              STR      r0,[r1,#0x14]         ;738
0005f8  4632              MOV      r2,r6                 ;739
0005fa  4669              MOV      r1,sp                 ;739
0005fc  4638              MOV      r0,r7                 ;739
0005fe  f7fffffe          BL       HED_Memcpy
000602  e7c5              B        |L1.1424|
                  |L1.1540|
000604  9804              LDR      r0,[sp,#0x10]         ;744
000606  1e40              SUBS     r0,r0,#1              ;744
000608  4980              LDR      r1,|L1.2060|
00060a  6048              STR      r0,[r1,#4]            ;744
00060c  4608              MOV      r0,r1                 ;745
00060e  6980              LDR      r0,[r0,#0x18]         ;745
000610  2101              MOVS     r1,#1                 ;745
000612  4308              ORRS     r0,r0,r1              ;745
000614  497d              LDR      r1,|L1.2060|
000616  6188              STR      r0,[r1,#0x18]         ;745
000618  bf00              NOP                            ;746
                  |L1.1562|
00061a  487c              LDR      r0,|L1.2060|
00061c  6880              LDR      r0,[r0,#8]            ;746
00061e  07c0              LSLS     r0,r0,#31             ;746
000620  0fc0              LSRS     r0,r0,#31             ;746
000622  d0fa              BEQ      |L1.1562|
000624  4979              LDR      r1,|L1.2060|
000626  3140              ADDS     r1,r1,#0x40           ;748
000628  6808              LDR      r0,[r1,#0]            ;748
00062a  f7fffffe          BL       HED_WordEndianAlter
00062e  c401              STM      r4!,{r0}              ;748
000630  4876              LDR      r0,|L1.2060|
000632  6880              LDR      r0,[r0,#8]            ;750
000634  0840              LSRS     r0,r0,#1              ;750
000636  0040              LSLS     r0,r0,#1              ;750
000638  4974              LDR      r1,|L1.2060|
00063a  6088              STR      r0,[r1,#8]            ;750
00063c  4608              MOV      r0,r1                 ;750
00063e  6940              LDR      r0,[r0,#0x14]         ;750
000640  0840              LSRS     r0,r0,#1              ;750
000642  0040              LSLS     r0,r0,#1              ;750
000644  6148              STR      r0,[r1,#0x14]         ;750
000646  4669              MOV      r1,sp                 ;751
000648  4638              MOV      r0,r7                 ;751
00064a  9a04              LDR      r2,[sp,#0x10]         ;751
00064c  f7fffffe          BL       HED_Memcpy
000650  9804              LDR      r0,[sp,#0x10]         ;752
000652  183f              ADDS     r7,r7,r0              ;752
000654  9804              LDR      r0,[sp,#0x10]         ;753
000656  1a36              SUBS     r6,r6,r0              ;753
                  |L1.1624|
000658  0930              LSRS     r0,r6,#4              ;757
00065a  9007              STR      r0,[sp,#0x1c]         ;757
00065c  0730              LSLS     r0,r6,#28             ;758
00065e  0f00              LSRS     r0,r0,#28             ;758
000660  9006              STR      r0,[sp,#0x18]         ;758
000662  463c              MOV      r4,r7                 ;759
000664  9807              LDR      r0,[sp,#0x1c]         ;760
000666  2800              CMP      r0,#0                 ;760
000668  d032              BEQ      |L1.1744|
00066a  200f              MOVS     r0,#0xf               ;763
00066c  4967              LDR      r1,|L1.2060|
00066e  6048              STR      r0,[r1,#4]            ;763
000670  e028              B        |L1.1732|
                  |L1.1650|
000672  4d66              LDR      r5,|L1.2060|
000674  3540              ADDS     r5,r5,#0x40           ;766
000676  4865              LDR      r0,|L1.2060|
000678  6980              LDR      r0,[r0,#0x18]         ;767
00067a  2101              MOVS     r1,#1                 ;767
00067c  4308              ORRS     r0,r0,r1              ;767
00067e  4963              LDR      r1,|L1.2060|
000680  6188              STR      r0,[r1,#0x18]         ;767
000682  bf00              NOP                            ;768
                  |L1.1668|
000684  4861              LDR      r0,|L1.2060|
000686  6880              LDR      r0,[r0,#8]            ;768
000688  07c0              LSLS     r0,r0,#31             ;768
00068a  0fc0              LSRS     r0,r0,#31             ;768
00068c  d0fa              BEQ      |L1.1668|
00068e  cd01              LDM      r5!,{r0}              ;770
000690  f7fffffe          BL       HED_WordEndianAlter
000694  c401              STM      r4!,{r0}              ;770
000696  cd01              LDM      r5!,{r0}              ;771
000698  f7fffffe          BL       HED_WordEndianAlter
00069c  c401              STM      r4!,{r0}              ;771
00069e  cd01              LDM      r5!,{r0}              ;772
0006a0  f7fffffe          BL       HED_WordEndianAlter
0006a4  c401              STM      r4!,{r0}              ;772
0006a6  cd01              LDM      r5!,{r0}              ;773
0006a8  f7fffffe          BL       HED_WordEndianAlter
0006ac  c401              STM      r4!,{r0}              ;773
0006ae  4857              LDR      r0,|L1.2060|
0006b0  6880              LDR      r0,[r0,#8]            ;774
0006b2  0840              LSRS     r0,r0,#1              ;774
0006b4  0040              LSLS     r0,r0,#1              ;774
0006b6  4955              LDR      r1,|L1.2060|
0006b8  6088              STR      r0,[r1,#8]            ;774
0006ba  4608              MOV      r0,r1                 ;774
0006bc  6940              LDR      r0,[r0,#0x14]         ;774
0006be  0840              LSRS     r0,r0,#1              ;774
0006c0  0040              LSLS     r0,r0,#1              ;774
0006c2  6148              STR      r0,[r1,#0x14]         ;774
                  |L1.1732|
0006c4  9807              LDR      r0,[sp,#0x1c]         ;764
0006c6  1e41              SUBS     r1,r0,#1              ;764
0006c8  9107              STR      r1,[sp,#0x1c]         ;764
0006ca  2800              CMP      r0,#0                 ;764
0006cc  d1d1              BNE      |L1.1650|
0006ce  4627              MOV      r7,r4                 ;776
                  |L1.1744|
0006d0  9806              LDR      r0,[sp,#0x18]         ;779
0006d2  2800              CMP      r0,#0                 ;779
0006d4  d032              BEQ      |L1.1852|
0006d6  9806              LDR      r0,[sp,#0x18]         ;781
0006d8  1e40              SUBS     r0,r0,#1              ;781
0006da  494c              LDR      r1,|L1.2060|
0006dc  6048              STR      r0,[r1,#4]            ;781
0006de  466c              MOV      r4,sp                 ;782
0006e0  4d4a              LDR      r5,|L1.2060|
0006e2  3540              ADDS     r5,r5,#0x40           ;783
0006e4  4608              MOV      r0,r1                 ;784
0006e6  6980              LDR      r0,[r0,#0x18]         ;784
0006e8  2101              MOVS     r1,#1                 ;784
0006ea  4308              ORRS     r0,r0,r1              ;784
0006ec  4947              LDR      r1,|L1.2060|
0006ee  6188              STR      r0,[r1,#0x18]         ;784
0006f0  bf00              NOP                            ;785
                  |L1.1778|
0006f2  4846              LDR      r0,|L1.2060|
0006f4  6880              LDR      r0,[r0,#8]            ;785
0006f6  07c0              LSLS     r0,r0,#31             ;785
0006f8  0fc0              LSRS     r0,r0,#31             ;785
0006fa  d0fa              BEQ      |L1.1778|
0006fc  cd01              LDM      r5!,{r0}              ;788
0006fe  f7fffffe          BL       HED_WordEndianAlter
000702  c401              STM      r4!,{r0}              ;788
000704  cd01              LDM      r5!,{r0}              ;789
000706  f7fffffe          BL       HED_WordEndianAlter
00070a  c401              STM      r4!,{r0}              ;789
00070c  cd01              LDM      r5!,{r0}              ;790
00070e  f7fffffe          BL       HED_WordEndianAlter
000712  c401              STM      r4!,{r0}              ;790
000714  cd01              LDM      r5!,{r0}              ;791
000716  f7fffffe          BL       HED_WordEndianAlter
00071a  c401              STM      r4!,{r0}              ;791
00071c  483b              LDR      r0,|L1.2060|
00071e  6880              LDR      r0,[r0,#8]            ;792
000720  0840              LSRS     r0,r0,#1              ;792
000722  0040              LSLS     r0,r0,#1              ;792
000724  4939              LDR      r1,|L1.2060|
000726  6088              STR      r0,[r1,#8]            ;792
000728  4608              MOV      r0,r1                 ;792
00072a  6940              LDR      r0,[r0,#0x14]         ;792
00072c  0840              LSRS     r0,r0,#1              ;792
00072e  0040              LSLS     r0,r0,#1              ;792
000730  6148              STR      r0,[r1,#0x14]         ;792
000732  4669              MOV      r1,sp                 ;794
000734  4638              MOV      r0,r7                 ;794
000736  9a06              LDR      r2,[sp,#0x18]         ;794
000738  f7fffffe          BL       HED_Memcpy
                  |L1.1852|
00073c  bf00              NOP      
00073e  e727              B        |L1.1424|
;;;797    /* SPI-Slave */
                          ENDP

                  HED_SPIS_SendNBytes PROC
;;;806    *************************************************/ 
;;;807    void HED_SPIS_SendNBytes(unsigned char *DataAddr, unsigned int DataLen)
000740  b5fe              PUSH     {r1-r7,lr}
;;;808    {
000742  4606              MOV      r6,r0
000744  460f              MOV      r7,r1
;;;809    	unsigned int tmpSpiden,tmpDataNum;
;;;810    
;;;811    	__packed unsigned int* tmpDataAddr;
;;;812    	unsigned int* tmpSpiData;
;;;813    
;;;814        tmpSpiden = 0;
000746  2000              MOVS     r0,#0
000748  9002              STR      r0,[sp,#8]
;;;815        tmpDataNum = 0;
00074a  9001              STR      r0,[sp,#4]
;;;816    	while (tmpDataNum < DataLen)
00074c  e03d              B        |L1.1994|
                  |L1.1870|
;;;817    	{
;;;818    		tmpDataAddr = (__packed unsigned int*)DataAddr;
00074e  4634              MOV      r4,r6
;;;819    
;;;820    		//write 16 bytes to buffer every time
;;;821    		tmpSpiData = (unsigned int *)&SPIDATA;
000750  4d2e              LDR      r5,|L1.2060|
000752  3540              ADDS     r5,r5,#0x40
;;;822            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
000754  4620              MOV      r0,r4
000756  f7fffffe          BL       __aeabi_uread4
00075a  1d24              ADDS     r4,r4,#4
00075c  9000              STR      r0,[sp,#0]
00075e  f7fffffe          BL       HED_WordEndianAlter
000762  c501              STM      r5!,{r0}
;;;823            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
000764  4620              MOV      r0,r4
000766  f7fffffe          BL       __aeabi_uread4
00076a  1d24              ADDS     r4,r4,#4
00076c  9000              STR      r0,[sp,#0]
00076e  f7fffffe          BL       HED_WordEndianAlter
000772  c501              STM      r5!,{r0}
;;;824            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
000774  4620              MOV      r0,r4
000776  f7fffffe          BL       __aeabi_uread4
00077a  1d24              ADDS     r4,r4,#4
00077c  9000              STR      r0,[sp,#0]
00077e  f7fffffe          BL       HED_WordEndianAlter
000782  c501              STM      r5!,{r0}
;;;825            *tmpSpiData++ = HED_WordEndianAlter(*tmpDataAddr++);
000784  4620              MOV      r0,r4
000786  f7fffffe          BL       __aeabi_uread4
00078a  1d24              ADDS     r4,r4,#4
00078c  9000              STR      r0,[sp,#0]
00078e  f7fffffe          BL       HED_WordEndianAlter
000792  c501              STM      r5!,{r0}
;;;826    		
;;;827    		CLEAR_SPI_DONE;
000794  481d              LDR      r0,|L1.2060|
000796  6880              LDR      r0,[r0,#8]
000798  0840              LSRS     r0,r0,#1
00079a  0040              LSLS     r0,r0,#1
00079c  491b              LDR      r1,|L1.2060|
00079e  6088              STR      r0,[r1,#8]
0007a0  4608              MOV      r0,r1
0007a2  6940              LDR      r0,[r0,#0x14]
0007a4  0840              LSRS     r0,r0,#1
0007a6  0040              LSLS     r0,r0,#1
0007a8  6148              STR      r0,[r1,#0x14]
;;;828    		while (SPI_IS_BUSY);//wait transfer over
0007aa  bf00              NOP      
                  |L1.1964|
0007ac  4817              LDR      r0,|L1.2060|
0007ae  6880              LDR      r0,[r0,#8]
0007b0  07c0              LSLS     r0,r0,#31
0007b2  0fc0              LSRS     r0,r0,#31
0007b4  d0fa              BEQ      |L1.1964|
;;;829    
;;;830    		//read spidlen
;;;831    		tmpSpiden = SPIDLEN+1; //how many bytes transfer success
0007b6  4815              LDR      r0,|L1.2060|
0007b8  6840              LDR      r0,[r0,#4]
0007ba  1c40              ADDS     r0,r0,#1
0007bc  9002              STR      r0,[sp,#8]
;;;832    		tmpDataNum += tmpSpiden;
0007be  9902              LDR      r1,[sp,#8]
0007c0  9801              LDR      r0,[sp,#4]
0007c2  1840              ADDS     r0,r0,r1
0007c4  9001              STR      r0,[sp,#4]
;;;833    		DataAddr += tmpSpiden;
0007c6  9802              LDR      r0,[sp,#8]
0007c8  1836              ADDS     r6,r6,r0
                  |L1.1994|
0007ca  9801              LDR      r0,[sp,#4]            ;816
0007cc  42b8              CMP      r0,r7                 ;816
0007ce  d3be              BCC      |L1.1870|
;;;834    	}
;;;835    }
0007d0  bdfe              POP      {r1-r7,pc}
;;;836    /************************************************* 
                          ENDP

                  HED_SPIS_ReceiveNBytesRam PROC
;;;844    *************************************************/ 
;;;845    unsigned char HED_SPIS_ReceiveNBytesRam(unsigned char *DataAddr, unsigned int DataLen)
0007d2  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;846    {
0007d4  b085              SUB      sp,sp,#0x14
0007d6  460e              MOV      r6,r1
;;;847    
;;;848    	unsigned int tmpSpiden = 0,tmpDataNum = 0;
0007d8  2700              MOVS     r7,#0
0007da  2000              MOVS     r0,#0
0007dc  9004              STR      r0,[sp,#0x10]
;;;849    	unsigned int databuf[4];
;;;850    	unsigned int* tmpDataAddr,*tmpSpiData;
;;;851    
;;;852    	while (tmpDataNum < DataLen)
0007de  e043              B        |L1.2152|
                  |L1.2016|
;;;853    	{
;;;854    		tmpDataAddr = databuf;
0007e0  466c              MOV      r4,sp
;;;855    		tmpSpiData = (unsigned int *)&SPIDATA;
0007e2  4d0a              LDR      r5,|L1.2060|
0007e4  3540              ADDS     r5,r5,#0x40
;;;856    		while (SPI_IS_BUSY);
0007e6  bf00              NOP      
                  |L1.2024|
0007e8  4808              LDR      r0,|L1.2060|
0007ea  6880              LDR      r0,[r0,#8]
0007ec  07c0              LSLS     r0,r0,#31
0007ee  0fc0              LSRS     r0,r0,#31
0007f0  d0fa              BEQ      |L1.2024|
;;;857    		if (SPI_SLAVE_RECEIVER_IS_OVERFLOW)
0007f2  4806              LDR      r0,|L1.2060|
0007f4  6880              LDR      r0,[r0,#8]
0007f6  2102              MOVS     r1,#2
0007f8  4208              TST      r0,r1
0007fa  d009              BEQ      |L1.2064|
;;;858    		{
;;;859    			CLEAR_SPI_RECEIVER_OVERFLOW;
0007fc  4803              LDR      r0,|L1.2060|
0007fe  6880              LDR      r0,[r0,#8]
000800  4388              BICS     r0,r0,r1
000802  4902              LDR      r1,|L1.2060|
000804  6088              STR      r0,[r1,#8]
;;;860    			return (1);
000806  2001              MOVS     r0,#1
                  |L1.2056|
;;;861    		}	
;;;862    		//read spidlen
;;;863    		tmpSpiden = SPIDLEN+1; //received bytes 
;;;864            *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;865            *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;866            *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;867            *tmpDataAddr++ = HED_WordEndianAlter(*tmpSpiData++);
;;;868    		HED_Memcpy(DataAddr,(unsigned char *)databuf,tmpSpiden);
;;;869    		DataAddr += tmpSpiden;
;;;870    		tmpDataNum += tmpSpiden;
;;;871            if(tmpDataNum < DataLen)
;;;872            {
;;;873                CLEAR_SPI_DONE;
;;;874            }		          
;;;875    	}
;;;876    	return (0);
;;;877    }
000808  b007              ADD      sp,sp,#0x1c
00080a  bdf0              POP      {r4-r7,pc}
                  |L1.2060|
                          DCD      0x40001800
                  |L1.2064|
000810  4818              LDR      r0,|L1.2164|
000812  6840              LDR      r0,[r0,#4]            ;863
000814  1c47              ADDS     r7,r0,#1              ;863
000816  cd01              LDM      r5!,{r0}              ;864
000818  f7fffffe          BL       HED_WordEndianAlter
00081c  c401              STM      r4!,{r0}              ;864
00081e  cd01              LDM      r5!,{r0}              ;865
000820  f7fffffe          BL       HED_WordEndianAlter
000824  c401              STM      r4!,{r0}              ;865
000826  cd01              LDM      r5!,{r0}              ;866
000828  f7fffffe          BL       HED_WordEndianAlter
00082c  c401              STM      r4!,{r0}              ;866
00082e  cd01              LDM      r5!,{r0}              ;867
000830  f7fffffe          BL       HED_WordEndianAlter
000834  c401              STM      r4!,{r0}              ;867
000836  463a              MOV      r2,r7                 ;868
000838  4669              MOV      r1,sp                 ;868
00083a  9805              LDR      r0,[sp,#0x14]         ;868
00083c  f7fffffe          BL       HED_Memcpy
000840  9805              LDR      r0,[sp,#0x14]         ;869
000842  19c0              ADDS     r0,r0,r7              ;869
000844  9005              STR      r0,[sp,#0x14]         ;869
000846  9804              LDR      r0,[sp,#0x10]         ;870
000848  19c0              ADDS     r0,r0,r7              ;870
00084a  9004              STR      r0,[sp,#0x10]         ;870
00084c  9804              LDR      r0,[sp,#0x10]         ;871
00084e  42b0              CMP      r0,r6                 ;871
000850  d20a              BCS      |L1.2152|
000852  4808              LDR      r0,|L1.2164|
000854  6880              LDR      r0,[r0,#8]            ;873
000856  0840              LSRS     r0,r0,#1              ;873
000858  0040              LSLS     r0,r0,#1              ;873
00085a  4906              LDR      r1,|L1.2164|
00085c  6088              STR      r0,[r1,#8]            ;873
00085e  4608              MOV      r0,r1                 ;873
000860  6940              LDR      r0,[r0,#0x14]         ;873
000862  0840              LSRS     r0,r0,#1              ;873
000864  0040              LSLS     r0,r0,#1              ;873
000866  6148              STR      r0,[r1,#0x14]         ;873
                  |L1.2152|
000868  9804              LDR      r0,[sp,#0x10]         ;852
00086a  42b0              CMP      r0,r6                 ;852
00086c  d3b8              BCC      |L1.2016|
00086e  2000              MOVS     r0,#0                 ;876
000870  e7ca              B        |L1.2056|
                          ENDP

000872  0000              DCW      0x0000
                  |L1.2164|
                          DCD      0x40001800

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  SYS_PKE_ClkTable
000000  00010107          DCB      0x00,0x01,0x01,0x07
000004  070707            DCB      0x07,0x07,0x07

;*** Start embedded assembler ***

#line 1 "API\\CIU98M25_API_Base_NoNVM.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |delay|
#line 406
|delay| PROC
#line 407

loopStart
 SUBS r0,r0,#1
 BCS loopStart
 BX lr
	ENDP

;*** End   embedded assembler ***
